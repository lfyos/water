struct vertex_to_fragment_struct
{
	@location(0)		vertex_coord		:	vec4<f32>,
	@location(1)		vertex_id			:	vec4<f32>,
	@builtin(position)	vertex_position		:	vec4<f32>				
};
struct from_fragment_struct
{
	@location(0) 	color	:	vec4<f32>,
	@location(1) 	id		:	vec4<i32>
};


@vertex
fn vertex_main(
		@location(0) my_coord		:	vec4<f32>,
		@location(1) my_normal		:	vec4<f32>,
		@location(2) my_material	:	vec4<f32>,
		@location(3) my_id			:	vec4<f32>,
		@location(4) my_texture		:	vec4<f32>
	)->vertex_to_fragment_struct
{
	var vtfs:vertex_to_fragment_struct;
	
	vtfs.vertex_coord	=my_coord;
	vtfs.vertex_id		=my_id;
	vtfs.vertex_position=target_info.projection_matrix*(location_info.matrix*my_coord);
	
	return vtfs;
}

@fragment
fn fragment_main(vtfs	:	vertex_to_fragment_struct) -> from_fragment_struct
{
	var ffs:from_fragment_struct;
	
	ffs.id=vec4<i32>(
			id_info.component_system_id,
			i32(vtfs.vertex_id.x),
			i32(vtfs.vertex_id.y),
			i32(vtfs.vertex_id.z)
	);

	var t=system_info.second%6;
	
	if(t<2){
		ffs.color=vec4(1.0, 0.0, 0.0, 1.0);
	}else if(t<4){
		ffs.color=vec4(0.0, 1.0, 0.0, 1.0);
	}else{
		ffs.color=vec4(0.0, 0.0, 1.0, 1.0);
	}
	
	return ffs;
}

