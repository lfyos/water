struct vertex_to_fragment_struct
{
	@builtin(position)	vertex_position		:	vec4<f32>,	
	@location(0)		vertex_id			:	vec4<f32>,
	@location(1)		vertex_value		:	vec4<f32>
};
struct fragment_to_target_struct
{
	@location(0) 	color	:	vec4<f32>,
	@location(1) 	id		:	vec4<i32>
};

@vertex
fn vertex_main(
		@location(0) my_coord		:	vec4<f32>,
		@location(1) my_normal		:	vec4<f32>,
		@location(2) my_material	:	vec4<f32>,
		@location(3) my_id			:	vec4<f32>,
		@location(4) my_texture		:	vec4<f32>
	)->vertex_to_fragment_struct
{
	var vf:vertex_to_fragment_struct;
	
	vf.vertex_position	=target_info.projection_matrix*(location_info.matrix*my_coord);
	vf.vertex_id		=my_id;
	vf.vertex_value		=vec4<f32>(5.5,6.6,7.7,vf.vertex_position.z/vf.vertex_position.w);
	return vf;
}

@fragment
fn fragment_main(vf	:	vertex_to_fragment_struct) -> fragment_to_target_struct
{
	var ft : fragment_to_target_struct;
	
	ft.id=vec4<i32>(
			id_info.component_system_id,
			i32(vf.vertex_id.x),
			i32(vf.vertex_id.y),
			i32(vf.vertex_id.z));

	if(method_info.method_id==0){
		ft.color=vf.vertex_value;
	}else{
		var t=system_info.second%6;

		if(t<2){
			ft.color=vec4(1.0, 0.0, 0.0, 1.0);
		}else if(t<4){
			ft.color=vec4(0.0, 1.0, 0.0, 1.0);
		}else{
			ft.color=vec4(0.0, 0.0, 1.0, 1.0);
		}
	}
	return ft;
}

