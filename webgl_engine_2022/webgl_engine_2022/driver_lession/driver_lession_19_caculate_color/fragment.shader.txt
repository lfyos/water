uniform vec4 light_position,color;
uniform float ambient_scale,diffuse_scale,specular_scale,shininess_scale,k0,k1,k2;

in vec4 frag_location,frag_normal;

layout (location = 0) out vec4 frag_data;

void main(void)
{
	vec4 p0=component_info.model_matrix*frag_location;
	vec4 pn=component_info.model_matrix*vec4(frag_location.xyz+frag_normal.xyz,1.0);
	vec4 eye_position=target_info.eye_point;
		
	vec3 p_normal	=normalize(pn.xyz/pn.w-p0.xyz/p0.w);
	
	vec3 p_to_light	=light_position.xyz/light_position.w-p0.xyz/p0.w;
	float p_light_length=length(p_to_light);
	p_to_light		=normalize(p_to_light);
	
	vec3 p_to_eye	=normalize(eye_position.xyz/eye_position.w-p0.xyz/p0.w);
	vec3 p_half		=normalize(p_to_light+p_to_eye);
	
	float diffuse_value	=max(0.0,dot(p_normal,p_to_light));
	float specular_value=max(0.0,dot(p_normal,p_half));
		
	float p=0.0;
	p+=ambient_scale;
	p+=diffuse_scale*diffuse_value;
	if(specular_value>0.0)
		p+=specular_scale*pow(specular_value,shininess_scale);
	
	p/=k0+(k1+k2*p_light_length)*p_light_length;
	
	frag_data=vec4(color.rgb*p,1.0);
}

