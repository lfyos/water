struct marker_information 
{
	marker_component_id		:	i32,
	marker_driver_id		:	i32,
	marker_body_id			:	i32,
	marker_system_id		:	i32,

	face_normal_color		:	vec4<f32>,
	face_pickup_color		:	vec4<f32>,
				
	edge_normal_color		:	vec4<f32>,
	edge_pickup_color		:	vec4<f32>,			
				
	point_normal_color		:	vec4<f32>,
	point_pickup_color		:	vec4<f32>,
	
	marker_position			:	vec4<f32>,
	
	marker_face_x_scale		:	f32,
	marker_face_y_scale		:	f32,
	marker_edge_y_scale		:	f32,
	point_size				:	f32
};

@group(1) @binding(0) var <uniform> marker_info	:	marker_information;
@group(1) @binding(1) var marker_texture		:	texture_2d<f32>;
@group(1) @binding(2) var marker_sampler		:	sampler;

override primitive_type		:	i32;

struct vertex_to_fragment_struct
{
	@builtin(position)	vertex_position		:	vec4<f32>,
	@location(1)		vertex_texture		:	vec4<f32>
};
struct id_target_struct
{
	@location(0) 			id_0	:	vec4<i32>,
	@location(1) 			id_1	:	vec4<i32>,
	@builtin(frag_depth)	depth	:	f32
};

struct color_target_struct
{
	@location(0) 			color	:	vec4<f32>,
	@builtin(frag_depth)	depth	:	f32
};

@vertex
fn vertex_main(
		@location(0) 			my_coord		:	vec4<f32>,
		@location(1) 			my_texture		:	vec4<f32>,
		@builtin(vertex_index)	my_vertex_index	:	u32
	)->vertex_to_fragment_struct
{
	var vf					:	vertex_to_fragment_struct;
	
	vf.vertex_texture=vec4(my_texture.x,1.0-my_texture.y,my_texture.zw);
	
	var width				:	i32;
	var height				:	i32;
	var projection_matrix	:	mat4x4<f32>;
	
	switch(primitive_type){
	default:	//id
		{
			width	=system_info.main_target_view_width;
			height	=system_info.main_target_view_height;
			
			projection_matrix=target_info.projection_matrix;
			projection_matrix=target_info.negative_screen_move_matrix*projection_matrix;
			projection_matrix=system_info.main_target_screen_move_matrix*projection_matrix;
			break;
		}
	case 2,3,4:		//face,edge,point
		{
			width	=target_info.target_view_width;
			height	=target_info.target_view_height;
			projection_matrix=target_info.projection_matrix;
			break;
		}
	}
	vf.vertex_position=projection_matrix*(location_info.matrix*marker_info.marker_position);
	vf.vertex_position=vf.vertex_position/vf.vertex_position.w;
	
	var face_width	=marker_info.marker_face_x_scale/f32(width);
	var face_height	=marker_info.marker_face_y_scale/f32(height);
	var edge_height	=marker_info.marker_edge_y_scale;
	
	if(vf.vertex_position.y+edge_height+face_height>1.0){
		edge_height=1.0-vf.vertex_position.y-face_height;
		if(edge_height<0.0){
			edge_height=0.0;
			if(vf.vertex_position.y+face_height>1.0){
				face_height=1.0-vf.vertex_position.y;
				if(face_height<0.0){
					face_height=0.0;
				}
			}
		}
	}
	switch(primitive_type){
	default:	//face  id
	{
		vf.vertex_position.x=vf.vertex_position.x+my_coord.x*face_width;
		vf.vertex_position.y=vf.vertex_position.y+edge_height+my_coord.y*face_height;
		
		vf.vertex_position=system_info.main_target_negative_screen_move_matrix*vf.vertex_position;
		vf.vertex_position=target_info.screen_move_matrix*vf.vertex_position;
		break;
	}
	case 1:	//point id
	{
		vf.vertex_texture=point_texture_position[my_vertex_index%6];
		vf.vertex_position=(vf.vertex_position/vf.vertex_position.w)
			+(marker_info.point_size*vec4(1.0/f32(width),1.0/f32(height),0.0,0.0)*vf.vertex_texture);
			
		vf.vertex_position=system_info.main_target_negative_screen_move_matrix*vf.vertex_position;
		vf.vertex_position=target_info.screen_move_matrix*vf.vertex_position;
	}
	case 2:		//face
	{
		vf.vertex_position.x=vf.vertex_position.x+my_coord.x*face_width;
		vf.vertex_position.y=vf.vertex_position.y+edge_height+my_coord.y*face_height;
	}
	case 3:		//edge
	{
		vf.vertex_position.y=vf.vertex_position.y+my_coord.y*edge_height;
		break;
	}
	case 4:		//point
	{
		vf.vertex_texture=point_texture_position[my_vertex_index%6];
		vf.vertex_position=(vf.vertex_position/vf.vertex_position.w)
			+(marker_info.point_size*vec4(1.0/f32(width),1.0/f32(height),0.0,0.0)*vf.vertex_texture);
		break;
	}
	}
	return vf;
}

@fragment
fn fragment_face_id_fun(vf	:	vertex_to_fragment_struct) -> id_target_struct
{
	var ret_val	:	id_target_struct;
	
	ret_val.depth=0.0;
	ret_val.id_0=vec4(marker_info.marker_system_id,marker_info.marker_body_id,0,0);
	ret_val.id_1=vec4(-1,-1,0,0);
	
	return ret_val;
}

@fragment
fn fragment_point_id_fun(vf	:	vertex_to_fragment_struct) -> id_target_struct
{
	var ret_val	:	id_target_struct;
	
	ret_val.depth=vf.vertex_position.z/vf.vertex_position.w;
	ret_val.id_0=vec4(marker_info.marker_system_id,marker_info.marker_body_id,0,2);
	ret_val.id_1=vec4(0,0,0,0);
	
	if(dot(vf.vertex_texture,vf.vertex_texture)>1.0){
		discard;
	}
	return ret_val;
}

@fragment
fn fragment_face_fun(vf	:	vertex_to_fragment_struct) -> color_target_struct
{
	var ret_val	:	color_target_struct;
	
	ret_val.depth=0.0;
	ret_val.color=textureSample(marker_texture,marker_sampler,vf.vertex_texture.xy);
	if(dot(ret_val.color.rgb,ret_val.color.rgb)<0.75){
		discard;
	}
	ret_val.color=marker_info.face_normal_color;
	if(   (system_info.pickup_component_id==marker_info.marker_component_id)
		&&(system_info.pickup_driver_id==marker_info.marker_driver_id)
		&&(system_info.pickup_body_id==marker_info.marker_body_id))
	{
		ret_val.color=marker_info.face_pickup_color;
	}
	return ret_val;
}
@fragment
fn fragment_edge_fun(vf	:	vertex_to_fragment_struct) -> color_target_struct
{
	var ret_val	:	color_target_struct;
	
	ret_val.depth=vf.vertex_position.z/vf.vertex_position.w;
	ret_val.color=marker_info.edge_normal_color;
	if(   (system_info.pickup_component_id==marker_info.marker_component_id)
		&&(system_info.pickup_driver_id==marker_info.marker_driver_id)
		&&(system_info.pickup_body_id==marker_info.marker_body_id))
	{
		ret_val.color=marker_info.edge_pickup_color;
	}
	return ret_val;
}

@fragment
fn fragment_point_fun(vf	:	vertex_to_fragment_struct) -> color_target_struct
{
	var ret_val	:	color_target_struct;

	ret_val.depth=vf.vertex_position.z/vf.vertex_position.w;
	ret_val.color=marker_info.point_normal_color;
	
	if(   (system_info.pickup_component_id==marker_info.marker_component_id)
		&&(system_info.pickup_driver_id==marker_info.marker_driver_id)
		&&(system_info.pickup_body_id==marker_info.marker_body_id))
	{
		ret_val.color=marker_info.point_pickup_color;
		if(system_info.millisecond>500){
			discard;
		}
	}
	if(dot(vf.vertex_texture,vf.vertex_texture)>1.0){
		discard;
	}
	return ret_val;
}
