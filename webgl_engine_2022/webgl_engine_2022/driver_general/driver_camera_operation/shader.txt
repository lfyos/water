override primitive_type: i32;

struct vertex_to_fragment_struct
{
	@builtin(position)	vertex_position		:	vec4<f32>,	
	@location(0)		vertex_material		:	vec4<f32>,
	@location(1)		vertex_id			:	vec4<f32>,
	@location(2)		vertex_value		:	vec4<f32>
};

struct fragment_to_target_struct
{
	@location(0) 			color	:	vec4<f32>,
	@location(1) 			id		:	vec4<i32>,
	@builtin(frag_depth)	depth	:	f32
};

@vertex
fn vertex_main(
		@location(0) my_coord		:	vec4<f32>,
		@location(1) my_normal		:	vec4<f32>,
		@location(2) my_material	:	vec4<f32>,
		@location(3) my_id			:	vec4<f32>,
		@location(4) my_texture		:	vec4<f32>,
		@location(5) my_position	:	vec4<f32>
	)->vertex_to_fragment_struct
{
	var vf:vertex_to_fragment_struct;

	vf.vertex_position=target_info.camera_location*vec4(0.0,0.0,my_position.z,1.0);
	vf.vertex_position=vec4(vf.vertex_position.xyz/vf.vertex_position.w+my_coord.xyz*my_position.w,1.0);
	vf.vertex_position=target_info.projection_matrix*vf.vertex_position;
	vf.vertex_position=vf.vertex_position/vf.vertex_position.w;
	vf.vertex_position=vec4(vf.vertex_position.xy+my_position.xy,vf.vertex_position.zw);
	vf.vertex_position=vf.vertex_position/vf.vertex_position.w;

	vf.vertex_value		=vec4<f32>(0.0,0.0,0.0,vf.vertex_position.z);
	vf.vertex_material	=my_material;
	vf.vertex_id		=my_id;
	
	switch(primitive_type){
	default:
	{
		break;
	}
	case 2,3:
	{
		vf.vertex_position.z=vf.vertex_position.z-0.001;
		break;
	}
	}
	return vf;
};

@fragment
fn fragment_main(vf	:	vertex_to_fragment_struct) -> fragment_to_target_struct
{
	var ft : fragment_to_target_struct;
	
	ft.depth=vf.vertex_position.z;
	
	switch(primitive_type){
	case 0,default:
	{
		ft.color=vf.vertex_value;
		ft.id	=vec4<i32>(-1,-1,i32(vf.vertex_id.z),i32(vf.vertex_id.w));
		break;
	}
	case 1:
	{
		ft.color=vec4<f32>(0.25,0.25,0.25,1.0);
		ft.id	=vec4<i32>(id_info.component_system_id,i32(vf.vertex_id.x),i32(vf.vertex_id.y),0);
		break;
	}
	case 2:
	{
		ft.color	=vec4<f32>(0.0,1.0,0.0,1.0);
		ft.id		=vec4<i32>(-1,-1,-1,-1);
		if(system_info.pickup_component_id==id_info.component_id){
			if(system_info.pickup_driver_id==id_info.driver_id){
				if(system_info.pickup_body_id==i32(vf.vertex_id.x)){
					if(system_info.pickup_face_id==i32(vf.vertex_id.y)){
						ft.color=vec4<f32>(1.0,0.0,0.0,1.0);
						ft.depth=0.0;
					}
				}
			}
		}
		break;
	}
	case 3:
	{
		ft.color=vec4<f32>(1.0,0.0,0.0,1.0);
		ft.id	=vec4<i32>(-1,-1,-1,-1);
		if(system_info.pickup_component_id==id_info.component_id){
			if(system_info.pickup_driver_id==id_info.driver_id){
				if(system_info.pickup_body_id==i32(vf.vertex_id.x)){
					if(system_info.pickup_face_id==i32(vf.vertex_id.y)){
						ft.depth=0.0;
						break;
					}
				}
			}
		}
		discard;
		break;
	}
	}
	return ft;
}
