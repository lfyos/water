struct tag_information 
{
	tag_component_id		:	i32,
	tag_driver_id			:	i32,
	tag_body_id				:	i32,
	tag_system_id			:	i32,

	face_normal_color		:	vec4<f32>,
	face_pickup_color		:	vec4<f32>,
				
	edge_normal_color		:	vec4<f32>,
	edge_pickup_color		:	vec4<f32>,			
				
	point_normal_color		:	vec4<f32>,
	point_pickup_color		:	vec4<f32>,
	
	tag_p0					:	vec4<f32>,
	tag_dx					:	vec4<f32>,
	tag_dy					:	vec4<f32>,
	
	width_pixel_number		:	f32,
	height_pixel_number		:	f32,
	height_adjust			:	f32,
	tmp_1					:	f32
};

@group(1) @binding(0) var <uniform> tag_info	:	tag_information;
@group(1) @binding(1) var 			tag_texture	:	texture_2d<f32>;
@group(1) @binding(2) var 			tag_sampler	:	sampler;

override primitive_type							:	i32;

struct vertex_to_fragment_struct
{
		@builtin(position)	vertex_position		:	vec4<f32>,
		@location(1)		vertex_texture		:	vec4<f32>
};
struct fragment_to_target_struct
{
		@location(0) 				color		:	vec4<f32>,
		@location(1) 				id			:	vec4<i32>,
		@builtin(frag_depth)		depth		:	f32
};

@vertex
fn vertex_main(
		@location(0) my_coord		:	vec4<f32>,
		@location(1) my_texture		:	vec4<f32>
	)->vertex_to_fragment_struct
{
	var vf:vertex_to_fragment_struct;
	
	switch(primitive_type){
	default:	//face
		{
			var x_unit=normalize(tag_info.tag_dx);
			var y_unit=normalize(tag_info.tag_dy);
			var p_origin=tag_info.tag_p0+0.5*tag_info.tag_dx+1.0*tag_info.tag_dy;
			var p0=target_info.projection_matrix*(p_origin);
			var px=target_info.projection_matrix*(p_origin+x_unit);
			var py=target_info.projection_matrix*(p_origin+y_unit);
			var width_height=vec4(f32(target_info.target_width),f32(target_info.target_height),0.0,0.0);
			var x_scale=f32(tag_info.width_pixel_number) /length((px/px.w-p0/p0.w)*width_height);
			var y_scale=f32(tag_info.height_pixel_number)/length((py/py.w-p0/p0.w)*width_height);
			vf.vertex_position=p_origin+my_coord.x*x_scale*x_unit
					+(my_coord.y+tag_info.height_adjust)*y_scale*y_unit;
			vf.vertex_position=target_info.projection_matrix*vf.vertex_position;
			break;
		}
	case 1,2:	//edge,point
		{
			vf.vertex_position=tag_info.tag_p0+my_coord.x*tag_info.tag_dx+my_coord.y*tag_info.tag_dy;
			vf.vertex_position	=target_info.projection_matrix*vf.vertex_position;
			break;
		}
	}

	if(dot(target_info.to_right_direction.xyz,tag_info.tag_dx.xyz)>0.0){
		if(dot(target_info.to_up_direction.xyz,tag_info.tag_dy.xyz)<0.0){
			vf.vertex_texture	=vec4(my_texture.x,    my_texture.y,my_texture.zw);
		}else{
			vf.vertex_texture	=vec4(my_texture.x,1.0-my_texture.y,my_texture.zw);
		}
	}else{
		if(dot(target_info.to_up_direction.xyz,tag_info.tag_dy.xyz)<0.0){
			vf.vertex_texture	=vec4(1.0-my_texture.x,    my_texture.y,my_texture.zw);
		}else{
			vf.vertex_texture	=vec4(1.0-my_texture.x,1.0-my_texture.y,my_texture.zw);
		}
	}
	return vf;
}

@fragment
fn fragment_main(vf	:	vertex_to_fragment_struct) -> fragment_to_target_struct
{
	var ft 	:	fragment_to_target_struct;

	ft.id=vec4(tag_info.tag_system_id,tag_info.tag_body_id,0,0);
	switch(primitive_type){
	default:	//face
		{
			ft.depth=0.0;
			ft.color=textureSample(tag_texture,tag_sampler,vf.vertex_texture.xy);
			if(dot(ft.color.rgb,ft.color.rgb)<0.75){
				ft.color.a=0.0;
			}else{
				ft.color.a=1.0;
			}
			ft.color=vec4(tag_info.face_normal_color.rgb,ft.color.a);
			if(   (system_info.pickup_component_id==tag_info.tag_component_id)
				&&(system_info.pickup_driver_id==tag_info.tag_driver_id)
				&&(system_info.pickup_body_id==tag_info.tag_body_id))
			{
				ft.color=vec4(tag_info.face_pickup_color.rgb,ft.color.a);
			}
			break;
		}
	case 1:	//edge
		{
			ft.depth=vf.vertex_position.z/vf.vertex_position.w;
			ft.color=vec4(tag_info.edge_normal_color.rgb,1.0);
			if(   (system_info.pickup_component_id==tag_info.tag_component_id)
				&&(system_info.pickup_driver_id==tag_info.tag_driver_id)
				&&(system_info.pickup_body_id==tag_info.tag_body_id))
			{
				ft.color=vec4(tag_info.edge_pickup_color.rgb,1.0);
			}
			break;
		}
	case 2:
		{
			ft.depth=vf.vertex_position.z/vf.vertex_position.w;
			ft.color=vec4(tag_info.point_normal_color.rgb,1.0);
			if(   (system_info.pickup_component_id==tag_info.tag_component_id)
				&&(system_info.pickup_driver_id==tag_info.tag_driver_id)
				&&(system_info.pickup_body_id==tag_info.tag_body_id))
			{
				ft.color=vec4(tag_info.point_pickup_color.rgb,1.0);
			}
			break;
		}
	}
	return ft;
}
