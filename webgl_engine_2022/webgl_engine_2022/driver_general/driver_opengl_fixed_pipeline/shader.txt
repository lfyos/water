struct vertex_to_fragment_struct
{
	@builtin(position)	vertex_position		:	vec4<f32>,	
	@location(0)		vertex_id_0			:	vec4<f32>,
	@location(1)		vertex_id_1			:	vec4<f32>,
	@location(2)		vertex_value		:	vec4<f32>,
	
	@location(3)		vertex_material		:	vec4<f32>
};

struct fragment_id_target_struct
{
	@location(0) 	id_0	:	vec4<i32>,
	@location(1) 	id_1	:	vec4<i32>
};

@vertex
fn vertex_main(
		@location(0) my_coord		:	vec4<f32>,
		@location(1) my_normal		:	vec4<f32>,
		@location(2) my_material	:	vec4<f32>,
		@location(3) my_id			:	vec4<f32>,
		@location(4) my_texture		:	vec4<f32>
	)->vertex_to_fragment_struct
{
	var vf:vertex_to_fragment_struct;
	
	vf.vertex_position	=target_info.projection_matrix*(id_info.matrix*my_coord);
	
	vf.vertex_id_0	=vec4<f32>(f32(id_info.component_system_id),my_id.x,my_id.y,0.0);
	vf.vertex_id_1	=vec4<f32>(-1.0,-1.0,my_id.z,my_id.w);
	vf.vertex_value	=vec4<f32>(5.5,6.6,7.7,vf.vertex_position.z/vf.vertex_position.w);
	
	vf.vertex_material=vec4(my_material.rgb/2.0,1.0);
	
	return vf;
}

@fragment
fn fragment_id_fun(vf:vertex_to_fragment_struct) -> fragment_id_target_struct
{
	var ret_val	:	fragment_id_target_struct;
	
	ret_val.id_0=vec4(i32(vf.vertex_id_0.x),i32(vf.vertex_id_0.y),i32(vf.vertex_id_0.z),i32(vf.vertex_id_0.w));
	ret_val.id_1=vec4(i32(vf.vertex_id_1.x),i32(vf.vertex_id_1.y),i32(vf.vertex_id_1.z),i32(vf.vertex_id_1.w));
	
	return ret_val;
}

@fragment
fn fragment_value_fun(vf:vertex_to_fragment_struct) ->@location(0) vec4<f32>
{
	return vf.vertex_value;
}

@fragment
fn fragment_render_fun(vf:vertex_to_fragment_struct) ->@location(0) vec4<f32>
{
	return vf.vertex_material;
}
