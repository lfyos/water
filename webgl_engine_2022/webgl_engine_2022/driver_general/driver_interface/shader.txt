struct vertex_to_fragment_struct
{
	@builtin(position)	vertex_position		:	vec4<f32>,
	@location(1)		vertex_texture		:	vec4<f32>
};
struct id_target_struct
{
	@location(0) 		id_0	:	vec4<i32>,
	@location(1) 		id_1	:	vec4<i32>
};

struct interface_parameter
{
	texture_x0		:	f32,
	texture_y0		:	f32,
	texture_dx		:	f32,
	texture_dy		:	f32,
	
	depth			:	f32,
	
	high_light_x0	:	f32,
	high_light_y0	:	f32,
	high_light_x1	:	f32,
	high_light_y1	:	f32
};

@group(1) @binding(0) var <uniform>par			:	interface_parameter;
@group(1) @binding(1) var interface_texture		:	texture_2d<f32>;
@group(1) @binding(2) var interface_sampler		:	sampler;

@vertex
fn vertex_main(
		@location(0) my_coord		:	vec4<f32>,
		@location(1) my_texture		:	vec4<f32>
	)->vertex_to_fragment_struct
{
	var vf:vertex_to_fragment_struct;
	
	vf.vertex_position	=vec4(
		par.texture_x0+my_coord.x*par.texture_dx,
		par.texture_y0+my_coord.y*par.texture_dy,
		par.depth,1.0);
	if(method_info.method_id==0){
		vf.vertex_position=system_info.main_target_negative_screen_move_matrix*vf.vertex_position;
		vf.vertex_position=target_info.screen_move_matrix*vf.vertex_position;
		vf.vertex_position=vec4<f32>(vf.vertex_position.xy/vf.vertex_position.w,par.depth,1.0);
	}
	vf.vertex_texture=my_texture;
	return vf;
}

@fragment
fn fragment_id_fun(vf	:	vertex_to_fragment_struct)	->	id_target_struct
{
	var ret_val	:	id_target_struct;
	ret_val.id_0=vec4<i32>(
		id_info.component_system_id,
		i32(vf.vertex_texture.x*1000.0*1000.0),
		i32(vf.vertex_texture.y*1000.0*1000.0),
		0);
	ret_val.id_1=vec4<i32>(-1,-1,0,0);
	
	return ret_val;
}

@fragment
fn fragment_color_fun(vf	:	vertex_to_fragment_struct) ->@location(0) vec4<f32>
{
	if(	  (system_info.millisecond<500)
		&&(vf.vertex_texture.x>=par.high_light_x0)
		&&(vf.vertex_texture.x<=par.high_light_x1)
		&&(vf.vertex_texture.y>=par.high_light_y0)
		&&(vf.vertex_texture.y<=par.high_light_y1))
	{
		discard;
	}
	return textureSample(interface_texture,interface_sampler,vf.vertex_texture.xy);
}
