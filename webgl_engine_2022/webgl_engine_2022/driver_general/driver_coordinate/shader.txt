struct to_vertex_struct
{
	@location(0) vertex_position	:	vec4<f32>,
	@location(1) vertex_color		:	vec4<f32>,
	@location(2) vertex_length		:	f32
};

struct vertex_to_fragment_struct
{
	@location(0)		vertex_color	:	vec4<f32>,
	@builtin(position)	vertex_position	:	vec4<f32>				
};

struct from_fragment_struct
{
	@location(0) fragment_color		:	vec4<f32>
};


@vertex
fn vertex_main(tvs	:	to_vertex_struct)	->vertex_to_fragment_struct
{
	var vtfs	:	vertex_to_fragment_struct;

	vtfs.vertex_color		=tvs.vertex_color;
	
	vtfs.vertex_position	=tvs.vertex_position*tvs.vertex_length;
	vtfs.vertex_position[3]	=1.0;
	vtfs.vertex_position	=location_info.matrix*vtfs.vertex_position;
	vtfs.vertex_position	=target_info.projection_matrix*vtfs.vertex_position;
	
	return vtfs;
}


@fragment
fn fragment_main(vtfs	:	vertex_to_fragment_struct) -> from_fragment_struct
{
	var ffs	:	from_fragment_struct;
	
	ffs.fragment_color=vtfs.vertex_color;
	
	return 	ffs;
}
