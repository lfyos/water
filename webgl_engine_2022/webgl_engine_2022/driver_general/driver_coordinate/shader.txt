struct inout_struct
{
	@location(0)		color		:	vec4<f32>,
	@builtin(position)	position	:	vec4<f32>
};

struct target_struct
{
//	@builtin(frag_depth)	depth	:	f32,
	@location(0) 			color	:	vec4<f32>
};

@vertex
fn vertex_main(
		@location(0) my_position	:	vec4<f32>,
		@location(1) my_normal		:	vec4<f32>,
		@location(2) my_material	:	vec4<f32>,
		@location(3) my_id			:	vec4<f32>
	)->inout_struct
{	
	var p0=location_info.matrix*vec4<f32>(0.0,0.0,0.0,1.0);
	p0=p0/p0[3];
	p0[3]=0.5;
	
	var pp=target_info.right_up_far_point-target_info.left_down_near_point;
	pp=my_position*length(pp);
	pp[3]=0.5;

	var io:inout_struct;
	io.color=my_material;	
	io.position	=target_info.projection_matrix*(p0+pp);

	return io;
}

@fragment
fn fragment_main(io:inout_struct) -> target_struct
{	
	var t:target_struct;
	
	t.color=io.color;

	return t;
}
