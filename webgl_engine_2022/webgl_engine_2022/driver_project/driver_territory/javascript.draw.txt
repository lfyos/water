[
	[
		"vertex_location",
		"vertex_normal",
		"vertex_material",
		"",
		"vertex_texture"
	]
],

function (	method_id,				parameter_channel_id,	render_id,		part_id,			render_buffer_id,
			component_data_array,	project_matrix,			view_port,		do_render_number,	render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var shader_data						=shader_object.shader_data;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;

	if(do_render_number.engine_render==0){
		shader_program.sampler=gl.createSampler();
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MAG_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MIN_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_S,		gl.MIRRORED_REPEAT);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_T,		gl.MIRRORED_REPEAT);
		
		gl.uniformBlockBinding(shader_program,gl.getUniformBlockIndex(shader_program,"material_information"),0);
	
		gl.uniform1i(gl.getUniformLocation(shader_program,	"grass"),		0);
		gl.uniform1i(gl.getUniformLocation(shader_program,	"earth"),		1);
		gl.uniform1i(gl.getUniformLocation(shader_program,	"bottom"),		2);
		gl.uniform1i(gl.getUniformLocation(shader_program,	"stone"),		3);
		gl.uniform1i(gl.getUniformLocation(shader_program,	"cobble"),		4);
		gl.uniform1i(gl.getUniformLocation(shader_program,	"sandstone"),	5);
	}

	part_buffer_object=part_buffer_object.face;
		
	if(do_render_number.engine_part==0){
		part_buffer_object.grass	=utility.load_server_part_image(render_id,part_id,[["file","grass.jpg"    ]]);
		part_buffer_object.earth	=utility.load_server_part_image(render_id,part_id,[["file","earth.jpg"    ]]);
		part_buffer_object.bottom	=utility.load_server_part_image(render_id,part_id,[["file","bottom.jpg"    ]]);
		part_buffer_object.stone	=utility.load_server_part_image(render_id,part_id,[["file","stone.jpg"    ]]);
		part_buffer_object.cobble	=utility.load_server_part_image(render_id,part_id,[["file","cobble.jpg"   ]]);
		part_buffer_object.sandstone=utility.load_server_part_image(render_id,part_id,[["file","sandstone.jpg"]]);
		
		part_buffer_object.uniform_block_buffer_object=gl.createBuffer();
		gl.bindBuffer(gl.UNIFORM_BUFFER,part_buffer_object.uniform_block_buffer_object);
		gl.bufferData(gl.UNIFORM_BUFFER,new Float32Array(part_material),gl.STATIC_DRAW);
	}
	
	if(method_id!=0)
		return;
	
	var texture_object=[
			part_buffer_object.grass,
			part_buffer_object.earth,
			part_buffer_object.bottom,
			part_buffer_object.stone,
			part_buffer_object.cobble,
			part_buffer_object.sandstone
	];	
	
	for(var i=0,ni=texture_object.length;i<ni;i++){
		gl.activeTexture(gl.TEXTURE0+i);
		gl.bindTexture(gl.TEXTURE_2D,texture_object[i]);	
		gl.bindSampler(i,shader_program.sampler);
	}
	
	gl.bindBufferBase(gl.UNIFORM_BUFFER,0,part_buffer_object.uniform_block_buffer_object);

	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id=component_data_array[i];
		
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
			
		var component_id=data_buffer[buffer_id][0];
		
		component_location.get_component_location(component_id);
	
		for(var j=0,nj=part_buffer_object.region_data.length;j<nj;j++){
			var p=part_buffer_object.region_data[j];
			gl.bindVertexArray(p.vertex_array_object[0]);
			gl.drawArrays(gl.TRIANGLES,0,p.item_number);
		}
		gl.bindVertexArray(null);
	 }
}
