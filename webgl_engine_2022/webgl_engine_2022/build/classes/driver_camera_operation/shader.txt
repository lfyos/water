override primitive_type	: i32;

override depth_start	: f32;
override depth_end		: f32;

struct vertex_to_fragment_struct
{
	@builtin(position)	vertex_position		:	vec4<f32>,
	@location(1)		vertex_id			:	vec4<f32>
};

struct id_target_struct
{
	@location(0) 			id_0	:	vec4<i32>,
	@location(1) 			id_1	:	vec4<i32>
};

struct color_target_struct
{
	@builtin(frag_depth)	depth	:	f32,
	@location(0) 			color	:	vec4<f32>
};

@vertex
fn vertex_main(
		@location(0) my_coord		:	vec4<f32>,
		@location(1) my_id			:	vec4<f32>,
		@location(2) my_position	:	vec4<f32>
	)->vertex_to_fragment_struct
{
	var p=target_info.camera_location*vec4(0.0,0.0,0.0,1.0);
	p=target_info.projection_matrix*vec4(p.xyz/p.w+my_coord.xyz*my_position.w,1.0);
	
	var p0=target_info.projection_matrix*(target_info.camera_location*vec4(0.0,	0.0,	 my_position.z/2.0,	1.0));
	var p1=target_info.projection_matrix*(target_info.camera_location*vec4(0.0,	0.0,	-my_position.z/2.0,	1.0));

	if(primitive_type==0){
		p =system_info.main_target_screen_move_matrix*(target_info.negative_screen_move_matrix*p );
		p0=system_info.main_target_screen_move_matrix*(target_info.negative_screen_move_matrix*p0);
		p1=system_info.main_target_screen_move_matrix*(target_info.negative_screen_move_matrix*p1);
	}
	
	p.z=depth_start+(depth_end-depth_start)*(p.z/p.w-p0.z/p0.w)/(p1.z/p1.w-p0.z/p0.w);
	p=vec4(p.xy/p.w+my_position.xy,p.z,1.0);

	if(primitive_type==0){
		p=target_info.screen_move_matrix*(system_info.main_target_negative_screen_move_matrix*p);
	}

	var vf:vertex_to_fragment_struct;
	
	vf.vertex_id=my_id;
	vf.vertex_position=p;
	
	return vf;
};

@fragment
fn fragment_id_fun(vf:vertex_to_fragment_struct) -> id_target_struct
{
	var ret_val	:	id_target_struct;
	ret_val.id_0=vec4(id_info.component_system_id,i32(vf.vertex_id.x),i32(vf.vertex_id.y),0);
	ret_val.id_1=vec4(-1,-1,i32(vf.vertex_id.z),i32(vf.vertex_id.w));
	
	return ret_val;
}

@fragment
fn fragment_face_fun(vf:vertex_to_fragment_struct) -> color_target_struct
{
	var cts:color_target_struct;
	
	cts.color=vec4<f32>(0.25,0.25,0.25,1.0);
	cts.depth=vf.vertex_position.z;
	
	return cts;
}
@fragment
fn fragment_edge_fun(vf:vertex_to_fragment_struct) -> color_target_struct
{
	var cts:color_target_struct;
	
	cts.color=vec4<f32>(0.0,1.0,0.0,1.0);
	cts.depth=vf.vertex_position.z-0.001;
	
	if(system_info.pickup_component_id==id_info.component_id){
		if(system_info.pickup_driver_id==id_info.driver_id){
			if(system_info.pickup_body_id==i32(vf.vertex_id.x)){
				if(system_info.pickup_face_id==i32(vf.vertex_id.y)){
					cts.color=vec4<f32>(1.0,0.0,0.0,1.0);
					cts.depth=0.0;
				}
			}
		}
	}
	return cts;
}
@fragment
fn fragment_point_fun(vf:vertex_to_fragment_struct) ->color_target_struct
{
	var cts:color_target_struct;
	
	cts.color=vec4<f32>(1.0,0.0,0.0,1.0);
	cts.depth=0.0;
	
	if(system_info.pickup_component_id==id_info.component_id){
		if(system_info.pickup_driver_id==id_info.driver_id){
			if(system_info.pickup_body_id==i32(vf.vertex_id.x)){
				if(system_info.pickup_face_id==i32(vf.vertex_id.y)){
					return cts;
				}
			}
		}
	}
	discard;
	return cts;
}
