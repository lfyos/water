struct tag_information 
{
	tag_component_id		:	i32,
	tag_driver_id			:	i32,
	tag_body_id				:	i32,
	tag_system_id			:	i32,

	face_normal_color		:	vec4<f32>,
	face_pickup_color		:	vec4<f32>,
				
	edge_normal_color		:	vec4<f32>,
	edge_pickup_color		:	vec4<f32>,			
				
	point_normal_color		:	vec4<f32>,
	point_pickup_color		:	vec4<f32>,
	
	tag_p0					:	vec4<f32>,
	tag_dx					:	vec4<f32>,
	tag_dy					:	vec4<f32>,
	
	width_pixel_number		:	f32,
	height_pixel_number		:	f32,
	height_adjust			:	f32,
	
	point_size				:	f32,
	depth_proportion		:	f32,
	tmp_1					:	f32,
	tmp_2					:	f32,
	tmp_3					:	f32
};

@group(1) @binding(0) var <uniform> tag_info	:	tag_information;
@group(1) @binding(1) var 			tag_texture	:	texture_2d<f32>;
@group(1) @binding(2) var 			tag_sampler	:	sampler;

override primitive_type							:	i32;

struct vertex_to_fragment_struct
{
		@builtin(position)	vertex_position		:	vec4<f32>,
		
		@location(0)		vertex_location		:	vec4<f32>,
		
		@location(1)		vertex_id			:	vec4<f32>,
		@location(2)		vertex_texture		:	vec4<f32>
};

struct id_target_struct
{
		@builtin(frag_depth)		depth		:	f32,
		@location(0) 				id_0		:	vec4<i32>,
		@location(1) 				id_1		:	vec4<i32>
};
struct color_target_struct
{
	@builtin(frag_depth)	depth	:	f32,
	@location(0) 			color	:	vec4<f32>
};

@vertex
fn vertex_main(
		@location(0) 			my_coord		:	vec4<f32>,
		@location(1) 			my_id			:	vec4<f32>,
		@location(2) 			my_texture		:	vec4<f32>,
		@builtin(vertex_index)	my_vertex_index	:	u32
	)->vertex_to_fragment_struct
{
	var vf:vertex_to_fragment_struct;
	
	vf.vertex_id=my_id;
	
	if(dot(target_info.to_right_direction.xyz,tag_info.tag_dx.xyz)>0.0){
		if(dot(target_info.to_up_direction.xyz,tag_info.tag_dy.xyz)<0.0){
			vf.vertex_texture	=vec4(my_texture.x,    my_texture.y,my_texture.zw);
		}else{
			vf.vertex_texture	=vec4(my_texture.x,1.0-my_texture.y,my_texture.zw);
		}
	}else{
		if(dot(target_info.to_up_direction.xyz,tag_info.tag_dy.xyz)<0.0){
			vf.vertex_texture	=vec4(1.0-my_texture.x,    my_texture.y,my_texture.zw);
		}else{
			vf.vertex_texture	=vec4(1.0-my_texture.x,1.0-my_texture.y,my_texture.zw);
		}
	}

	switch(primitive_type){
	default:	//0:face for selection,1:face for display
		{
			var width_height		:	vec4<f32>;
			var projection_matrix	:	mat4x4<f32>;

			if(primitive_type==1){
				width_height=vec4(
					f32(target_info.target_view_width),
					f32(target_info.target_view_height),
					0.0,0.0);
				projection_matrix=target_info.projection_matrix;
			}else{
				width_height=vec4(
					f32(system_info.main_target_view_width),
					f32(system_info.main_target_view_height),
					0.0,0.0);
				projection_matrix=target_info.negative_screen_move_matrix*target_info.projection_matrix;				
				projection_matrix=system_info.main_target_screen_move_matrix*projection_matrix;
			}

			var x_unit=normalize(tag_info.tag_dx);
			var y_unit=normalize(tag_info.tag_dy);
			var p_origin=tag_info.tag_p0+0.5*tag_info.tag_dx+1.0*tag_info.tag_dy;
			
			var p0=projection_matrix*(p_origin);
			var px=projection_matrix*(p_origin+x_unit);
			var py=projection_matrix*(p_origin+y_unit);

			var x_scale=f32(tag_info.width_pixel_number) /length((px/px.w-p0/p0.w)*width_height);
			var y_scale=f32(tag_info.height_pixel_number)/length((py/py.w-p0/p0.w)*width_height);
			
			vf.vertex_location=p_origin+my_coord.x*x_scale*x_unit+(my_coord.y+tag_info.height_adjust)*y_scale*y_unit;
			vf.vertex_position=target_info.projection_matrix*vf.vertex_location;
			break;
		}
	case 2:	//edge display
		{
			vf.vertex_location=tag_info.tag_p0+my_coord.x*tag_info.tag_dx+my_coord.y*tag_info.tag_dy;
			vf.vertex_position=target_info.projection_matrix*vf.vertex_location;
			break;
		}
	case 3:	//point display
		{
			vf.vertex_location=tag_info.tag_p0+my_coord.x*tag_info.tag_dx+my_coord.y*tag_info.tag_dy;
			vf.vertex_position=target_info.projection_matrix*vf.vertex_location;
			
			vf.vertex_texture=point_texture_position[my_vertex_index%6];
			vf.vertex_position=(vf.vertex_position/vf.vertex_position.w)
				+(tag_info.point_size*vf.vertex_texture*vec4(
					1.0/f32(target_info.target_view_width),
					1.0/f32(target_info.target_view_height),
					0.0,0.0));
			break;
		}
	}
	return vf;
}


@fragment
fn fragment_face_id_fun(vf:vertex_to_fragment_struct) -> id_target_struct
{
	if(dot(target_info.clip_plane,vf.vertex_location)>0.0)
		{discard;}
		
	var its:id_target_struct;
	its.depth=vf.vertex_position.z*tag_info.depth_proportion;
	
	its.id_0=vec4(tag_info.tag_system_id,tag_info.tag_body_id,-1,0);
	its.id_1=vec4(-1,-1,0,0);
		
	return its;
}

@fragment
fn fragment_face_fun(vf:vertex_to_fragment_struct) ->  color_target_struct
{
	if(dot(target_info.clip_plane,vf.vertex_location)>0.0)
		{discard;}
		
	var ret_val:color_target_struct;
	
	ret_val.depth=vf.vertex_position.z*tag_info.depth_proportion;
	ret_val.color=tag_info.face_normal_color;
	
	var my_color=textureSample(tag_texture,tag_sampler,vf.vertex_texture.xy);
	if(dot(my_color.rgb,my_color.rgb)<0.75){
		discard;
	}
	if(   (system_info.pickup_component_id==tag_info.tag_component_id)
		&&(system_info.pickup_driver_id==tag_info.tag_driver_id)
		&&(system_info.pickup_body_id==tag_info.tag_body_id))
	{
			ret_val.color=tag_info.face_pickup_color;
	}
	return ret_val;
}

@fragment
fn fragment_edge_fun(vf:vertex_to_fragment_struct) -> color_target_struct
{
	if(dot(target_info.clip_plane,vf.vertex_location)>0.0)
		{discard;}
		
	var ret_val:color_target_struct;
	
	ret_val.depth=vf.vertex_position.z*tag_info.depth_proportion;
	ret_val.color=tag_info.edge_normal_color;
	
	if(   (system_info.pickup_component_id==tag_info.tag_component_id)
		&&(system_info.pickup_driver_id==tag_info.tag_driver_id)
		&&(system_info.pickup_body_id==tag_info.tag_body_id))
	{
		ret_val.color=tag_info.edge_pickup_color;
	}
	return ret_val;
}
@fragment
fn fragment_point_fun(vf:vertex_to_fragment_struct) -> color_target_struct
{
	if(dot(target_info.clip_plane,vf.vertex_location)>0.0)
		{discard;}
		
	var ret_val:color_target_struct;
	ret_val.depth=vf.vertex_position.z*tag_info.depth_proportion;
	if(dot(vf.vertex_texture,vf.vertex_texture)>1.0){
		discard;
	}
	ret_val.color=tag_info.point_normal_color;
	if(   (system_info.pickup_component_id==tag_info.tag_component_id)
		&&(system_info.pickup_driver_id==tag_info.tag_driver_id)
		&&(system_info.pickup_body_id==tag_info.tag_body_id))
	{
		ret_val.color=tag_info.point_pickup_color;
	}
	return ret_val;
}
