function(component_name,component_id,render)
{
	render.component_event_processor[component_id]={
		update_flag					:	false,
		active_list					:	function()
		{
			render.component_event_processor[component_id].update_flag=false;
			render.system_call_processor.set_menu_show(component_id,
				[["center","center"],["all_in_view","all_in_view"]]);
		},
		pickupmouseselect_routine		:	function(event,component_id,render)
		{
			var ep=render.component_event_processor[component_id];
			if(ep.instance_initialize_data==null)
				return;
			var function_id =ep.instance_initialize_data.canvas_height;
				function_id/=ep.instance_initialize_data.canvas_step;
			if((function_id=Math.floor((1.0-ep.y)*function_id))<1)
				return;

			var p=render.get_component_object_by_component_name("组件拼装拼装编辑组件");
			var edit_ep=render.component_event_processor[p.component_id];
			if(edit_ep.movement_data==null)
				return;

			switch(function_id-1){
			case 0:
				return;
			case  1:// 1.跳转拼装步骤
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","locate_camera"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case  2:// 2.拼装步骤删除
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","delete"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case 3://"3.改变拼装组件"
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","change_component"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});	
				return;		
			case  4:// 4.设置跟随组件
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","follow"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case  5:// 5.拼装步骤上移
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","up"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data,render)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case  6:// 6.拼装步骤下移
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","down"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case  7:// 7.解散下层拼装
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","fromchild"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case  8:// 8.存入拼装缓存
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","tobuffer"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case  9:// 9.提取拼装缓存
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","frombuffer"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case  10:// 10.修改拼装信息
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","get"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						var node_name		=prompt("请输入名称",		response_data.node_name); 
						var description		=prompt("请输入描述",		response_data.description); 
						var sound_file_name	=prompt("请输入配音文件名",	response_data.sound_file_name); 
						var recursive_flag	=false;
							
						var par=[["operation","design"],["move_method","update"],
								 ["id",edit_ep.movement_data.movement_tree_id]];
						if((node_name!=null)&&(node_name!=""))
							par.push(["node_name",		encodeURIComponent(encodeURIComponent(node_name))]);
						if((sound_file_name!=null)&&(sound_file_name!="")){
							par.push(["sound_file_name",encodeURIComponent(encodeURIComponent(sound_file_name))]);
							recursive_flag=true;
						}
						if((description!=null)&&(description!="")){
							par.push(["description",	encodeURIComponent(encodeURIComponent(description))]);
							recursive_flag=true;
						}
						if(recursive_flag)
							recursive_flag=confirm("修改孩子结点的描述信息及recursive_flag配音吗?");
						par.push(["recursive",recursive_flag?"true":"false"]);
						
						render.call_server_component(
									"movement_manager","all",par).
						then(
							function(response_data)
							{
								ep.update_flag=false;
								edit_ep.update_flag=false;
								edit_ep.movement_data=response_data;
							});
					});
				return;
			case 11://11.上传拼装配音
				if(edit_ep.movement_data.children.length<=0)
					window.open(
						render.create_component_request_string("movement_manager","all",[["operation","design"],
							["move_method","upload_audio_webpage"],["id",edit_ep.movement_data.movement_tree_id],
							["change_name",encodeURIComponent(encodeURIComponent("upload_file%2Bchinese:上传拼装配音"))]]),
					"_blank");
				return;
			case 12://12.打开拼装配音
				window.open(
					render.create_component_request_string("movement_manager","all",
							[["operation","design"],["move_method","download_audio"],
							 ["id",edit_ep.movement_data.movement_tree_id]]),
					"_blank");
				return;
			case 13://13.放入右键缓存
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","todesignbuffer"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						alert(response_data);
					});
				return;
			case 14://14.选择拼装组件
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","collector"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						var list_id;
						if((list_id=response_data)<0)
							return;
						if(event.ctrlKey)
							render.call_server_component("manipulator_component","all",
								[["event_method",	"part_list"],["operation",	"selection"],
								 ["selection",		"select"],	 ["list_id",	list_id]]).
							then(
								function()
								{
									render.call_server_component("manipulator_component","all",
										[["event_method","part_list"],["operation","delete"],["list_id",list_id]]);
								
								});
						else if(event.shiftKey)
							render.call_server_component("manipulator_component","all",
								[["event_method",	"part_list"],["operation",	"selection"],
								 ["selection",		"unselect"],	 ["list_id",	list_id]]).
							then(
								function()
								{
									render.call_server_component("manipulator_component","all",
										[["event_method","part_list"],["operation","delete"],["list_id",list_id]]);
								
								});
						else
							render.call_server_component("manipulator_component","all",
								[["event_method",	"part_list"],["operation",	"selection"],
								 ["selection",		"swap"],	 ["list_id",	list_id]]).
							then(
								function()
								{
									render.call_server_component("manipulator_component","all",
										[["event_method","part_list"],["operation","delete"],["list_id",list_id]]);
								
								});
					});
				return;
			case 15://"15.倒排拼装步骤"
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","reverse"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case 16://(ep.movement_data.direction.length<=0)?"16.指定拼装视角":"16.删除拼装视角"
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","view_direction"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case 17://ep.movement_data.sequence_flag?"17.设置同步拼装":"17.设置顺序拼装",
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method",edit_ep.movement_data.sequence_flag?"synchronization":"sequence"],
					["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case 18://(ep.movement_data.scale_type==0)?"18.设置起点观测":
					//(ep.movement_data.scale_type==1)?"18.设置终点观测":
					//(ep.movement_data.scale_type==2)?"18.设置起点终点观测":"18.设置上层观测"
				
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","view_box"],["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case 19://"19.需要选择杆件":"19.不需选择杆件"
				var str;
				if(edit_ep.movement_data.children.length>0)
					str=confirm("清除杆件选择/设置杆件选择")?"clear":"set";
				else{
					str="set";
					for(var i=0,ni=edit_ep.movement_data.match.length;i<ni;i++)
						switch(edit_ep.movement_data.match[i].match_type){
						case "component_part_selection":
							str="clear";
							break;
						}
				}
				render.call_server_component("movement_manager","all",
					[["operation","design"],["component_part_selection",str],["restore","true"],
					 ["move_method","component_part_selection"],
					 ["id",edit_ep.movement_data.movement_tree_id]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case 20://"20.需要表面配合":"20.不需表面配合"
				var par=[["component_face_match","clear"]];
				
				if(ep.movement_data.children.length<=0)
					if(confirm("增加表面配合(OK)/删除表面配合(Cancel)")){
						if(render.pickup_array[0].component_id<0)
							return;
						if(render.pickup_array[0].body_id<0)
							return;
						if(render.pickup_array[0].face_id<0)
							return;
						if(render.pickup_array[1].component_id<0)
							return;
						if(render.pickup_array[1].body_id<0)
							return;
						if(render.pickup_array[1].face_id<0)
							return;
						par=[["component_face_match",		"add"],	
							 ["source_component_id",		render.pickup_array[0].component_id],
							 ["source_body_id",				render.pickup_array[0].body_id],
							 ["source_face_id",				render.pickup_array[0].face_id],
							 ["destatination_component_id",	render.pickup_array[1].component_id],
							 ["destatination_body_id",		render.pickup_array[1].body_id],
							 ["destatination_face_id",		render.pickup_array[1].face_id]];
					}
				render.call_server_component("movement_manager","all",
					par.concat([["operation","design"],["move_method","component_face_match"],
								["restore","true"],["id",edit_ep.movement_data.movement_tree_id]])).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case 21://"21.调整拼装所需时间",
				var mew_time_length; 
				if((mew_time_length=prompt("输入新的拼装时间：毫秒"))==null)
					return;
				if((mew_time_length=mew_time_length.trim())=="")
					return;
				mew_time_length=parseFloat(mew_time_length);					
				if(isNaN(mew_time_length))
					return;

				mew_time_length*=1000000;
					
				var modify_type=confirm("单步时间/所有时间"),scale_value;	
				var switch_camera_time_length=edit_ep.movement_data.time_length-edit_ep.movement_data.mount_only_time_length;
					
				if(modify_type)
					scale_value=1.0;
				else if(mew_time_length<=switch_camera_time_length){
					alert("您输入的拼装时间太短，不足以切换相机！");
					return;
				}else
					scale_value=(mew_time_length-switch_camera_time_length)/edit_ep.movement_data.mount_only_time_length;

				render.call_server_component("movement_manager","all",[["operation","design"],
					 ["move_method","modify_time_length"],["id",edit_ep.movement_data.movement_tree_id],
					 ["modify_type",modify_type?"true":"false"],["time_length",mew_time_length],["scale",scale_value]]).
				then(
					function(response_data)
					{
						ep.update_flag=false;
						edit_ep.update_flag=false;
						edit_ep.movement_data=response_data;
					});
				return;
			case 22://"22.当前拼装Jason数据"
				window.open(
					render.create_component_request_string("movement_manager","all",
						[["operation","design"],["move_method","edit_jason"],
						 ["id",edit_ep.movement_data.movement_tree_id]]),
					"_blank");
				return;
			default:
				return;
			}
		},
		pickupmouseselect		:	function(event,component_id,render)
		{
			render.system_call_processor.set_menu_hide(component_id);
			
			render.call_server_component("movement_manager","all",
				[["operation","movement"],["move_method","stop"]]).
			then(
				function(response_data)
				{
					var ep=render.component_event_processor[component_id];
					ep.pickupmouseselect_routine(event,component_id,render);
				});
		},
		update_canvas_texture	:	function(render_id,part_id,buffer_id,
			component_id,driver_id,instance_initialize_data,part_material,shader_data,render)
		{
			var ep=render.component_event_processor[component_id];
			if(ep.update_flag)
				return false;
			ep.update_flag=true;

			ep.instance_initialize_data			=instance_initialize_data;
			
			render.text_canvas.width			=ep.instance_initialize_data.canvas_width;
			render.text_canvas.height			=ep.instance_initialize_data.canvas_height;
		
			render.text_2dcontext.fillStyle		=ep.instance_initialize_data.backgroundStyle;
			render.text_2dcontext.fillRect(0,0,render.text_canvas.width,render.text_canvas.height);

			render.text_2dcontext.font			=ep.instance_initialize_data.font;
			render.text_2dcontext.textBaseline	=ep.instance_initialize_data.textBaseline;
			render.text_2dcontext.textAlign		=ep.instance_initialize_data.textAlign;
			
			
			var p=render.get_component_object_by_component_name("组件拼装拼装编辑组件");
			var edit_ep=render.component_event_processor[p.component_id];
			if(edit_ep.movement_data==null)
				return;
				
			var component_part_selection_number=0,component_face_match_number=0;
			for(var i=0,ni=edit_ep.movement_data.match.length;i<ni;i++)
				switch(edit_ep.movement_data.match[i].match_type){
				case "component_part_selection":
					component_part_selection_number++;
					break;
				case "component_face_match":
					component_face_match_number++;
					break;
				}	
			var str_array=[
				"	拼装ID:"+(edit_ep.movement_data.movement_tree_id)
					+",缓冲:"+(edit_ep.movement_data.buffer_number),
				
				" 1.跳转拼装步骤",	" 2.拼装步骤删除",	" 3.改变拼装组件",	" 4.设置跟随组件",
				" 5.拼装步骤上移",	" 6.拼装步骤下移",	" 7.解散下层拼装",	" 8.存入拼装缓存",
				" 9.提取拼装缓存",	"10.修改拼装信息",	
				(edit_ep.movement_data.children.length>0)?"11.不能上传配音":"11.上传拼装配音",
				"12.打开拼装配音",	"13.放入右键缓存",	"14.选中拼装组件",	"15.倒排拼装步骤",
										
				(edit_ep.movement_data.direction.length<=0)?"16.指定拼装视角":"16.删除拼装视角",	
										
				edit_ep.movement_data.sequence_flag?	"17.设置同步拼装":"17.设置顺序拼装",
										
				(edit_ep.movement_data.scale_type==0)?"18.设置起点观测":
				(edit_ep.movement_data.scale_type==1)?"18.设置终点观测":
				(edit_ep.movement_data.scale_type==2)?"18.设置起点终点观测":"18.设置上层观测",
									
				(edit_ep.movement_data.children.length>0)?"19.非叶结点选择杆件操作":
				(component_part_selection_number<=0)?"19.叶子结点不需选择杆件":"19.叶子结点需要选择杆件",
										
				(edit_ep.movement_data.children.length>0)?"20.非叶结点清除所有表面配合":
				(component_face_match_number<=0)	?"20.叶子结点不需表面配合":
				("20.叶子结点需要表面配合("+component_face_match_number.toString()+")"),
									
				"21.拼装时间:"+Math.round(edit_ep.movement_data.mount_only_time_length/1000000)
							+"/"+Math.round(edit_ep.movement_data.time_length/1000000),
				"22.拼装Jason数据"
			];
					
			render.text_2dcontext.fillStyle=edit_ep.movement_data.current_movement_flag
				?(ep.instance_initialize_data.current_fillStyle):(ep.instance_initialize_data.fillStyle);
			for(var i=0,ni=str_array.length;i<ni;i++)
				render.text_2dcontext.fillText("    "+str_array[i],0,ep.instance_initialize_data.canvas_step*(i+1));
				
			return true;
		}
	}
}
