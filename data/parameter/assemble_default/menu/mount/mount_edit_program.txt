function(component_name,component_id,render)
{
	render.component_event_processor[component_id]={
		update_flag					:	false,
		type_flag					:	true,
		travel_operate_flag			:	true,
		movement_data				:	null,
		instance_initialize_data	:	null,
		
		active_list					:	function(my_type_flag)
		{
			render.call_server_component("movement_manager","all",
				[["operation","movement"],["move_method","stop"]],
				function(response_data,render)
				{
					render.call_server_component("movement_manager","all",
						[["operation","design"],["move_method","edit_jason"]],
						function(response_data,render)
						{
							var ep=render.component_event_processor[component_id];
							ep.id_base					=0;
							ep.type_flag				=my_type_flag;
							ep.travel_operate_flag		=true;
							ep.update_flag				=false;
							ep.movement_data			=response_data;
							render.system_call_processor.set_menu_show(
								component_id,[["operation","show"],["center","center"]]);
						});
				});
		},

		pickupmouseselect_routine		:	function(event,component_id,render)
		{
			var ep=render.component_event_processor[component_id];
			if((ep.movement_data==null)||(ep.instance_initialize_data==null))
				return;

			var function_id =ep.instance_initialize_data.canvas_height;
				function_id/=ep.instance_initialize_data.canvas_step;
			if((function_id=Math.floor((1.0-ep.y)*Math.round(function_id)))<0)
				return;
			switch(function_id){
			case 0:
				if(typeof(ep.movement_data.parent)=="object")
					render.call_server_component("movement_manager","all",
						[	["operation","design"],["move_method","edit_jason"],
							["id",ep.movement_data.parent.movement_tree_id]],
						function(response_data,render)
						{
							ep.movement_data=response_data;
							ep.update_flag=false;
							ep.id_base=0;
						});
				return;
			case 1:
				ep.id_base=0;
				ep.travel_operate_flag^=true; 
				ep.update_flag=false;
				return;
			}
			
			if(ep.travel_operate_flag){
				var index_id=ep.id_base+function_id-2;
				if((index_id>=0)&&(index_id<ep.movement_data.children.length))
					render.call_server_component("movement_manager","all",
						[	["operation","design"],["move_method","edit_jason"],
							["id",ep.movement_data.children[index_id].movement_tree_id]],
						function(response_data,render)
						{
							ep.movement_data=response_data;
							ep.update_flag=false;
							ep.id_base=0;
						});
				return;
			}

			switch(function_id){
			case  3:// 1.跳转拼装步骤
				render.call_server_component("movement_manager","all",[["operation","design"],
					["move_method","locate_camera"],["id",ep.movement_data.movement_tree_id]],
					function(response_data,render)
					{
						ep.travel_operate_flag=true;
						ep.update_flag=false;
						ep.movement_data=response_data;
					});
				return;
			case  4:// 2.拼装步骤删除
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","delete"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							ep.travel_operate_flag=true;
							ep.update_flag=false;
							ep.movement_data=response_data;
						});
				else
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","collector"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							if(response_data)
								return;
							if(event.ctrlKey)
								render.system_call_processor.collector_list_select_component(-1,-1,-1);
							else if(event.shiftKey)
								render.system_call_processor.collector_list_unselect_component(-1,-1,-1);
							else
								render.system_call_processor.collector_list_swap_component(-1,-1,-1);
						});
				return;
			case  5:// 3.设置跟随组件
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","follow"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							ep.update_flag=false;
							ep.movement_data=response_data;
						});
				return;
			case  6:// 4.拼装步骤上移
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","up"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							ep.travel_operate_flag=true;
							ep.update_flag=false;
							ep.movement_data=response_data;
						});
				return;
			case  7:// 5.拼装步骤下移
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","down"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							ep.travel_operate_flag=true;
							ep.update_flag=false;
							ep.movement_data=response_data;
						});
				return;
			case  8:// 6.解散下层拼装
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","fromchild"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							ep.travel_operate_flag=true;
							ep.update_flag=false;
							ep.movement_data=response_data;
						});
				return;
			case  9:// 7.存入拼装缓存
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","tobuffer"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							ep.travel_operate_flag=true;
							ep.update_flag=false;
							ep.movement_data=response_data;
						});
				return;
			case  10:// 8.提取拼装缓存
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","frombuffer"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							ep.travel_operate_flag=true;
							ep.update_flag=false;
							ep.movement_data=response_data;
						});
				return;
			case  11:// 9.修改拼装信息
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","get"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							var node_name		=prompt("请输入名称",		response_data.node_name); 
							var description		=prompt("请输入描述",		response_data.description); 
							var sound_file_name	=prompt("请输入配音文件名",	response_data.sound_file_name); 
							var recursive_flag	=false;
							
							var par=[["operation","design"],["move_method","update"],["id",ep.movement_data.movement_tree_id]];
							if((node_name!=null)&&(node_name!=""))
								par.push(["node_name",		encodeURIComponent(encodeURIComponent(node_name))]);
							if((sound_file_name!=null)&&(sound_file_name!="")){
								par.push(["sound_file_name",encodeURIComponent(encodeURIComponent(sound_file_name))]);
								recursive_flag=true;
							}
							if((description!=null)&&(description!="")){
								par.push(["description",	encodeURIComponent(encodeURIComponent(description))]);
								recursive_flag=true;
							}
							if(recursive_flag)
								recursive_flag=confirm("修改孩子结点的描述信息及recursive_flag配音吗?");
							par.push(["recursive",recursive_flag?"true":"false"]);
							
							render.call_server_component("movement_manager","all",par,
								function(response_data,render)
								{
									ep.movement_data=response_data;
									ep.update_flag=false;
								});
						});
				return;
			case 12://10.上传拼装配音
				if(ep.type_flag&&(ep.movement_data.children.length<=0))
					window.open(
						render.create_component_request_string("movement_manager","all",[["operation","design"],
							["move_method","upload_audio_webpage"],["id",ep.movement_data.movement_tree_id],
							["change_name",encodeURIComponent(encodeURIComponent("upload_file%2Bchinese:上传拼装配音"))]]),
					"_blank");
				return;
			case 13://11.打开拼装配音
				if(ep.type_flag)
					window.open(
						render.create_component_request_string("movement_manager","all",
							[["operation","design"],["move_method","download_audio"],
							 ["id",ep.movement_data.movement_tree_id]]),
					"_blank");
				return;
			case 14://12.放入右键缓存
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","todesignbuffer"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							alert(response_data);
						});
				return;
			case 15://13.选择拼装组件
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","collector"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							if(response_data)
								return;
							if(event.ctrlKey)
								render.system_call_processor.collector_list_select_component(-1,-1,-1);
							else if(event.shiftKey)
								render.system_call_processor.collector_list_unselect_component(-1,-1,-1);
							else
								render.system_call_processor.collector_list_swap_component(-1,-1,-1);
						});
				return;
			case 16://"14.倒排拼装步骤"
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","reverse"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							ep.travel_operate_flag=true;
							ep.update_flag=false;
							ep.movement_data=response_data;
						});
				return;
			case 17://(ep.movement_data.direction.length<=0)?"15.指定拼装视角":"15.删除拼装视角"
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","view_direction"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							ep.update_flag=false;
							ep.movement_data=response_data;
						});
				return;
			case 18://ep.movement_data.sequence_flag?"16.设置同步拼装":"16.设置顺序拼装",
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method",ep.movement_data.sequence_flag?"synchronization":"sequence"],
						["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							ep.update_flag=false;
							ep.movement_data=response_data;
						});
				return;
			case 19://(ep.movement_data.scale_type==0)?"17.设置起点观测":
					//(ep.movement_data.scale_type==1)?"17.设置终点观测":
					//(ep.movement_data.scale_type==2)?"17.设置起点终点观测":"17.设置上层观测"
				if(ep.type_flag)
					render.call_server_component("movement_manager","all",[["operation","design"],
						["move_method","view_box"],["id",ep.movement_data.movement_tree_id]],
						function(response_data,render)
						{
							ep.update_flag=false;
							ep.movement_data=response_data;
						});
				return;
			case 20://"18.需要选择杆件":"18.不需选择杆件"
				if(!(ep.type_flag))
					return;
				var str;
				if(ep.movement_data.children.length>0)
					str=confirm("清除杆件选择/设置杆件选择")?"clear":"set";
				else{
					str="set";
					for(var i=0,ni=ep.movement_data.match.length;i<ni;i++)
						switch(ep.movement_data.match[i].match_type){
						case "component_part_selection":
							str="clear";
							break;
						}
				}
				render.call_server_component("movement_manager","all",
					[["operation","design"],["component_part_selection",str],["restore","true"],
					 ["move_method","component_part_selection"],["id",ep.movement_data.movement_tree_id]],
					function(response_data,render)
					{
						ep.update_flag=false;
						ep.movement_data=response_data;
						ep.travel_operate_flag=true;
					});
				return;
			case 21://"19.需要表面配合":"19.不需表面配合"
				if(!(ep.type_flag))
					return;
				var par=[["component_face_match","clear"]];
				
				if(ep.movement_data.children.length<=0)
					if(confirm("增加表面配合(OK)/删除表面配合(Cancel)")){
						if(render.pickup_array[0].component_id<0)
							return;
						if(render.pickup_array[0].body_id<0)
							return;
						if(render.pickup_array[0].face_id<0)
							return;
						if(render.pickup_array[1].component_id<0)
							return;
						if(render.pickup_array[1].body_id<0)
							return;
						if(render.pickup_array[1].face_id<0)
							return;
						par=[["component_face_match",		"add"],	
							 ["source_component_id",		render.pickup_array[0].component_id],
							 ["source_body_id",				render.pickup_array[0].body_id],
							 ["source_face_id",				render.pickup_array[0].face_id],
							 ["destatination_component_id",	render.pickup_array[1].component_id],
							 ["destatination_body_id",		render.pickup_array[1].body_id],
							 ["destatination_face_id",		render.pickup_array[1].face_id]];
					}
				render.call_server_component("movement_manager","all",
					par.concat([["operation","design"],["move_method","component_face_match"],
								["restore","true"],["id",ep.movement_data.movement_tree_id]]),
					function(response_data,render)
					{
						ep.update_flag=false;
						ep.movement_data=response_data;
						ep.travel_operate_flag=true;
					});
				return;
			case 22://"20.调整拼装所需时间",
				if(ep.type_flag){				
					var mew_time_length; 
					if((mew_time_length=prompt("输入新的拼装时间：毫秒"))==null)
						return;
					if((mew_time_length=mew_time_length.trim())=="")
						return;
					mew_time_length=parseFloat(mew_time_length);					
					if(isNaN(mew_time_length))
						return;
					mew_time_length*=1000000;
					
					var modify_type=confirm("单步时间/所有时间"),scale_value;	
					var switch_camera_time_length=ep.movement_data.time_length-ep.movement_data.mount_only_time_length;
					
					if(modify_type)
						scale_value=1.0;
					else if(mew_time_length<=switch_camera_time_length){
						alert("您输入的拼装时间太短，不足以切换相机！");
						return;
					}else
						scale_value=(mew_time_length-switch_camera_time_length)/ep.movement_data.mount_only_time_length;
								
					render.call_server_component("movement_manager","all",[["operation","design"],
						 ["move_method","modify_time_length"],["id",ep.movement_data.movement_tree_id],
						 ["modify_type",modify_type?"true":"false"],["time_length",mew_time_length],["scale",scale_value]],
						function(response_data,render)
						{
							ep.update_flag=false;
							ep.movement_data=response_data;
						});						
				}
				return;
			case 23://"21.当前拼装Jason数据"
				if(ep.type_flag)
					window.open(
						render.create_component_request_string("movement_manager","all",
							[["operation","design"],["move_method","edit_jason"],
							 ["id",ep.movement_data.movement_tree_id]]),
						"_blank");
				return;
			default:
				return;
			}
		},
		pickupmouseselect		:	function(event,component_id,render)
		{
			render.call_server_component("movement_manager","all",
				[["operation","movement"],["move_method","stop"]],
				function(response_data,render)
				{
					var ep=render.component_event_processor[component_id];
					ep.pickupmouseselect_routine(event,component_id,render);
				});
		},
		update_canvas_texture	:	function(render_id,part_id,buffer_id,
			component_id,driver_id,instance_initialize_data,part_material,shader_data,render)
		{
			var ep=render.component_event_processor[component_id];
			if(ep.update_flag)
				return false;
			ep.update_flag=true;

			ep.instance_initialize_data			=instance_initialize_data;
			
			render.text_canvas.width			=ep.instance_initialize_data.canvas_width;
			render.text_canvas.height			=ep.instance_initialize_data.canvas_height;
		
			render.text_2dcontext.fillStyle		=ep.instance_initialize_data.backgroundStyle;
			render.text_2dcontext.fillRect(0,0,render.text_canvas.width,render.text_canvas.height);

			render.text_2dcontext.font			=ep.instance_initialize_data.font;
			render.text_2dcontext.textBaseline	=ep.instance_initialize_data.textBaseline;
			render.text_2dcontext.textAlign		=ep.instance_initialize_data.textAlign;
			
			if(ep.movement_data==null)
				return true;
			var str,my_text_width,text_position;
			if(typeof(ep.movement_data.parent)!="undefined"){
				render.text_2dcontext.fillStyle=ep.movement_data.parent.current_movement_flag
					?(ep.instance_initialize_data.current_fillStyle):(ep.instance_initialize_data.fillStyle);
				my_text_width=render.text_2dcontext.measureText(ep.movement_data.parent.node_name).width;
				if((text_position=(render.text_canvas.width-my_text_width)/2.0)<0)
					text_position=0;
				render.text_2dcontext.fillText(ep.movement_data.parent.node_name,text_position,0);
			}
			
			render.text_2dcontext.fillStyle=ep.movement_data.current_movement_flag
				?(ep.instance_initialize_data.current_fillStyle):(ep.instance_initialize_data.fillStyle);
			str ="  "+ep.movement_data.node_name+(ep.type_flag?":[点击切换工作模式]":"");
			my_text_width=render.text_2dcontext.measureText(str).width;
			if((text_position=(render.text_canvas.width-my_text_width)/2.0)<0)
				text_position=0;
			render.text_2dcontext.fillText(str,text_position,ep.instance_initialize_data.canvas_step);
					
			if(ep.travel_operate_flag){
				render.text_2dcontext.fillStyle=ep.instance_initialize_data.current_fillStyle;
				for(var i=ep.id_base,j=2,ni=ep.movement_data.children.length,height;i<ni;i++,j++){
					if((height=ep.instance_initialize_data.canvas_step*j)>render.text_canvas.height)
						break;
					if(ep.movement_data.children[i].current_movement_flag)
						render.text_2dcontext.fillText("    "+(ep.movement_data.children[i].node_name),0,height);
				}
				render.text_2dcontext.fillStyle=ep.instance_initialize_data.fillStyle;
				for(var i=ep.id_base,j=2,ni=ep.movement_data.children.length,height;i<ni;i++,j++){
					if((height=ep.instance_initialize_data.canvas_step*j)>render.text_canvas.height)
						break;
					if(!(ep.movement_data.children[i].current_movement_flag))
						render.text_2dcontext.fillText("    "+(ep.movement_data.children[i].node_name),0,height);
				}
			}else{
				var str_array=[	" 1.跳转拼装步骤"," 2.选中拼装组件"];
				if(ep.type_flag){
					var component_part_selection_number=0,component_face_match_number=0;
					for(var i=0,ni=ep.movement_data.match.length;i<ni;i++)
						switch(ep.movement_data.match[i].match_type){
						case "component_part_selection":
							component_part_selection_number++;
							break;
						case "component_face_match":
							component_face_match_number++;
							break;
						}
					str_array=[	" 1.跳转拼装步骤",	" 2.拼装步骤删除",	" 3.设置跟随组件",	" 4.拼装步骤上移",	" 5.拼装步骤下移",
								" 6.解散下层拼装",	" 7.存入拼装缓存",	" 8.提取拼装缓存",	" 9.修改拼装信息",	
								(ep.movement_data.children.length>0)?"10.不能上传配音":"10.上传拼装配音",
								"11.打开拼装配音",	"12.放入右键缓存",	"13.选中拼装组件",	"14.倒排拼装步骤",
										
								(ep.movement_data.direction.length<=0)?"15.指定拼装视角":"15.删除拼装视角",	
										
								ep.movement_data.sequence_flag?	"16.设置同步拼装":"16.设置顺序拼装",
										
								(ep.movement_data.scale_type==0)?"17.设置起点观测":
								(ep.movement_data.scale_type==1)?"17.设置终点观测":
								(ep.movement_data.scale_type==2)?"17.设置起点终点观测":"17.设置上层观测",
										
								(ep.movement_data.children.length>0)?"18.非叶结点选择杆件操作":
								(component_part_selection_number<=0)?"18.叶子结点不需选择杆件":"18.叶子结点需要选择杆件",
										
								(ep.movement_data.children.length>0)?"19.非叶结点清除所有表面配合":
								(component_face_match_number<=0)	?"19.叶子结点不需表面配合":
									("19.叶子结点需要表面配合("+component_face_match_number.toString()+")"),
									
								"20.拼装时间:"+Math.round(ep.movement_data.mount_only_time_length/1000000)
									+"/"+Math.round(ep.movement_data.time_length/1000000),
								"21.拼装Jason数据"
					];
					render.text_2dcontext.fillText(
						"    拼装ID:"+(ep.movement_data.movement_tree_id)+",缓冲个数:"+(ep.movement_data.buffer_number),
						0,ep.instance_initialize_data.canvas_step*2);
				}
				render.text_2dcontext.fillStyle=ep.movement_data.current_movement_flag
					?(ep.instance_initialize_data.current_fillStyle):(ep.instance_initialize_data.fillStyle);
				for(var i=0,ni=str_array.length;i<ni;i++)
					render.text_2dcontext.fillText("    "+str_array[i],0,ep.instance_initialize_data.canvas_step*(i+3));
			}
			return true;
		}
	}
}
