function(component_name,component_id,render)
{
	render.component_event_processor[component_id]=
	{
		list_type				:	"simple",
		collector_stack_version	:	0,
		collector_list_object	:	new Array(),
		request_array			:	new Array(),
		item_number				:	1,
		update_flag				:	false,

		update_canvas_texture	:	function(
				canvas_2d,context_2d,text_format,component_id,render)
		{
			var ep=render.component_event_processor[component_id];
			
			var old_collector_stack_version=ep.collector_stack_version;
			if(render.collector_stack_version!=ep.collector_stack_version){
				ep.collector_stack_version=render.collector_stack_version;
				ep.hightlight=[-1,-1,-1,-1];
				
				var simple_list_flag,single_collector_flag;
				switch(ep.list_type){
				case "collector":
					simple_list_flag=true;
					single_collector_flag=false;
					break;
				case "complex":
				case "simple":
				default:
					simple_list_flag=false;
					single_collector_flag=true;
					break;
				};
				
				render.collector_loader.load_collector(
					simple_list_flag,single_collector_flag,false).
				then(
					function(response_data)
					{
						if(response_data.done_flag){
							ep.collector_list_object=response_data.collector_data;
							ep.update_flag=false;
							ep.id_base=0;
						}else
							ep.collector_stack_version=old_collector_stack_version;
					});
				return false;
			}
			
			if(ep.update_flag)
				return false;
			ep.update_flag=true;
			
			ep.request_array=new Array();
			
			var  str,p,list_type_flag=true;
			ep.item_number	=text_format.canvas_height/text_format.canvas_step;

			canvas_2d.width			=text_format.canvas_width;
			canvas_2d.height		=text_format.canvas_height;
		
			context_2d.fillStyle	=text_format.backgroundStyle;
			context_2d.fillRect(0,0,canvas_2d.width,canvas_2d.height);
					
			context_2d.fillStyle	=text_format.fillStyle;
			context_2d.font			=text_format.font;
			context_2d.textBaseline	=text_format.textBaseline;
			context_2d.textAlign	=text_format.textAlign;
			
			if((p=ep.collector_list_object).length<=0)
				return true;

			switch(ep.list_type){
			case "collector":
				for(var i=0;(i<ep.item_number)&&((ep.id_base+i)<p.length);i++){
					str =p[ep.id_base+i].list_id.toString();
					str+=".数目"+(p[ep.id_base+i].render_number);
					str+="/"+(p[ep.id_base+i].part_number);
					str+="/"+(p[ep.id_base+i].component_number);
					str+=":"+(p[ep.id_base+i].title);
					context_2d.fillText(str,0,text_format.canvas_step*i);
				}
				return true;
			case "complex":
				list_type_flag=false;
				break;
			case "simple":
			default:
				list_type_flag=true;
				break;
			};
			
			var my_text_array=new Array();
			var my_request_array=new Array();
		
			my_text_array.push(p[0].title);
			my_request_array.push([-1,-1,-1]);
			
			my_text_array.push("共"+(p[0].part_number)+"类"+(p[0].component_number)+"件");
			my_request_array.push([-1,-1,-1]);
			
			if(typeof(p[0].render_list)=="undefined")
				p[0].render_list=new Array();
			for(var index_id=0,i=0,ni=p[0].render_list.length;i<ni;i++)
				for(var pr=p[0].render_list[i],j=0,nj=pr.part_list.length;j<nj;j++){
					var pp=pr.part_list[j];
					my_text_array.push((++index_id)+" "+pp.user_name+" "+pp.part_component_number+"件");
					my_request_array.push([pr.render_id,pp.part_id,-1]);
					if(list_type_flag)
						continue;
					for(var k=0,nk=pp.component_list.length;k<nk;k++){
						my_text_array.push("  "+(k+1)+" "+pp.user_name);
						my_request_array.push([pr.render_id,pp.part_id,pp.component_list[k].component_id]);
					}
				}
			for(var i=0;(i<ep.item_number)&&((ep.id_base+i)<my_text_array.length);i++){
				context_2d.fillText(my_text_array[ep.id_base+i],0,text_format.canvas_step*i);
				ep.request_array[i]=my_request_array[ep.id_base+i];
			}
			return true;
		},
		pickupmousewheel		:	function(event,component_id,render)
		{
			var ep=render.component_event_processor[component_id];
			
			var mouse_wheel_number=0;
			if(typeof(event.wheelDelta)=="number")
				mouse_wheel_number+=event.wheelDelta/200.0;		//for chrome,opera
			else if(typeof(event.detail)=="number")
				mouse_wheel_number-=event.detail/5;				//for firefox
			else
				return true;
			
			var skip_array=[1,	5,	10,	50,	100,	500,	1000,	5000];

			ep.id_base-=mouse_wheel_number*skip_array[(event.ctrlKey?1:0)+(event.shiftKey?2:0)+(event.altKey?4:0)];
			ep.id_base=(ep.id_base<0)?0:Math.round(ep.id_base);
			ep.update_flag=false;
			
			return true;
		},
		pickupmouseselect		:	function(event,component_id,render)
		{
			var ep=render.component_event_processor[component_id];
			var function_id=Math.floor(ep.y*ep.item_number);
			ep.hightlight=[0,function_id/ep.item_number,1.0,function_id/ep.item_number+1.0/ep.item_number];
			
			var p=ep.collector_list_object;

			switch(ep.list_type){
			case "collector":
				var my_id=Math.round(ep.id_base+function_id);
				if((my_id>=0)&&(my_id<p.length)){
					var operate_ep=render.component_event_processor[render.operate_component.
							get_component_object_by_component_name("列表功能操作组件").component_id];
					operate_ep.list_id	=p[my_id].list_id;
					operate_ep.title	=p[my_id].title;
					render.system_call_processor.set_menu_show("列表功能操作组件");
				}
				break;
			case "complex":
			case "simple":
			default:
				if((function_id<0)||(function_id>=ep.request_array.length))
					break;
				var render_id	=ep.request_array[function_id][0];
				var part_id		=ep.request_array[function_id][1];
				var component_id=ep.request_array[function_id][2];
				
				if(event.ctrlKey)
					render.caller.call_server_component("manipulator_component","all",
						[["event_method","part_list"],	["operation",	"selection"],
						 ["selection",	"select"],		["render_id",	render_id],
						 ["part_id",	part_id],		["component_id",component_id]]);
				else if(event.shiftKey)
					render.caller.call_server_component("manipulator_component","all",
						[["event_method","part_list"],	["operation",	"selection"],
						 ["selection",	"unselect"],	["render_id",	render_id],
						 ["part_id",	part_id],		["component_id",component_id]]);
				else
					render.caller.call_server_component("manipulator_component","all",
						[["event_method","part_list"],	["operation",	"selection"],
						 ["selection",	"swap"],		["render_id",	render_id],
						 ["part_id",	part_id],		["component_id",component_id]]);
				break;
			}		
		}
	}
}
		