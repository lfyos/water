function(component_name,component_id,render)
{
	render.component_event_processor[component_id]={
		browse_type_flag			:	true,
		update_flag					:	true,
		component_id				:	-1,
		
		active_list					:	function()
		{
			render.caller.call_server_component(
				"manipulator_component","all",[["event_method","last_component"]],"json").
			then(
				function(response_data)
				{
					var ep=render.component_event_processor[component_id];
					ep.browse_type_flag=true;
					ep.update_flag=true;					
					if((ep.component_id=response_data)>=0)
						render.system_call_processor.set_menu_show(component_id);
				});
		},	
		pickupmouseselect			:	function(event,component_id,render)
		{
			var ep=render.component_event_processor[component_id];
			var number=ep.interface_data.canvas.canvas_height/ep.interface_data.canvas.canvas_step;
			var p,function_id=Math.floor(ep.y*number);

			if(function_id<0)
				return;
			if(ep.component_id<0)
				return;
			if(ep.component_id>=render.component_array_sorted_by_id.length)
				return;
					
			switch(function_id){
			case 0:
				if((p=render.component_array_sorted_by_id[ep.component_id].component_parent)==null)
					return;
				ep.browse_type_flag	=true;
				ep.update_flag		=true;
				ep.component_id		=p.component_id;
				
				render.caller.call_server_component("manipulator_component","all",
					[["component_id",ep.component_id],["event_method","selection"],["event_operation","select_component"]]);
				break;
			case 1:
				ep.browse_type_flag^=true; 
				ep.update_flag		=true;
				
				render.caller.call_server_component("manipulator_component","all",[
						["component_id",ep.component_id],["event_method","selection"],
						["event_operation","swap_component"]]).
				then(
					function(response_data)
					{
						render.caller.call_server_component("coordinate","all",[["operation","onoff"]]);
					});
				break;
			default:
				if(ep.browse_type_flag){
					if((p=render.component_array_sorted_by_id[ep.component_id].component_children)==null)
						return;
					if((function_id-2)>=p.length)
						return;
					var  my_component_id=ep.component_id,child_component_id=p[function_id-2].component_id;
					ep.update_flag=true;
					ep.component_id=child_component_id;
					
					render.caller.call_server_component("manipulator_component","all",
						[["component_id",my_component_id],
						["event_method","selection"],
						["event_operation","clear_component"]]).
					then(
						function(response_data)
						{
							render.caller.call_server_component("manipulator_component","all",
								[["component_id",child_component_id],
								["event_method","selection"],
								["event_operation","select_component"]]);
						});
					break;
				}
				return;
			}
			render.caller.call_server_component("camera_operation_component","all",
					[["operation","locate"],["component_id",ep.component_id],["scale",1.0],
					 ["mandatory_movement","false"],["mandatory_scale","false"]]);
			return;
		},	
		update_canvas_texture	:	function(canvas_2d,context_2d,text_format,component_id,render)
		{
			var ep=render.component_event_processor[component_id];
			
			if(!(ep.update_flag))
				return false;
			ep.update_flag=false;
			
			canvas_2d.width			=text_format.canvas_width;
			canvas_2d.height		=text_format.canvas_height;
			
			context_2d.fillStyle	=text_format.backgroundStyle;
			context_2d.fillRect(0,0,text_format.canvas_width,text_format.canvas_height);
			
			context_2d.fillStyle	=text_format.fillStyle;
			context_2d.font			=text_format.font;
			context_2d.textBaseline	=text_format.textBaseline;
			context_2d.textAlign	=text_format.textAlign;
			
			if((ep.component_id<0)||(ep.component_id>=render.component_array_sorted_by_id.length))
				return true;
			var str,pos,p=render.component_array_sorted_by_id[ep.component_id];
			if(p.component_parent!=null){
				str=p.component_parent.component_name;
				pos=text_format.canvas_width-context_2d.measureText(str).width;
				if((pos=Math.round(pos/2.0))<0)
					pos=0;
				context_2d.fillText(str,pos,0);
			}
			pos=text_format.canvas_width-context_2d.measureText(p.component_name).width;
			if((pos=Math.round(pos/2.0))<0)
				pos=0;
			context_2d.fillText(p.component_name,pos,text_format.canvas_step);
			
			pos=text_format.canvas_step+text_format.canvas_step;
			if(ep.browse_type_flag){
				for(var i=0,ni=p.component_children.length;i<ni;i++,pos+=text_format.canvas_step){
					if(pos>=text_format.canvas_height)
						break;
					context_2d.fillText(p.component_children[i].component_name,0,pos);
				}
			}else{
				p=render.component_array_sorted_by_id[component_id].component_ids;
				for(var driver_id=0,driver_number=p.length;driver_id<driver_number;driver_id++){
					if(pos>=text_format.canvas_height)
						break;
					var render_id=p[driver_id][0],part_id=p[driver_id][1];
					var part_information	=render.part_array[render_id][part_id].information;
					var part_property		=render.part_array[render_id][part_id].property;
					var permanent_render_id	=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
					var permanent_part_id	=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
					
					str=(driver_id+1)+".";
					if(part_property.normal_part_flag)
						str+="ÆÕÍ¨Áã¼þ:";
					if(part_property.bottom_box_flag)
						str+="µ×²ã°üÎ§ºÐ:";
					if(part_property.top_box_flag)
						str+="¶¥²ã°üÎ§ºÐ:";
					str+="render_id:"+permanent_render_id+"/"+render_id;
					str+=",part_id:"+permanent_part_id+"/"+part_id;

					context_2d.fillText(str,							0,						pos);
					pos+=text_format.canvas_step;
					context_2d.fillText(part_information.user_name,		text_format.canvas_step,pos);
					pos+=text_format.canvas_step;
					context_2d.fillText(part_information.system_name,	text_format.canvas_step,pos);
					pos+=text_format.canvas_step;
				}
			}
			return true;
		}
	}
}
