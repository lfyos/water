				function(component_name,component_id,scene)
				{
/*				
					scene.system_event_processor.pickupmousedown=function(event,pickup_component_id,scene)
					{
						scene.call_server_component(
								"show_select_component_box_component","all",[["component_id",pickup_component_id]]);
						scene.user_call_processor.scene_mousedown(pickup_component_id,event);
						return false;
					};
*/
					scene.system_event_processor.keydown=function(event,scene)
					{
						switch(event.keyCode){	
						case 13://Enter
							if(scene.pickup.component_id>=0)
								scene.caller.call_server_component("manipulator_component","all",[
										["component_id",scene.pickup.component_id],["event_method","selection"],
										["event_operation",(event.shiftKey||event.ctrlKey||event.altKey)
									 					?"swap_component":"select_component"]]).
								then(
									function(response_data)
									{
										scene.system_call_processor.update_coordinate_display();
									});
							break;				
						case 27://Esc
							scene.caller.call_server_component("manipulator_component","all",
								[["event_method","selection"],["event_operation","clear_all"]]).
							then(
								function()
								{
									scene.system_call_processor.update_coordinate_display();
								});	
							break;
						case 37://left arrow
							var par=[["operation","movement"],["move_method","continue"],["direct","backward"]];
									if(confirm("单步拼装(OK)/连续拼装(Cancel)"))
										par.push(["single_step","true"]);
									scene.caller.call_server_component("movement_manager","all",par);
							break;
						case 39://right arrow
							var par=[["operation","movement"],["move_method","continue"],["direct","forward"]];
									if(confirm("单步拼装(OK)/连续拼装(Cancel)"))
										par.push(["single_step","true"]);
									scene.caller.call_server_component("movement_manager","all",par);
							break;						
						case 38://up arrow
							scene.caller.call_server_component("manipulator_component","all",
								[["event_method","selection"],["event_operation","parent"]]).
							then(
								function()
								{
									scene.system_call_processor.update_coordinate_display();
								});		
							break;
						case 40://down arrow
							scene.caller.call_server_component("manipulator_component","all",
								[["event_method","selection"],["event_operation","child"]]).
							then(
								function()
								{
									scene.system_call_processor.update_coordinate_display();
								});	
							break;				
						case 32://space
							scene.caller.call_server_component("movement_manager","all",
											[["operation","movement"],["move_method","stop"]]);
							break;						
						case 90://z
						case 88://x
						case 67://c
						case 86://v
							var my_function_id;
							switch(event.keyCode){
							default:
							case 90:	my_function_id=  0;	break;	//z
							case 88:	my_function_id=100;	break;	//x	
							case 67:	my_function_id=200;	break;	//c
							case 86:	my_function_id=300;	break;	//v
							}
							scene.event_component.mouse.	component_name	="mouse_modify_location_component";
							scene.event_component.keyboard.component_name	="mouse_modify_location_component";
							scene.event_component.touch.	component_name	="mouse_modify_location_component";
							scene.event_component.mouse.	function_id		=my_function_id;
							scene.event_component.keyboard.function_id		=my_function_id;
							scene.event_component.touch.	function_id		=my_function_id;
							
							break;
						case 66://b
							scene.event_component.mouse.	component_name	="component_selection_component";
							scene.event_component.keyboard.component_name	="component_selection_component";
							scene.event_component.mouse.	function_id		=0;
							scene.event_component.keyboard.function_id		=0;
							
							break;
						case 78://n
							scene.event_component.mouse.	component_name	="distance_tag_component";
							scene.event_component.keyboard.component_name	="distance_tag_component";
							scene.event_component.mouse.	function_id		=0;
							scene.event_component.keyboard.function_id		=0;
							
							break;	
						case 77://m
							scene.event_component.mouse.	component_name	="component_marker_component";
							scene.event_component.keyboard.component_name	="component_marker_component";
							scene.event_component.mouse.	function_id		=0;
							scene.event_component.keyboard.function_id		=0;
							
							break;
/*							
						case 112://F1
							scene.user_call_processor.set_all_transparant_except_selection();
							break;
						case 113://F2
							scene.user_call_processor.set_all_untransparant();
							break;
*/
						case 114://F3
						case 115://F4
							scene.caller.call_server_component("audio_player_component","all",
									[["operation",(event.keyCode==114)?"turn_on":"turn_off"]]);
							break;						
						case 116://F5
							scene.highlight=scene.pickup.fork();
							break;
						case 117://F6
							scene.destroy();
							break;
						case 118://F7
							break;
						case 119://F8
							break;
						case 120://F9
							break;
						case 121://F10
							break;
						case 122://F11
							break;						
						case 123://F12
							scene.system_call_processor.set_menu_show("交互界面主菜单");
							break;
						case 49://1
						case 50://2
						case 51://3
						case 52://4
						case 53://5
						case 54://6
						case 55://7
						case 56://8
						case 57://9
						case 48://0
							break;
						case 81://q
						case 87://w
						case 69://e
						case 82://r
						case 84://t
						case 89://y
						case 85://u
						case 73://i
						case 79://o
						case 80://p
							break;
						default:
							break;
						};
						return false;
					};
				}
