function(component_name,component_id,render)
{
//	system call for manipulating menu

	render.system_call_processor.set_menu_show=function(menu_name,par)
	{
		var my_par=(typeof(par)=="undefined")?[["center","center"]]:par;
		render.call_server_component(menu_name,"all",my_par.concat([["operation","show"]]));
	};
	render.system_call_processor.set_menu_hide=function(menu_name)
	{
		render.call_server_component(menu_name,"all",[["operation","hide"]]);
	};

//	system call for set mouse usage

	if(typeof(render.system_call_processor.mouse_usage)=="undefined")
		render.system_call_processor.mouse_usage=[0,0,0,0,0,0,0];
	render.system_call_processor.set_mouse_for_view_rotate=function(function_id)
	{
		if(function_id<0)
			function_id=render.system_call_processor.mouse_usage[0];
		else
			render.system_call_processor.mouse_usage[0]=function_id;
		function_id+=000;
		render.event_component.mouse.	component_name	="mouse_modify_location_component";
		render.event_component.keyboard.component_name	="mouse_modify_location_component";
		render.event_component.touch.	component_name	="mouse_modify_location_component";
		render.event_component.mouse.	function_id		=function_id;
		render.event_component.keyboard.function_id		=function_id;
		render.event_component.touch.	function_id		=function_id;
		render.set_event_component("mouse_modify_location_component");
	};
	render.system_call_processor.set_mouse_for_view_move=function(function_id)
	{
		if(function_id<0)
			function_id=render.system_call_processor.mouse_usage[1];
		else
			render.system_call_processor.mouse_usage[1]=function_id;
		function_id+=100;
		render.event_component.mouse.	component_name	="mouse_modify_location_component";
		render.event_component.keyboard.component_name	="mouse_modify_location_component";
		render.event_component.touch.	component_name	="mouse_modify_location_component";
		render.event_component.mouse.	function_id		=function_id;
		render.event_component.keyboard.function_id		=function_id;
		render.event_component.touch.	function_id		=function_id;
		render.set_event_component("mouse_modify_location_component");
	};
	render.system_call_processor.set_mouse_for_component_rotate=function(function_id)
	{
		if(function_id<0)
			function_id=render.system_call_processor.mouse_usage[2];
		else
			render.system_call_processor.mouse_usage[2]=function_id;
		function_id+=200;
		render.event_component.mouse.	component_name	="mouse_modify_location_component";
		render.event_component.keyboard.component_name	="mouse_modify_location_component";
		render.event_component.touch.	component_name	="mouse_modify_location_component";
		render.event_component.mouse.	function_id		=function_id;
		render.event_component.keyboard.function_id		=function_id;
		render.event_component.touch.	function_id		=function_id;
		render.set_event_component("mouse_modify_location_component");
	};
	render.system_call_processor.set_mouse_for_component_move=function(function_id)
	{
		if(function_id<0)
			function_id=render.system_call_processor.mouse_usage[3];
		else
			render.system_call_processor.mouse_usage[3]=function_id;
		function_id+=300;
		render.event_component.mouse.	component_name	="mouse_modify_location_component";
		render.event_component.keyboard.component_name	="mouse_modify_location_component";
		render.event_component.touch.	component_name	="mouse_modify_location_component";
		render.event_component.mouse.	function_id		=function_id;
		render.event_component.keyboard.function_id		=function_id;
		render.event_component.touch.	function_id		=function_id;
		render.set_event_component("mouse_modify_location_component");
	};
	render.system_call_processor.set_mouse_for_selection=function(function_id)
	{
		if(function_id<0)
			function_id=render.system_call_processor.mouse_usage[4];
		else
			render.system_call_processor.mouse_usage[4]=function_id;
		render.event_component.mouse.	component_name	="component_selection_component";
		render.event_component.keyboard.component_name	="component_selection_component";
		render.event_component.mouse.	function_id		=function_id;
		render.event_component.keyboard.function_id		=function_id;
		render.set_event_component("component_selection_component");
	};
	render.system_call_processor.set_mouse_for_tag=function(function_id)
	{
		if(function_id<0)
			function_id=render.system_call_processor.mouse_usage[5];
		else
			render.system_call_processor.mouse_usage[5]=function_id;
		render.event_component.mouse.	component_name	="distance_tag_component";
		render.event_component.keyboard.component_name	="distance_tag_component";
		render.event_component.mouse.	function_id		=function_id;
		render.event_component.keyboard.function_id		=function_id;
		render.set_event_component("distance_tag_component");
	};
	render.system_call_processor.set_mouse_for_text_token=function(function_id)
	{
		if(function_id<0)
			function_id=render.system_call_processor.mouse_usage[6];
		else
			render.system_call_processor.mouse_usage[6]=function_id;
		render.event_component.mouse.	component_name	="component_marker_component";
		render.event_component.keyboard.component_name	="component_marker_component";
		render.event_component.mouse.	function_id		=function_id;
		render.event_component.keyboard.function_id		=function_id;
		render.set_event_component("component_marker_component");
	};

//	system call for set display content
	render.system_call_processor.set_target_parameter_channel=function(target_id,parameter_channel_id)
	{
		render.call_server_component("render_target_register_component","all",
			[	["target",target_id],
				["operation","parameter_channel"],
				["parameter_channel",parameter_channel_id]
			]);
	};
	render.system_call_processor.set_target_background_color=function(target_id,view_id,new_red,new_green,new_blue)
	{
		render.call_server_component("render_target_register_component","all",
			[
				["operation","set_clear_color"],["target",target_id],["viewport",view_id],
				["red",new_red],["green",new_green],["blue",new_blue],["alf","1.0"]
			]);
	};
	render.system_call_processor.set_display_mode=function(
			hide_face_flag,hide_depth_flag,hide_frame_flag,hide_edge_flag,hide_point_flag,
			show_face_flag,show_depth_flag,show_frame_flag,show_edge_flag,show_point_flag)
	{
		render.call_server_component("manipulator_component","all",
			[	["event_method","show_hide_parameter"],
				["hide_code",	 (hide_face_flag? 2:0)	+(hide_depth_flag? 4:0)	+(hide_frame_flag?8:0)
								+(hide_edge_flag?16:0)	+(hide_point_flag?32:0)],
				["show_code",	 (show_face_flag? 2:0)	+(show_depth_flag? 4:0)	+(show_frame_flag?8:0)
								+(show_edge_flag?16:0)	+(show_point_flag?32:0)]
			]);
	};
	render.system_call_processor.set_display_value=function(display_value)
	{
		render.call_server_component("manipulator_component","all",
			[["event_method","display_value"],["display_value",display_value]]);
	};
	render.system_call_processor.set_background_mode=function(new_mode)
	{
		for(var i=0;i<8;i++)
			render.call_server_component(
				"background_component_"+i.toString(),"all",
				[["operation","mode"],["mode",new_mode]]);
	};
	render.system_call_processor.set_background_picture=function(picture_id)
	{
		for(var i=0;i<8;i++)
			render.call_server_component("background_component_"+i.toString(),"all",
								[["operation","directory"],["directory",picture_id]]);
	};
	render.system_call_processor.show_hide_coordinate=function(camera_display_flag,selected_display_flag)
	{
		var par=[];
		if(typeof(camera_display_flag)=="boolean")
			par.push(["camera_display_flag",	camera_display_flag	 ?"true":"false"]);
		if(typeof(selected_display_flag)=="boolean")
			par.push(["selected_display_flag",	selected_display_flag?"true":"false"]);
		render.call_server_component("coordinate","all",par);
	};
	render.system_call_processor.show_hide_camera_operation=function(show_hide_flag)
	{
		render.call_server_component("camera_operation_component","all",
			[["operation","show_hide"],["show_hide",show_hide_flag?"true":"false"]]);
	};
	render.system_call_processor.start_trace_primitive=function(my_precision,my_response_fun,my_error_fun)
	{
		var my_component_object;
		if((my_component_object=render.get_component_object_by_component_name("trace_primitive_component"))!=null)
			render.component_event_processor[my_component_object.component_id].
						start_trace_primitive(my_component_object.component_id,my_precision,my_response_fun,my_error_fun);
	};
	render.system_call_processor.collect_trace_primitive=function(my_response_fun)
	{
		var my_component_object;
		if((my_component_object=render.get_component_object_by_component_name("trace_primitive_component"))!=null)
			render.component_event_processor[my_component_object.component_id].
						collect_trace_primitive(my_component_object.component_id,my_response_fun);
	};
	render.system_call_processor.trace_primitive_download_url=function(file_type)
	{
		var my_component_object;
		if((my_component_object=render.get_component_object_by_component_name("trace_primitive_component"))!=null)
			return render.component_event_processor[my_component_object.component_id].
						trace_primitive_download_url(my_component_object.component_id,file_type);
		return null;
	};
	
//	system call for camera operation
	render.system_call_processor.select_camera=function(camera_id)
	{
		for(var target_id=0;target_id<10;target_id++)
			render.call_server_component(
				"render_target_register_component","all",
				[["target",target_id],["operation","camera"],["camera",camera_id]]);
	};
	render.system_call_processor.set_camera_direction=function(
		type,coordinate,direct_x,direct_y,direct_z)
	{
		render.call_server_component("camera_operation_component","all",
			[	["operation","direct"],["type",type],["coordinate",coordinate],
				["x",direct_x],["y",direct_y],["z",direct_z]
			]);
	};
	render.system_call_processor.camera_rotate=function(angle,axis_id,global_camera_flag)
	{
		angle*=Math.PI/180.0;
		var rotate_array=[
				[[0,				1,					0				],
				 [0,				Math.cos(angle),	Math.sin(angle)]],
										 
				[[0,				0,					1				], 
				 [Math.sin(angle),	0,					Math.cos(angle)]],
										 
				[[1,				0,					0				], 
				 [Math.cos(angle),	Math.sin(angle),	0			   ]]
			];
		rotate_array=rotate_array[axis_id%3];
		render.call_server_component("camera_operation_component","all",
			[
			 ["operation","rotate"],	  ["coordinate",global_camera_flag?"global":"camera"],
			 ["x0",rotate_array[0][0]],["y0",rotate_array[0][1]],["z0",rotate_array[0][2]],
			 ["x1",rotate_array[1][0]],["y1",rotate_array[1][1]],["z1",rotate_array[1][2]]
			]);
	};
	render.system_call_processor.camera_retreat=function()
	{
		render.call_server_component(
			"camera_operation_component","all",[["operation","retreat"]]);
	};
	render.system_call_processor.locate_camera_at_center=function()
	{
		render.call_server_component("camera_operation_component","all",
				[["operation","locate"],["clear_pickup","true"]]);
	};
	render.system_call_processor.scale_camera_at_center=function()
	{
		render.call_server_component("camera_operation_component","all",
				[["operation","locate"],["scale",1.0],["clear_pickup","true"]]);
	};
	render.system_call_processor.locate_camera_at_highlight=function()
	{
		render.call_server_component("camera_operation_component","all",
				[["operation","locate"],["component_id",render.highlight.component_id],
				 ["body_id",render.highlight.body_id],["face_id",render.highlight.face_id]]);
	};
	render.system_call_processor.scale_camera_at_highlight=function()
	{
		render.call_server_component("camera_operation_component","all",
				[["operation","locate"],["scale",1.0],["component_id",render.highlight.component_id],
				 ["body_id",render.highlight.body_id],["face_id",render.highlight.face_id]]);
	};
	render.system_call_processor.set_orientation_camera_parameter=function(on_off_flag,type_flag)
	{
		render.call_server_component("orientation_camera_component","all",
				[["onoff",on_off_flag?"true":"false"],["type",type_flag?"true":"false"]]);
	};
	render.system_call_processor.set_camera_projection=function(flag)
	{
		render.call_server_component("camera_operation_component","all",
			[["operation","project"],["project",flag?"frustum":"orthogonal"]]);
	};
	render.system_call_processor.set_camera_change_type=function(flag)
	{
		render.call_server_component("camera_operation_component","all",
			[["operation","change_type"],["value",flag?"true":"false"]]);
	};
	render.system_call_processor.turnonoff_view_move=function(flag)
	{
		render.call_server_component("camera_operation_component","all",
			[["operation","view_move"],	["value",flag?"true":"false"]]);
	};
	render.system_call_processor.turnonoff_view_direct=function(flag)
	{
		render.call_server_component("camera_operation_component","all",
			[["operation","view_direct"],	["value",flag?"true":"false"]]);
	};
	render.system_call_processor.turnonoff_view_scale=function(flag)
	{
		render.call_server_component("camera_operation_component","all",
			[["operation","view_scale"],	["value",flag?"true":"false"]]);
	};
	
//	system call for component operation
	render.system_call_processor.show_hide_component=function(flag,component)
	{
		var par=[["event_method","show_hide_component"],["event_operation",flag?"true":"false"]];
		switch(typeof(component)){
		case "string":
			par.push(["component_name",encodeURIComponent(encodeURIComponent(component))]);
			break;
		case "number":
			par.push(["component_id",component]);
			break;
		}
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.clip_onoff_component=function(flag)
	{
		render.call_server_component("manipulator_component","all",
				[["event_method","clip"],["event_operation",flag?"true":"false"]]);
	};
	render.system_call_processor.explose_onoff_component=function(flag,t,component)
	{
		var par=[["event_method","explosion"],["explosion",flag?"explosion":"reset"],["t",t]];
		switch(typeof(component)){
		case "string":
			par.push(["component_name",encodeURIComponent(encodeURIComponent(component))]);
			break;
		case "number":
			par.push(["component_id",component]);
			break;
		}
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.explose_onoff_list=function(flag,t,list)
	{
		render.call_server_component("manipulator_component","all",
			[["event_method","explosion"],["explosion",flag?"explosion":"reset"],["t",t],["list",list]]);
	};
	render.system_call_processor.set_component_transparency=function(transparency,component)
	{
		var par=[["event_method","transparency"],["transparency",transparency],["flag","noselection_all"]];
		switch(typeof(component)){
		case "string":
			par.push(["component_name",encodeURIComponent(encodeURIComponent(component))]);
			break;
		case "number":
			par.push(["component_id",component]);
			break;
		}
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.set_level_of_detail_parameter=function(high_precision_scale,low_precision_scale)
	{
		render.call_server_component("camera_operation_component","all",
			[["operation","display_precision"],["high_value",high_precision_scale],["low_value",low_precision_scale]]);
	};
	render.system_call_processor.select_component=function(select_operation_str,par,response_function)
		//	"parent" "child" "move" "display" "select" "visible" "all" "latest" "part_list" "clear_all":
		//	"clear_component"	"swap_component"	"select_component"	 with "component" or "component_id" paramerer
	{
		var my_par=[["event_method","selection"],["event_operation",select_operation_str]];
		if(typeof(par)!="undefined")
			if(par!=null)
				my_par=my_par.concat(par);
		render.call_server_component("manipulator_component","all",my_par,response_function);
	};
	render.system_call_processor.component_check_url=function()
	{
		return render.create_component_request_string("manipulator_component","all",[["event_method","check_component"]]);
	};
	
//	system call for system parameter

	render.system_call_processor.turnonoff_sound=function(flag)
	{
		render.call_server_component(
			"audio_component","all",[["operation",flag?"turn_on":"turn_off"]]);
	};
	render.system_call_processor.turnonoff_level_of_detail=function(
		discard_lod_value,selection_lod_value)
	{
		render.call_server_component(
			"camera_operation_component","all",[["operation","client_parameter"],
			["discard_lod_value",	discard_lod_value	?"true":"false"],
			["selection_lod_value",	selection_lod_value	?"true":"false"]]);
	};
	render.system_call_processor.set_component_display_precision=function(value)
	{
		render.call_server_component("manipulator_component","all",[["event_method","lod"],["value",value]]);
	};
	render.system_call_processor.set_render_driver_id=function(driver_id,component_name)
	{
		var par=[["event_method","fix_driver"],["driver_id",driver_id]];
		if(typeof(component_name)!="undefined")
			par.push(["component",component_name]);
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.set_can_display_assembly_set_flag=function(value,component_name)
	{
		var par=[["event_method","render_assemble"],["value",value?"true":"false"]];
		if(typeof(component_name)!="undefined")
			par.push(["component",component_name]);
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.system_information_url=function(flag)
	{
		var url=render.url+"?command=information&channel="+render.channel+"&method=";
		return url+"engine&operation="+(flag?"reset":"get");
	};
	render.system_call_processor.part_information_url=function(type_id)
	{
		var type_array=["sequence","sort","array"];
		var url=render.url+"?command=information&channel="+render.channel+"&method=";
		return url+"part&operation="+type_array[type_id%type_array.length];
	};
	render.system_call_processor.component_information_url=function(type_str)
	{
		return render.url+"?command=information&channel="+render.channel+"&method=component&operation="+type_str;
	};
	render.system_call_processor.collector_information_url=function(type_id)
	{
		var type_array=["list","display","selection","target"];
		var url=render.url+"?command=information&channel="+render.channel+"&method=";
		return url+"collector&operation="+type_array[type_id%type_array.length];
	};
	render.system_call_processor.camera_information_url=function()
	{
		var url=render.url+"?command=information&channel="+render.channel+"&method=";
		return url+"camera";
	};

//	system call for list

	render.system_call_processor.collector_list_jason_component_url=function(flag)
	{
		return render.create_component_request_string("manipulator_component","all",
					[["event_method","part_list"],["flag",flag?"true":"false"],
					 ["operation","part_list_jason_component"]]);
	};
	render.system_call_processor.collector_list_select_component=function(render_id,part_id,component_id)
	{
		render.call_server_component("manipulator_component","all",
			[["event_method",	"part_list"],	 ["operation",		"selection"],
			 ["selection",		"select"],		 ["render_id",		render_id],
			 ["part_id",		part_id],		 ["component_id",	component_id]
			]);
	};
	render.system_call_processor.collector_list_unselect_component=function(render_id,part_id,component_id)
	{
		render.call_server_component("manipulator_component","all",
			[["event_method",	"part_list"],	 ["operation",		"selection"],
			 ["selection",		"unselect"],	 ["render_id",		render_id],
			 ["part_id",		part_id],		 ["component_id",	component_id]
			]);
	};
	render.system_call_processor.collector_list_swap_component=function(render_id,part_id,component_id)
	{
		render.call_server_component("manipulator_component","all",
			[["event_method",	"part_list"],	 ["operation",		"selection"],
			 ["selection",		"swap"],		 ["render_id",		render_id],
			 ["part_id",		part_id],		 ["component_id",	component_id]
			]);
	};
	render.system_call_processor.collector_list_select_list=function(list_id)
	{
		render.call_server_component("manipulator_component","all",
			[["event_method",	"part_list"],	 ["operation",		"manipulation"],
			 ["manipulation",	"select"],		 ["list_id",		list_id]
			]);
	};
	render.system_call_processor.collector_list_unselect_list=function(list_id)
	{
		render.call_server_component("manipulator_component","all",
			[["event_method",	"part_list"],	 ["operation",		"manipulation"],
			 ["manipulation",	"unselect"],	 ["list_id",		list_id]
			]);
	};
	render.system_call_processor.collector_list_swap_list=function(list_id)
	{
		render.call_server_component("manipulator_component","all",
			[["event_method",	"part_list"],	 ["operation",		"manipulation"],
			 ["manipulation",	"swap"],		 ["list_id",		list_id]
			]);
	};
	render.system_call_processor.collector_list_top_list=function(list_id)
	{
		render.call_server_component("manipulator_component","all",
			[["event_method",	"part_list"],	 ["operation",		"manipulation"],
			 ["manipulation",	"top"],			 ["list_id",		list_id]
			]);
	};
	render.system_call_processor.collector_list_delete_list=function(list_id)
	{
		render.call_server_component("manipulator_component","all",
			[["event_method",	"part_list"],	 ["operation",		"manipulation"],
			 ["manipulation",	"delete"],		 ["list_id",		list_id]
			]);
	};
	render.system_call_processor.collector_list_title_list=function(list_id,title,description)
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"manipulation"],
				 ["manipulation",	"title"],		 ["list_id",		list_id]];
		if(typeof(title)=="string")
			par.push(["title",encodeURIComponent(encodeURIComponent(title))]);
		if(typeof(description)=="string")
			par.push(["description",encodeURIComponent(encodeURIComponent(description))]);
		render.call_server_component("manipulator_component","all",par);
	};
	
	render.system_call_processor.collector_list_create_list=function(part_list_flag_effective_flag)
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"create"],
				 ["part_list",		part_list_flag_effective_flag?"true":"false"]];
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.collector_list_create_list_by_component_id=function(part_list_flag_effective_flag,component_id)
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"create"],
				 ["part_list",		part_list_flag_effective_flag?"true":"false"],
				 ["component_id",	component_id]];
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.collector_list_create_list_by_component_name=function(part_list_flag_effective_flag,component_name)
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"create"],
				 ["part_list",		part_list_flag_effective_flag?"true":"false"],
				 ["component_name",	component_name]];
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.collector_list_create_list_by_all_target=function()
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"target"],	 ["target",	"all"]];
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.collector_list_create_list_by_display_target=function()
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"target"], ["target",	"display"]];
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.collector_list_create_list_by_selection_target=function()
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"target"], ["target",	"selection"]];
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.collector_list_clear=function()
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"clear"]];
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.collector_list_save=function()
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"save"],		["top",		"false"]];
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.collector_list_load=function()
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"load"]];
		render.call_server_component("manipulator_component","all",par);
	};
	render.system_call_processor.collector_list_download_url=function()
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"download"],	["top",		"true"]];
		return render.create_component_request_string("manipulator_component","all",par);
	};
	render.system_call_processor.collector_list_upload_url=function()
	{
		var par=[["event_method",	"part_list"],	 ["operation",		"upload"]];
		render.create_component_request_string("manipulator_component","all",par);
	};
	render.system_call_processor.collector_list_upload_webpage=function(change_name_str)
	{
		var par=[["event_method","part_list"],["operation","upload_webpage"],
				 ["change_name",encodeURIComponent(encodeURIComponent("upload_file%2B"+change_name_str))]];
		return render.create_component_request_string("manipulator_component","all",par);
	};
}
