[
	
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_program					=render.render_program.render_program[render_id].shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	
	if(do_render_number.engine_render==0){
		shader_program.sampler=gl.createSampler();
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MAG_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MIN_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_S,		gl.MIRRORED_REPEAT);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_T,		gl.MIRRORED_REPEAT);

		shader_program.texture_sampler_uniform	=gl.getUniformLocation(shader_program,"texture_sampler");
		shader_program.view_par_uniform			=gl.getUniformLocation(shader_program,"view_par");
	}

	switch(method_id){
	case 1:
	case 5:
		break;
	default:
		return;
	};

	gl.uniform4fv(shader_program.view_par_uniform,new Float32Array(
			[part_material[0].view_scale,part_material[0].view_method,0.0,1.0]));
	
	part_buffer_object=part_buffer_object.face;
		
	for(var i=0,n=component_data_array.length;i<n;i++){
		var buffer_id=component_data_array[i];
		
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
		
		var component_id=part_component_id_and_driver_id[buffer_id][0];
		var driver_id   =part_component_id_and_driver_id[buffer_id][1];

		if(typeof(part_buffer_object.texture_object)=="undefined")
			part_buffer_object.texture_object=new Array();
		if(typeof(part_buffer_object.texture_object[buffer_id])=="undefined")
			part_buffer_object.texture_object[buffer_id]=utility.load_server_component_image(component_id,driver_id,[]);
			
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D,part_buffer_object.texture_object[buffer_id]);
		gl.bindSampler(0,shader_program.sampler);
		gl.uniform1i(shader_program.texture_sampler_uniform,0);
		
		component_location.get_component_location(component_id);

		for(var j=0,nj=part_buffer_object.region_data.length;j<nj;j++){
			var p=part_buffer_object.region_data[j];
			if(typeof(p.vertex_array_object)!="undefined")
				gl.bindVertexArray(p.vertex_array_object);
			else{
				p.vertex_array_object=gl.createVertexArray();
				gl.bindVertexArray(p.vertex_array_object);
				gl.bindBuffer(gl.ARRAY_BUFFER,p.buffer_object);
				
				var my_attribute;
				
				my_attribute=gl.getAttribLocation (shader_program,"vertex_location");
				gl.vertexAttribPointer(my_attribute,4,gl.FLOAT,false,p.item_size*4,0*16);
				gl.enableVertexAttribArray(my_attribute);
				
				my_attribute=gl.getAttribLocation (shader_program,"vertex_texture");
				gl.vertexAttribPointer(my_attribute,4,gl.FLOAT,false,p.item_size*4,4*16);
				gl.enableVertexAttribArray(my_attribute);
			}
			gl.drawArrays(gl.TRIANGLES,0,p.item_number);
		}
		gl.bindVertexArray(null);
	}
}
