package kernel_component;

import java.io.File;

import kernel_part.part;
import kernel_common_class.change_name;
import kernel_common_class.debug_information;
import kernel_engine.engine_kernel;
import kernel_file_manager.file_reader;
import kernel_file_manager.travel_through_directory;
import kernel_network.client_request_response;
import kernel_part.part_container_for_part_search;

public class component_core_4 extends component_core_3
{
	public component children[];
	
	public void destroy()
	{
		super.destroy();
		if(children!=null){
			for(int i=0,ni=children_number();i<ni;i++){
				if(children[i]!=null)
					children[i].destroy();
				children[i]=null;
			}
			children=null;
		}		
	}
	public int children_number()
	{
		if(children==null)
			return 0;
		else
			return children.length;
	}
	public void append_child(component my_children[])
	{
		if(my_children==null)
			return;
		if(my_children.length<=0)
			return;
		if(children==null) {
			children=new component[my_children.length];
			for(int i=0,ni=my_children.length;i<ni;i++)
				children[i]=my_children[i];
		}else{
			component bak[]=children;
			children=new component[bak.length+my_children.length];
				
			for(int i=0,ni=bak.length;i<ni;i++)
				children[i]=bak[i];
			for(int i=0,j=bak.length;i<my_children.length;i++,j++)
				children[j]=my_children[i];
		}
	}
	private String[][]file_mount(file_reader fr,engine_kernel ek)
	{
		String my_file_name;
		if((my_file_name=fr.get_string())==null) {
			debug_information.println(
				"file_mount_array error((my_file_name=fr.get_string())==null):	",
				"component_name:	"+component_name);
			return null;
		}
		if(my_file_name.length()<=0){
			debug_information.println(
				"file_mount_array error(my_file_name.length()<=0):	",
				"component_name:	"+component_name);
			return null;
		}
		my_file_name=file_reader.separator(my_file_name);
		String my_directory_name_array[]= {
				fr.directory_name,
				ek.scene_directory_name						+"assemble_default"+File.separatorChar,
				ek.scene_par.directory_name					+"assemble_default"+File.separatorChar,
				ek.scene_par.extra_directory_name			+"assemble_default"+File.separatorChar,
				ek.system_par.default_parameter_directory	+"assemble_default"+File.separatorChar,
				""
		};
		String charset_name_array[]=new String[]{
				fr.get_charset(),
				ek.scene_charset,
				ek.scene_par.parameter_charset,
				ek.scene_par.extra_parameter_charset,
				ek.system_par.local_data_charset,
				fr.get_charset()
		};
		for(int i=0,ni=my_directory_name_array.length;i<ni;i++)
			if(new File(my_directory_name_array[i]+my_file_name).exists()) 
				return new String[][]{new String[] {my_directory_name_array[i]+my_file_name,charset_name_array[i]}};

		debug_information.println("file mount file NOT exits:	",
				"my_file_name:	"+my_file_name+"		component_name:	"+component_name);
		return null;
	}
	private String[][]charset_file_mount(file_reader fr,engine_kernel ek)
	{
		String my_file_name,my_file_charset;
		if(((my_file_name=fr.get_string())==null)||((my_file_charset=fr.get_string())==null)) {
			debug_information.println(
				"file_mount_array error,file_name==null or file_charset==null,component_name:"+component_name);
			return null;
		}
		if(my_file_name.length()<=0){
			debug_information.println(
				"file_mount_array error(my_file_name.length()<=0):	",
				"component_name:	"+component_name);
			return null;
		}
		my_file_name=file_reader.separator(my_file_name);
		String my_directory_name_array[]= {
				fr.directory_name,
				ek.scene_directory_name						+"assemble_default"+File.separatorChar,
				ek.scene_par.directory_name					+"assemble_default"+File.separatorChar,
				ek.scene_par.extra_directory_name			+"assemble_default"+File.separatorChar,
				ek.system_par.default_parameter_directory	+"assemble_default"+File.separatorChar
		};
		for(int i=0,ni=my_directory_name_array.length;i<ni;i++)
			if(new File(my_directory_name_array[i]+my_file_name).exists()) 
				return new String[][]{new String[] {my_directory_name_array[i]+my_file_name,my_file_charset}};

		debug_information.println("charset_file_mount file NOT exits:	",
				"my_file_name:	"+my_file_name+"component_name:	"+component_name);
		return null;
	}
	private String [][]part_driver_mount(file_reader fr,
			engine_kernel ek,client_request_response request_response)
	{
		String ret_val[][];
		if(driver_number()<=0)  {
			debug_information.println(
				"Part_driver driver assemble_file_name_and_file_charset error(driver_number()<=0):	",
				"component_name:	"+component_name);
			return null;
		}
		if(driver_array[0].component_part==null) {
			debug_information.println(
				"Part_driver driver assemble_file_name_and_file_charset error(driver_array[0].component_part==null):	",
				"component_name:	"+component_name);
			return null;
		}
		if(driver_array[0].component_part.driver==null) {
			debug_information.println(
				"Part_driver driver assemble_file_name_and_file_charset error(driver_array[0].component_part.driver==null):	",
				"component_name:	"+component_name);
			return null;
		}
		if((ret_val=driver_array[0].component_part.driver.assemble_file_name_and_file_charset(
			fr,driver_array[0].component_part,ek,request_response))==null)
		{
			debug_information.println(
				"Part_driver driver assemble_file_name_and_file_charset error(ret_val==null):	",
				"component_name:	"+component_name);
			return null;
		}
		if(ret_val.length<=0) {
			debug_information.println(
				"Part_driver driver assemble_file_name_and_file_charset error(ret_val.length<=0):	",
				"component_name:	"+component_name);
			return null;
		}
		return ret_val;
	}
	private String [][]external_part_driver_mount(change_name change_part_name,
			file_reader fr,part_container_for_part_search pcfps,
			engine_kernel ek,client_request_response request_response)
	{
		String ret_val[][],external_part_name;
		if((external_part_name=fr.get_string())==null) {
			debug_information.println(
				"external_part_driver driver assemble_file_name_and_file_charset error(external_part_name==null):	",
				"component_name:	"+component_name+"		external_part_name:	"+external_part_name);
			return null;
		}
		part par[];
		String search_part_name=change_part_name.search_change_name(external_part_name,external_part_name);
		if((par=pcfps.search_part(search_part_name))==null){
			search_part_name=change_part_name.search_change_name(search_part_name,search_part_name);
			par=pcfps.search_part(search_part_name);
		}
		if(par==null) {
			debug_information.println(
				"external_part_driver driver assemble_file_name_and_file_charset error(par==null):	",
				"component_name:	"+component_name+"		external_part_name:	"+external_part_name);
			return null;
		}
		if(par.length<1) {
			debug_information.println(
				"external_part_driver driver assemble_file_name_and_file_charset error(par.length<1):	",
				"component_name:	"+component_name+"		external_part_name:	"+external_part_name);
			return null;
		}
		if(par[0].driver==null) {
			debug_information.println(
				"external_part_driver driver assemble_file_name_and_file_charset error(par[0].driver==null):	",
				"component_name:	"+component_name+"		external_part_name:	"+external_part_name);
			return null;
		}
		try {
			ret_val=par[0].driver.assemble_file_name_and_file_charset(fr,par[0],ek,request_response);
		}catch(Exception e) {
			debug_information.println(
				"external_part_driver driver assemble_file_name_and_file_charset execption:	",
				"component_name:	"+component_name+"		external_part_name:	"+external_part_name);
			e.printStackTrace();
			return null;
		}
		if(ret_val==null) {
			debug_information.println(
					"external_part_driver driver assemble_file_name_and_file_charset error(ret_val==null):	",
					"component_name:	"+component_name+"		external_part_name:	"+external_part_name);
			return null;
		}
		if(ret_val.length<=0) {
			debug_information.println(
					"external_part_driver driver assemble_file_name_and_file_charset error(ret_val.length<=0):	",
					"component_name:	"+component_name+"		external_part_name:	"+external_part_name);
			return null;
		}
		return ret_val;
	}
	private void append_children(String token_string,file_reader fr,
			boolean part_list_flag,boolean normalize_location_flag,
			change_name change_part_name,component_construction_parameter ccp)
	{
		for(children=null;!(fr.eof());){
			String str,assemble_file_name_array[][]=null;
			if((str=fr.get_string())==null)
				continue;
			switch(str=str.toLowerCase()){
			default:
				int create_child_number;
				try {
					create_child_number=Integer.decode(str);
				}catch(Exception e){
					fr.close();
					debug_information.println("Find error child_number:	",str);
					debug_information.println("File name:	 ",fr.directory_name+fr.file_name);
					debug_information.println("Error:	",e.toString());
					e.printStackTrace();
					create_child_number=0;
				}
				if(create_child_number>0){
					component my_children[]=new component[create_child_number];
					for(int i=0;i<create_child_number;i++)
						my_children[i]=new component(token_string,fr,
								part_list_flag,normalize_location_flag,change_part_name,ccp);
					append_child(my_children);
				}
				return;
			case "token_program":
			case "file_program":
			case "charset_file_program":
				initialization.create_initialization(fr,str);
				continue;
			case "part_list":
				part_list_flag=true;
				continue;
			case "not_part_list":
				part_list_flag=false;
				continue;
			case "normalize_location":
				normalize_location_flag=true;
				continue;
			case "not_normalize_location":
				normalize_location_flag=false;
				continue;
			case "blank_token_string":
				token_string="";
				continue;
			case "relative_token_string":
				if((str=fr.get_string())!=null)
					token_string+=str;
				continue;
			case "absolute_token_string":
				if((str=fr.get_string())!=null)
					token_string=str;
				continue;
			case "change_part_name":
				String file_name_array[]=new String[1];
				if((file_name_array[0]=fr.get_string())==null)
					file_name_array=new String[0];
				else if(file_name_array[0].length()<=0)
					file_name_array=new String[0];
				change_part_name=new change_name(file_name_array,
					ccp.ek.scene_par.change_part_string,fr.get_charset());
				continue;
			case "mount":
				assemble_file_name_array=file_mount(fr,ccp.ek);
				break;
			case "environment_sub_directory_mount":
				str=file_reader.separator(System.getenv(fr.get_string()));
				if(str.charAt(str.length()-1)!=File.separatorChar)
					str+=File.separatorChar;
				fr.insert_string(new String[] {str+ccp.ek.scene_par.scene_sub_directory+fr.get_string()});
				assemble_file_name_array=file_mount(fr,ccp.ek);
				break;
			case "charset_mount":
				assemble_file_name_array=charset_file_mount(fr,ccp.ek);
				break;
			case "environment_sub_directory_charset_mount":
				str=file_reader.separator(System.getenv(fr.get_string()));
				if(str.charAt(str.length()-1)!=File.separatorChar)
					str+=File.separatorChar;
				fr.insert_string(new String[] {str+ccp.ek.scene_par.scene_sub_directory+fr.get_string()});
				assemble_file_name_array=charset_file_mount(fr,ccp.ek);
				break;
			case "part_driver_mount":
				assemble_file_name_array=part_driver_mount(fr,ccp.ek,ccp.request_response);
				break;
			case "external_part_driver_mount":
				assemble_file_name_array=external_part_driver_mount(
						change_part_name,fr,ccp.pcfps,ccp.ek,ccp.request_response);
				break;
			}
			if(assemble_file_name_array==null)
				continue;
			for(int i=0,ni=assemble_file_name_array.length;i<ni;i++) {
				if(assemble_file_name_array[i]==null)
					continue;
				if(assemble_file_name_array[i].length<2)
					continue;
				String assemble_file_name,assemble_file_charset;
				if((assemble_file_name=assemble_file_name_array[i][0])==null)
					continue;
				if((assemble_file_charset=assemble_file_name_array[i][1])==null)
					continue;
				
				class assemble_file_collector extends travel_through_directory
				{
					public String file_name_array[];
					public int file_number;
					public void operate_file(String file_name)
					{
						if(file_name_array.length<=file_number) {
							String bak[]=file_name_array;
							file_name_array=new String[ccp.ek.scene_par.max_child_number+bak.length];
							for(int i=0,ni=bak.length;i<ni;i++)
								file_name_array[i]=bak[i];
						}
						file_name_array[file_number++]=file_reader.separator(file_name);
					}
					public assemble_file_collector()
					{
						file_name_array=new String[ccp.ek.scene_par.max_child_number];
						file_number=0;
						do_travel(file_reader.separator(assemble_file_name),true);
					}
				};
				
				assemble_file_collector afc=new assemble_file_collector();
				
				for(int j=0,nj=afc.file_number;j<nj;j++) {
					file_reader mount_fr=new file_reader(afc.file_name_array[j],assemble_file_charset);
					if(mount_fr.eof()){
						debug_information.println(
								"switch assemble file does not exist:	",	afc.file_name_array[j]);
						debug_information.println("			",				fr.directory_name+fr.file_name);
						mount_fr.close();
						continue;
					}
					debug_information.println("assemble_file_name:	",		afc.file_name_array[j]);
					debug_information.println("assemble_file_charset:	",	assemble_file_charset);
					
					component this_child_comp=null;
					try{
						this_child_comp=new component(
							token_string,mount_fr,part_list_flag,normalize_location_flag,change_part_name,ccp);
					}catch(Exception e) {
						this_child_comp=null;
						debug_information.println("Create scene from ",afc.file_name_array[j]+" fail");
						debug_information.println("			",fr.directory_name+fr.file_name);
						e.printStackTrace();
					}
					if(this_child_comp!=null)
						append_child(new component[] {this_child_comp});
					mount_fr.close();
				}
			}
		}
	}
	public component_core_4(String token_string,file_reader fr,boolean part_list_flag,
			boolean normalize_location_flag,change_name change_part_name,component_construction_parameter ccp)
	{
		super(token_string,fr,part_list_flag,normalize_location_flag,change_part_name,ccp);
		append_children(token_string,fr,part_list_flag,normalize_location_flag,change_part_name,ccp);
	}
}