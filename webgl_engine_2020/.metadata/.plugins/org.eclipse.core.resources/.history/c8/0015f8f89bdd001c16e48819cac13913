function redraw(render)
{
	if(render.terminate_flag)
		return;
	var redraw_object={
			touch_time:			 0,
			interval_length:	 1,
			clear_interval_id:	-1	
	};
	function render_routine()
	{
		if(render.terminate_flag)
			clearInterval(redraw_object.clear_interval_id);
		else{
			var my_current_time=(new Date()).getTime();
			redraw_object.interval_length=my_current_time-redraw_object.touch_time;
			redraw_object.touch_time=my_current_time;
			render.do_render(redraw_object.interval_length);
			
			window.requestAnimationFrame(render_routine);
		}
		return;
	};
	function touch_routine()
	{
		if(render.terminate_flag)
			clearInterval(redraw_object.clear_interval_id);
		else{
			var my_current_time=(new Date()).getTime();
			var my_interval_length=my_current_time-redraw_object.touch_time;
			if(my_interval_length>(render.parameter.engine_touch_time_length/1000000)){
				redraw_object.interval_length=my_interval_length;
				redraw_object.touch_time=my_current_time;
				render.do_render(redraw_object.interval_length);
			}
		}
		return;
	};
	redraw_object.clear_interval_id=setInterval(touch_routine,render.parameter.engine_touch_time_length/1000000);
	
	render_routine();
};

function render_initialization(initialization_url,my_render,user_initialization_function,processs_bar_object)
{
	try{
		var my_ajax=new XMLHttpRequest(),render=my_render;
		my_ajax.onreadystatechange=function()
		{
			if(my_ajax.readyState!=4)
				return;
			if(render.terminate_flag){
				processs_bar_object.process_bar_id=null;
				return;
			}
			if(my_ajax.status!=200){
				processs_bar_object.process_bar_id=null;
				alert("Loading system_initialization_function response status error: "+my_ajax.status.toString());
				alert(initialization_url);
				return;
			};
			
			var response_data					=eval(my_ajax.responseText);
			var sorted_component_name_id		=response_data[0];
			var	part_component_id_and_driver_id	=response_data[1];
			var response_fun_array				=response_data[2];
			var program_data					=response_data[3];
			
			render.process_part_component_id_and_driver_id(
					sorted_component_name_id,part_component_id_and_driver_id);
			
			for(var i=0,ni=program_data.length;i<ni;i++){
				var render_name			=program_data[i][0];
				var permanent_render_id	=program_data[i][1];
				var decode_function;
				try{
					decode_function=(eval("["+(program_data[i][2])+"]"))[0];
				}catch(e){
					decode_function=function(request_type_string,
						part_information,part_material,part_property,buffer_object_data,my_parameter)
					{
						return {
									region_box	:	buffer_object_data.region_box,
									item_size	:	buffer_object_data.region_data.length/buffer_object_data.item_number,
									region_data	:	new Array()
						};
					};
					console.log("Error decode_function:	"+permanent_render_id+"		"+e.toString());
					console.log(program_data[i][2]);
				}
				var attribute_map,draw_function;
				try{
					draw_function=(eval("["+(program_data[i][3])+"]"));
					attribute_map=draw_function[0];
					draw_function=draw_function[1];
				}catch(e){
					attribute_map=[];
					draw_function=function(){};
					console.log("Error draw_function:	"+permanent_render_id+"		"+e.toString());
					console.log(program_data[i][3]);
				}
				
				var vertex_program		=program_data[i][4];
				var fragment_program	=program_data[i][5];
				var geometry_program	=program_data[i][6];
				var tess_control_Program=program_data[i][7];
				var tess_evalueprogram	=program_data[i][8];
				var shader_data			=program_data[i][9];
				
				render.render_program.compile_program(i,
						render_name,
						permanent_render_id,
						decode_function,
						attribute_map,
						draw_function,
						vertex_program,
						fragment_program,
						geometry_program,
						tess_control_Program,
						tess_evalueprogram,
						shader_data);
			};
			render.render_program.create_sorted_render_program_id();
			
			for(var i=0,ni=response_fun_array.length;i<ni;i++){
				if(typeof(response_fun_array[i])!="object")
					continue;
				var component_id=response_fun_array[i].component_id;
				var component_name=response_fun_array[i].component_name;
				var init_function=response_fun_array[i].initialization_function;
				if(typeof(init_function)!="string"){
					console.log("component init_function program is not string:	"+component_name+"		"+component_id);
					console.log(response_fun_array[i].initialization_function);
					continue;
				}
				if((init_function=init_function.trim()).length<=0){
					console.log("component init_function program is empty:	"+component_name+"		"+component_id);
					console.log(response_fun_array[i].initialization_function);
					continue;
				}
				try{
					init_function=(eval("["+init_function+"]"))[0];
				}catch(e){
					console.log("Error compile component init_function:	"
						+component_name+"		"+component_id+"		"+e.toString());
					console.log(response_fun_array[i].initialization_function);
					continue;
				}
				if(typeof(init_function)!="function"){
					console.log("component init_function is NOT FUNCTION:	"
						+component_name+"		"+component_id+"		"+e.toString());
					console.log(response_fun_array[i].initialization_function);
					continue;
				}
				try{
					init_function(component_name,component_id,render);
				}catch(e){
					console.log("Error execute component init_function:	"
						+component_name+"		"+component_id+"		"+e.toString());
					console.log(response_fun_array[i].initialization_function);
					continue;
				}
			}
			if(typeof(user_initialization_function)=="function")
				user_initialization_function(render);
			
			redraw(render);
			
			processs_bar_object.process_bar_id=null;
			
		};
		my_ajax.open("GET",initialization_url,true);
		my_ajax.send(null);
	}catch(e){
		alert("render_initialization fail: "+e.toString());
		alert(initialization_url);
	};
};

function create_webgl_context(my_canvas)
{
	var webgl_context_parameter_array=
	[
		{ 	
			context_name:	"webgl2",
			alpha:true,
			depth:true,
			antialias: true,
    		stencil: true,
    		premultipliedAlpha:true,
    		preserveDrawingBuffer:true,
    		powerPreference:"high-performance",
			failIfMajorPerformanceCaveat:false
		},
		{ 	
			context_name:	"experimental-webgl2",
			alpha:true,
			depth:true,
			antialias: true,
    		stencil: true,
    		premultipliedAlpha:true,
    		preserveDrawingBuffer:true,
    		powerPreference:"high-performance",
			failIfMajorPerformanceCaveat:false
		}
	];	
	
	for(var i=0,ni=webgl_context_parameter_array.length;i<ni;i++){
		try{
			var my_gl=my_canvas.getContext(
					webgl_context_parameter_array[i].context_name,
					webgl_context_parameter_array[i]);
			if(my_gl!=null)
				return my_gl;
		}catch(e){
	    	;
		};
	}
	alert("Could not initialise WebGL2.0, enable WebGL2.0 please");
    return null;
}
function request_create_engine(create_engine_sleep_time_length_scale,
	create_engine_sleep_time_length,create_engine_max_sleep_time_length,
	request_url,my_gl,my_user_name,my_pass_word,my_canvas,my_url,my_language_name,
	my_user_initialization_function,processs_bar_object,process_bar_render)
{
	var my_ajax;
	try{
		my_ajax=new XMLHttpRequest();
		my_ajax.onreadystatechange=function()
		{
			if(my_ajax.readyState!=4)
				return;
			if(my_ajax.status!=200){
				alert("Initialization response status error: "+my_ajax.status.toString());
				return;
			}
			var response_data;
			try{
				response_data=JSON.parse(my_ajax.responseText);
			}catch(e){
				alert("Web server error, or Create Too many scenes:  "+e.toString());
				alert(my_ajax.responseText);
				return;
			}
			if(typeof(response_data)=="object"){
				if(response_data==null){
					alert("Web server error, response_data==null!");
					return;
				}
				var render,initialization_url=response_data.pop();
				render=new construct_render_routine(
					processs_bar_object.process_bar_id,process_bar_render.canvas,process_bar_render.ctx,
					my_gl,my_user_name,my_pass_word,my_canvas,my_url,my_language_name,response_data);
				render_initialization(initialization_url,render,my_user_initialization_function,processs_bar_object);
				
				return;
			}
			if(typeof(response_data)!="boolean"){
				alert("Web server error, response_data type is NOT boolean!");
				return;
			}
			if(response_data){
				alert("Web server error, get_client_interface fail!");
				return;
			}
			var new_create_engine_sleep_time_length=create_engine_sleep_time_length;
			new_create_engine_sleep_time_length*=create_engine_sleep_time_length_scale;
			if(new_create_engine_sleep_time_length>create_engine_max_sleep_time_length){
				alert("Web server error,try too many times to create scene!");
				return;
			}
			setTimeout(
				function()
				{
					request_create_engine(create_engine_sleep_time_length_scale,
						new_create_engine_sleep_time_length,create_engine_max_sleep_time_length,
						request_url,my_gl,my_user_name,my_pass_word,my_canvas,my_url,my_language_name,
						my_user_initialization_function,processs_bar_object,process_bar_render);
				},create_engine_sleep_time_length);
			return;
		}
		my_ajax.open("GET",request_url+"&process_bar="+processs_bar_object.process_bar_id,true);
		my_ajax.send(null);
	}catch(e){
		alert("request_create_engine fail!");
		alert(e.toString());
	}
}

function render_show_process_bar(process_bar_url,processs_bar_object,process_bar_render,my_canvas)
{
	do{
		if(typeof(processs_bar_object.process_bar_id)=="number")
			if(typeof(processs_bar_object.show_process_bar_interval)=="number")
				if(processs_bar_object.process_bar_id>=0)
					if(processs_bar_object.show_process_bar_interval>0)
						break;
		process_bar_render.destroy();
		return;
	}while(false);
	
	var my_ajax;
	try{
		my_ajax=new XMLHttpRequest();
		my_ajax.onreadystatechange=function()
		{
			if(my_ajax.readyState!=4)
				return;
			if(my_ajax.status==200)
				try{
					var response_data=JSON.parse(my_ajax.responseText);
					setTimeout(
						function()
						{
							render_show_process_bar(process_bar_url,processs_bar_object,process_bar_render,my_canvas);
						},processs_bar_object.show_process_bar_interval);
					process_bar_render.set_process_bar_data(response_data.caption,
								response_data.current,		response_data.max,
								response_data.time_length,	response_data.engine_time_length,
								response_data.time_unit,	my_canvas);
					return;
				}catch(e){
					;
				}
			process_bar_render.destroy();
			return;
		};
		my_ajax.open("GET",process_bar_url+"&process_bar="+processs_bar_object.process_bar_id,true);
		my_ajax.send(null);
	}catch(e){
		process_bar_render.destroy();
		alert("render_show_process_bar fail!");
		alert(e.toString());
	};
}

function render_main(create_engine_sleep_time_length_scale,
	create_engine_sleep_time_length,create_engine_max_sleep_time_length,
	my_canvas,my_url,my_user_name,my_pass_word,my_language_name,
	my_scene_name,my_link_name,my_initialization_parameter,
	my_user_initialization_function,my_user_progress_bar_function)
{
	my_canvas		=(typeof(my_canvas			)!="string")?my_canvas	 :(document.getElementById(my_canvas));
	my_user_name	=(typeof(my_user_name		)!="string")?"NoName"	 :(my_user_name.trim());
	my_pass_word	=(typeof(my_pass_word		)!="string")?"NoPassword":(my_pass_word.trim());
	my_language_name=(typeof(my_language_name	)!="string")?"english"	 :(my_language_name.trim());
	my_scene_name	=(typeof(my_scene_name		)!="string")?""			 :(my_scene_name.trim());
	my_link_name	=(typeof(my_link_name		)!="string")?""			 :(my_link_name.trim());
	
	var process_bar_url=my_url+"?channel=process_bar&command=data&language="+my_language_name;
	var request_url=my_url+"?channel=creation&command=creation&language="	+my_language_name;
	request_url+="&user_name="	+my_user_name		+"&pass_word="	+my_pass_word;
	request_url+="&scene_name="	+my_scene_name		+"&link_name="	+my_link_name;
	if(typeof(my_initialization_parameter)=="object")
		if(typeof(my_initialization_parameter.length)=="number")
			for(var i=0,ni=my_initialization_parameter.length;i<ni;i++){
				var parameter_item	=my_initialization_parameter[i];
				var parameter_name	=parameter_item[0].toString().trim();
				var parameter_value	=parameter_item[1].toString().trim();
				request_url+="&"+parameter_name+"="+parameter_value;
			};

	var my_gl;
	if((my_gl=create_webgl_context(my_canvas))==null)
    	return; 
	var max_draw_buffers=my_gl.getParameter(my_gl.MAX_DRAW_BUFFERS); 
	var max_color_attatchments=my_gl.getParameter(my_gl.MAX_COLOR_ATTACHMENTS);
	if((max_draw_buffers<4)||(max_color_attatchments<4)){
		alert(	  "MAX_DRAW_BUFFERS is "		+(max_draw_buffers.toString())
				+",MAX_COLOR_ATTACHMENTS is "	+(max_color_attatchments.toString())
				+",they are to small!,they must be equal or greater than 4");
    	return;
	};
	
	var my_ajax;
	try{
		my_ajax=new XMLHttpRequest();
		my_ajax.onreadystatechange=function()
		{
			if(my_ajax.readyState!=4)
				return;
			if(my_ajax.status!=200){
				alert("Create process bar response status error: "+my_ajax.status.toString());
				return;
			};
			
			var processs_bar_object=JSON.parse(my_ajax.responseText);
			var process_bar_render=new construct_process_bar(my_gl,my_user_progress_bar_function,
					my_canvas.width,my_canvas.height,processs_bar_object.show_process_bar_interval);
			render_show_process_bar(process_bar_url,processs_bar_object,process_bar_render,my_canvas);
			request_create_engine(create_engine_sleep_time_length_scale,
				create_engine_sleep_time_length,create_engine_max_sleep_time_length,
				request_url,my_gl,my_user_name,my_pass_word,my_canvas,my_url,my_language_name,
				my_user_initialization_function,processs_bar_object,process_bar_render);
			return;
		};
		my_ajax.open("GET",my_url+"?channel=process_bar&command=request",true);
		my_ajax.send(null);
	}catch(e){
		alert("System Initialization fail!");
		alert(e.toString());
	};
};
