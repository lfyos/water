[
	
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,	part_id,
			render_buffer_id,	component_data_array,	project_matrix,			view_port,	do_render_number,
			render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var shader_data						=shader_object.shader_data;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	var mouse_inside_canvas_flag		=render.event_listener.mouse_inside_canvas_flag;
	
	function pixels_to_id(pixels)
	{
		var ids=new Array(Math.floor(pixels.length/4));
		for(var i=0,j=0,n=ids.length;i<n;i++,j+=4)
			ids[i]=render.utility.decode_integer_from_pixel(
						pixels[j+0],pixels[j+1],pixels[j+2],pixels[j+3]);
		return ids;
	};

	function caculate_triangle_id(component_id,width,height,render)
	{
		var pixels=new Uint8Array(4*width*height);
		
		gl.readBuffer(gl.COLOR_ATTACHMENT0);
		gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,pixels);
		var component_id_array=pixels_to_id(pixels);
						
		gl.readBuffer(gl.COLOR_ATTACHMENT1);
		gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,pixels);
		var body_id_array=pixels_to_id(pixels);
						
		gl.readBuffer(gl.COLOR_ATTACHMENT2);
		gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,pixels);
		var face_id_array=pixels_to_id(pixels);
					
		gl.readBuffer(gl.COLOR_ATTACHMENT3);
		gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,pixels);
		var vertex_id_array=pixels_to_id(pixels);
		
		var fix_render_driver_id=render.component_event_processor[component_id].fix_render_driver_id;
		
		for(var i=0,ni=component_id_array.length;i<ni;i++){		
			var my_component_id,my_body_id,my_face_id,my_triangle_id;
		
			if((my_component_id=component_id_array[i])<0)
				continue;
			if((my_body_id=body_id_array[i])<0)
				continue;
			if((my_face_id=face_id_array[i])<0)
				continue;
			if((my_triangle_id=vertex_id_array[i])<0)
				continue;
			my_triangle_id=Math.floor(my_triangle_id/3.0);
			
			var my_render_id_and_part_id=render.component_render_id_and_part_id[my_component_id];
			var my_fix_render_driver_id	=fix_render_driver_id[my_component_id];
			if(my_fix_render_driver_id<0)
				my_fix_render_driver_id=0;
			if(my_fix_render_driver_id>=my_render_id_and_part_id.length)
				my_fix_render_driver_id=my_render_id_and_part_id.length-1;
			if(my_fix_render_driver_id<0)
				continue;
				
			my_render_id_and_part_id=my_render_id_and_part_id[my_fix_render_driver_id];
			var my_render_id	=my_render_id_and_part_id[0];
			var my_part_id		=my_render_id_and_part_id[1];
			var my_buffer_id	=my_render_id_and_part_id[2];
			
			var p=render.component_event_processor[component_id].triangle_array;
			
			for(var j=p.length;j<=my_render_id;j++)
				p[j]=new Array();
			p=p[my_render_id];
			
			for(var j=p.length;j<=my_part_id;j++)
				p[j]=new Array();
			p=p[my_part_id];

			for(var j=p.length;j<=my_body_id;j++)
				p[j]=new Array();				
			p=p[my_body_id];
			
			for(var j=p.length;j<=my_face_id;j++)
				p[j]=new Array();
			p=p[my_face_id];
			
			for(var j=p.length;j<=my_triangle_id;j++)
				p[j]=new Array();
			p=p[my_triangle_id];
			
			for(var j=p.length;j<=my_buffer_id;j++)
				p[j]=false;
			if(p[my_buffer_id])
				continue;
			p[my_buffer_id]=true;
			render.component_event_processor[component_id].triangle_number++;

		};	
	};

	function clear_triangle(my_component_id)
	{
		render.component_event_processor[my_component_id].triangle_array=new Array();
		render.component_event_processor[my_component_id].triangle_number=0;
	};
	function start_trace_primitive(my_component_id,my_precision,my_response_fun,my_error_fun)
	{
		clear_triangle(my_component_id);
		render.call_server_component(my_component_id,"all",
			[	["operation","start_trace_primitive"],
				["width",	Math.round(render.canvas.width *my_precision)],
				["height",	Math.round(render.canvas.height*my_precision)]
			],
			function(response_data,render)
			{
				clear_triangle(my_component_id);
				if(typeof(my_response_fun)=="function")
					my_response_fun(response_data,render);
			},
			function(type_id,render,e,responseText)
			{
				clear_triangle(my_component_id);
				if(typeof(my_error_fun)=="function")
					my_error_fun(type_id,render,e,responseText);
			});
	};
	function collect_trace_primitive(my_component_id,my_response_fun)
	{
		var str_content="",p=render.component_event_processor[my_component_id].triangle_array;
		for(var render_id=0,render_number=p.length;render_id<render_number;render_id++)
			for(var part_id=0,part_number=p[render_id].length;part_id<part_number;part_id++)
				for(var body_id=0,body_number=p[render_id][part_id].length;body_id<body_number;body_id++)
					for(var face_id=0,face_number=p[render_id][part_id][body_id].length;face_id<face_number;face_id++)
						for(var triangle_id=0,triangle_number=p[render_id][part_id][body_id][face_id].length;
									triangle_id<triangle_number;triangle_id++)
							for(var data_buffer_id=0,data_buffer_number=p[render_id][part_id][body_id][face_id][triangle_id].length;
									data_buffer_id<data_buffer_number;data_buffer_id++)
								if(p[render_id][part_id][body_id][face_id][triangle_id][data_buffer_id])
									str_content+=render_id+"	"+part_id+"	"+body_id+"	"+face_id+"	"+triangle_id+"	"+data_buffer_id+"\n";

		clear_triangle(my_component_id);

		var url=render.create_component_request_string(my_component_id,"all",[["operation","collect_trace_primitive"]]);
		render.upload_string(str_content,url,my_response_fun);
		return;
	};
	function trace_primitive_download_url(my_component_id,file_type)
	{
		return render.create_component_request_string(my_component_id,"all",
						[["operation","download_trace_primitive"],["file_type",file_type]]);
	};

	if(method_id!=0)
		return;
	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id=component_data_array[i];
		
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
			
		var component_id					=data_buffer[buffer_id][0][0];
		var target_id						=data_buffer[buffer_id][0][1];
		var component_fix_render_driver_id	=data_buffer[buffer_id][0][2];

		if(typeof(render.component_event_processor[component_id])=="undefined"){
			render.component_event_processor[component_id]=new Object();
			render.component_event_processor[component_id].triangle_array=new Array();
			render.component_event_processor[component_id].triangle_number=0;
			render.component_event_processor[component_id].start_trace_primitive=start_trace_primitive;
			render.component_event_processor[component_id].collect_trace_primitive=collect_trace_primitive;
			render.component_event_processor[component_id].trace_primitive_download_url=trace_primitive_download_url;
		}
		render.component_event_processor[component_id].fix_render_driver_id=component_fix_render_driver_id;
		
		if(target_id>=0)
			if(typeof(render.target_processor[target_id])=="undefined"){
				render.target_processor[target_id]=new Object();
				render.target_processor[target_id].after_target_render=function(
					target_id,render_target_id,width,height,render_target_number,render)
				{
					caculate_triangle_id(component_id,width,height,render);
				};
			}
	}
}
