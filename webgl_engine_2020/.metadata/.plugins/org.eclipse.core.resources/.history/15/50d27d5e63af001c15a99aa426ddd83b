[
	[
		"vertex_location"
	]
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,	part_id,
			render_buffer_id,	component_data_array,	project_matrix,			view_port,	do_render_number,
			render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var shader_data						=shader_object.shader_data;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;
	
	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	if(do_render_number.engine_render==0){
		shader_program.sampler=gl.createSampler();
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MAG_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MIN_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_S,		gl.MIRRORED_REPEAT);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_T,		gl.MIRRORED_REPEAT);
		
		gl.uniform1i(gl.getUniformLocation(shader_program,"texture_sampler"),0);
		shader_program.par_uniform=gl.getUniformLocation(shader_program,"par");
	}
	
	switch(method_id){
	case 0:
	case 1:
		break;
	default:
		return;
	}

	part_buffer_object=part_buffer_object.face;

	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id				=component_data_array[i][0];
		var main_display_target_flag=component_data_array[i][1];
		var component_id			=part_component_id_and_driver_id[buffer_id][0];
		var driver_id				=part_component_id_and_driver_id[buffer_id][1];
		
		var ep;
		if(typeof(ep=render.component_event_processor[component_id])!="object")
			continue;
		var model_matrix_data=component_location.get_component_location(component_id);
		
		while(data_buffer[buffer_id].length>1){
			data_buffer[buffer_id].shift();
			ep.mousedown_flag=false;
			ep.location_modify_flag=false;
			ep.hightlight=[-1,-1,-1,-1];
			ep.mouse_x=render.view.x;
			ep.mouse_y=render.view.y;
			ep.mouse_x0=render.view.x;
			ep.mouse_y0=render.view.y;
		}
		
		if(typeof(ep.pickupenter_component)!="function"){
			ep.mousedown_flag=false;
			ep.location_modify_flag=0;
			ep.hightlight=[-1,-1,-1,-1];
			ep.mouse_x =render.view.x;
			ep.mouse_y =render.view.y;
			ep.mouse_x0=render.view.x;
			ep.mouse_y0=render.view.y;
			
			ep.x=0;
			ep.y=0;
			ep.id_base=0;

			ep.pickupenter_component=function(this_pickup,old_pickup,render)
			{

			}
			ep.pickupleave_component=function(this_pickup,old_pickup,render)
			{
				ep.mousedown_flag=false;
			}
			ep.pickupmousedown=function(event,component_id,render)
			{
				switch(event.button){
				case 0:
					var ep=render.component_event_processor[component_id];
					ep.mousedown_flag=true;
					ep.mouse_x =render.view.x;
					ep.mouse_y =render.view.y;
					ep.mouse_x0=render.view.x;
					ep.mouse_y0=render.view.y;
					break;
				case 2:
					render.call_server_component(component_id,"all",[["operation","hide"]]);
					break;
				default:
					break;
				}
				return true;
			}
			ep.pickupmousemove=function(event,component_id,render)
			{
				var ep=render.component_event_processor[component_id];
				if(ep.mousedown_flag){
					ep.x=render.pickup.depth;
					ep.y=render.pickup.value;
				}
				return true;
			}
			ep.pickupmouseup=function(event,component_id,render)
			{
				var ep=render.component_event_processor[component_id];
				switch(event.button){
				case 0:
					if(!(ep.mousedown_flag))
						break;
					ep.mousedown_flag=false;
					
					if(typeof(ep.pickupmouseselect)!="function")
						break;
					var dx=ep.mouse_x0-render.view.x;
					var dy=ep.mouse_y0-render.view.y;
					if((dx*dx+dy*dy)>(2.0*0.01*0.01))
						break;
					ep.x=render.pickup.depth;
					ep.y=render.pickup.value;
					
					ep.pickupmouseselect(event,component_id,render);
					
					break;
				case 2:
					break;
				default:
					break;
				}
				return true;
			}
			ep.pickupmousewheel=function(event,component_id,render)
			{
				var mouse_wheel_number=0;
				if(typeof(event.wheelDelta)=="number")
					mouse_wheel_number+=event.wheelDelta/200.0;		//for chrome,opera
				else if(typeof(event.detail)=="number")
					mouse_wheel_number-=event.detail/5;				//for firefox
				else
					return;
				var skip_array=[1,	5,	10,	50,	100,	500,	1000,	5000];
	
				var ep=render.component_event_processor[component_id];
				ep.id_base-=mouse_wheel_number*skip_array[(event.ctrlKey?1:0)+(event.shiftKey?2:0)+(event.altKey?4:0)];
				ep.id_base=(ep.id_base<0)?0:Math.round(ep.id_base);
				
				return true;
			}
			ep.destroy=function(gl,ep,component_id)
			{
				if(typeof(ep.texture_object)=="object")
					if(ep.texture_object!=null)
						gl.deleteTexture(ep.texture_object);
				ep.texture_object=null;
	
				ep.pickupenter_component=null;
				ep.pickupleave_component=null;
				ep.pickupmousedown=null;
				ep.pickupmousemove=null;
				ep.pickupmouseup=null;
				ep.pickupmousewheel=null;
			}
		}

		if(main_display_target_flag){
			if((render.view.x!=ep.mouse_x)&&(render.view.y!=ep.mouse_y)){
				if((ep.mousedown_flag)&&(render.event_listener.mouse_down_flag_array[0])){
					var adjust_x_scale =view_port.target_width	/view_port.viewport_height;
					var adjust_y_scale =view_port.target_height	/view_port.viewport_height;
					data_buffer[buffer_id][0][0]+=(render.view.x-ep.mouse_x)*adjust_x_scale;
					data_buffer[buffer_id][0][1]+=(render.view.y-ep.mouse_y)*adjust_y_scale;
					ep.location_modify_flag=true;
				}
				ep.mouse_x=render.view.x;
				ep.mouse_y=render.view.y;
			}
		}

		var i_i_data=instance_initialize_data[buffer_id];
		
		if(ep.location_modify_flag)
			if(!(render.event_listener.mouse_down_flag_array[0])){
				render.call_server_component(component_id,driver_id,[["operation","show"],
					["x0",data_buffer[buffer_id][0][0]],["y0",data_buffer[buffer_id][0][1]]]);
				ep.location_modify_flag=false;
			}

		if(typeof(ep.texture_object)=="undefined")
			ep.texture_object=utility.load_texture_image((typeof(i_i_data)=="object")?null:i_i_data);
				
		if(typeof(ep.update_canvas_texture)=="function")
			if(ep.update_canvas_texture(render_id,part_id,buffer_id,component_id,driver_id,
				i_i_data,part_material,shader_data,render))
					continue;
		
		var background=(typeof(i_i_data)=="object")?(i_i_data.background):(part_material[0].background);
		gl.uniformMatrix4fv(shader_program.par_uniform,false,new Float32Array([	
			data_buffer[buffer_id][0][0],	data_buffer[buffer_id][0][1],	data_buffer[buffer_id][0][2],	data_buffer[buffer_id][0][3],
			background[0],					background[1],					background[2],					background[3],
			ep.hightlight[0],				ep.hightlight[1],				ep.hightlight[2],				ep.hightlight[3],
			0,								0,								
			shader_data[0].render_depth_base+shader_data[0].render_depth_step*data_buffer[buffer_id][0][4],	1]));

		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D,ep.texture_object);
		gl.bindSampler(0,shader_program.sampler);
		
		for(var j=0,nj=part_buffer_object.region_data.length;j<nj;j++){
			gl.bindVertexArray(part_buffer_object.region_data[j].vertex_array_object[0]);
			gl.drawArrays(gl.TRIANGLES,0,part_buffer_object.region_data[j].item_number);
		}
		gl.bindVertexArray(null);
	}
}
