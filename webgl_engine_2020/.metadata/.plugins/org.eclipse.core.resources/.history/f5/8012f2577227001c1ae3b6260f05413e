package driver_text;

import kernel_camera.camera_result;
import kernel_common_class.jason_string;
import kernel_component.component;
import kernel_component.component_collector;
import kernel_driver.instance_driver;
import kernel_engine.client_information;
import kernel_engine.engine_kernel;
import kernel_transformation.point;


public class extended_instance_driver extends instance_driver
{
	private int direction_code;
	
	public void destroy()
	{
		super.destroy();
	}
	public extended_instance_driver(component my_comp,int my_driver_id)
	{
		super(my_comp,my_driver_id);
		direction_code=0;
	}
	public void response_init_data(engine_kernel ek,client_information ci)
	{
	}
	public boolean check(int render_buffer_id,int parameter_channel_id,int data_buffer_id,
			engine_kernel ek,client_information ci,camera_result cr,component_collector collector)
	{
		if(!(cr.target.main_display_target_flag))
			if(!(cr.target.selection_target_flag))
				return true;
		
		text_item dt=((extended_component_driver)(comp.driver_array[driver_id])).get_text_item();
		if(dt.display_information==null)
			return true;
		if(dt.display_information.length<=0)
			return true;
		if(dt.view_or_model_coordinate_flag) {
			if(direction_code!=0){
				direction_code=0;
				update_component_parameter_version(0);
			}
			return false;
		}
		
		int new_direction_code=0;
		point p0=comp.absolute_location.multiply(new point(0,0,0));
		point dx=comp.absolute_location.multiply(new point(1,0,0)).sub(p0);
		point dy=comp.absolute_location.multiply(new point(0,1,0)).sub(p0);
		point dz=comp.absolute_location.multiply(new point(0,0,1)).sub(p0);
		
		new_direction_code+=(cr.right_direct.dot(dx)<0)?1:0;
		new_direction_code+=(cr.   up_direct.dot(dy)<0)?2:0;

		if(direction_code!=new_direction_code){
			direction_code=new_direction_code;
			update_component_parameter_version(0);
		}
		return (Math.abs(dz.expand(1).dot(cr.to_me_direct))<0.25)?true:false;
	}
	public void create_render_parameter(
			int render_buffer_id,int parameter_channel_id,int data_buffer_id,
			engine_kernel ek,client_information ci,camera_result cr)
	{
		ci.request_response.print(data_buffer_id);
	}
	public void create_component_parameter(engine_kernel ek,client_information ci)
	{
		text_item dt=((extended_component_driver)(comp.driver_array[driver_id])).get_text_item();
		String my_display_information[];
		if((my_display_information=dt.display_information)==null)
			my_display_information=new String[] {};
		
		ci.request_response.print("[[");
		for(int i=0,ni=my_display_information.length;i<ni;i++)
			ci.request_response.print((i==0)?"":",",jason_string.change_string(my_display_information[i]));
		ci.request_response.print("],",new int 		[]{dt.canvas_width,		dt.canvas_height}).
							print(",", new double 	[]{dt.text_square_width,dt.text_square_height}).
							print(",",dt.view_or_model_coordinate_flag?1:0).
							print(",",direction_code).
							print("]");
	}
	public String[] response_event(int parameter_channel_id,engine_kernel ek,client_information ci)
	{
		return null;
	}
}
