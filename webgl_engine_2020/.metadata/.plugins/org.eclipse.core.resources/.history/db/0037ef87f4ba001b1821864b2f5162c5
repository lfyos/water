function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_program					=render.render_program.render_program[render_id].shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	
	function init(component_id)
	{
		render.component_call_processor[component_id]=new Object();
		
		//operating mount
		render.component_call_processor[component_id].mount_forward=function(time_length)
		{
			render.call_server_component(component_id,"all",
				[["operation","movement"],["move_method","continue"],
				 ["direct","forward"],["time",time_length]]);
		};
		render.component_call_processor[component_id].mount_backward=function(time_length)
		{
			render.call_server_component(component_id,"all",
				[["operation","movement"],["move_method","continue"],
				 ["direct","backward"],["time",time_length]]);
		};
		render.component_call_processor[component_id].mount_stop=function()
		{
			render.call_server_component(component_id,"all",
				[["operation","movement"],["move_method","stop"]]);
		};
		render.component_call_processor[component_id].mount_reset=function()
		{
			render.call_server_component(component_id,"all",
				[["operation","movement"],["move_method","reset"]]);
		};
		render.component_call_processor[component_id].mount_edit_url=function(flag,id)
		{
			if(typeof(flag)!="boolean")
				flag=true;
			var par=[["operation","design"],["move_method","edit"],["flag",flag?"true":"false"]];
			if(typeof(id)!="undefined")
				par.push(["id",id]);
			return render.create_component_request_string(component_id,"all",par);
		};
		render.component_call_processor[component_id].mount_jason_url=function()
		{
			return render.create_component_request_string(
				component_id,"all",[["operation","design"],["move_method","jason"]]);
		};
		render.component_call_processor[component_id].mount_search_url=function()
		{
			return render.create_component_request_string(
				component_id,"all",[["operation","movement"],["move_method","search"]]);
		};
		render.component_call_processor[component_id].set_mount_speed=function(speed)
		{
			render.call_server(render.url_and_channel+"&command=modifier&method=set_speed&speed="+speed);
		};
		render.component_call_processor[component_id].set_mount_precision=function(precision)
		{
			render.call_server_component(component_id,"all",
				[["operation","parameter"],["parameter","set_precision"],["value",precision]]);
		};
		
		// designing mount	
		render.component_call_processor[component_id].get_component_location=function(my_component,my_coordinate_flag,success_fun,error_fun)
		{
			var par=[["operation","design"],["move_method","get_location"]];
			switch(typeof(my_component)){
			case "number":
				par.push(["component_id",	my_component]);
				break;
			case "string":
				par.push(["component_name",	my_component]);
				break;
			}
			switch(my_coordinate_flag){
			case 0:
				par.push(["coordinate","component"]);
				break;
			case 1:
				par.push(["coordinate","camera"]);
				break;
			case 2:
				par.push(["coordinate","view"]);
				break;
			default:
				par.push(["coordinate","unknown"]);
				break;
			}
			render.call_server_component(component_id,"all",par,success_fun,error_fun);
			return;
		};
		
		render.component_call_processor[component_id].set_component_location=function(my_component,my_coordinate_flag,mx,my,mz,rx,ry,rz)
		{
			var par=[["operation","design"],["move_method","set_location"],
					 ["mx",mx],["my",my],["mz",mz],["rx",rx],["ry",ry],["rz",rz]];
			switch(typeof(my_component)){
			case "number":
				par.push(["component_id",	my_component]);
				break;
			case "string":
				par.push(["component_name",	my_component]);
				break;
			}
			switch(my_coordinate_flag){
			case 0:
				par.push(["coordinate","component"]);
				break;
			case 1:
				par.push(["coordinate","camera"]);
				break;
			case 2:
				par.push(["coordinate","view"]);
				break;
			default:
				par.push(["coordinate","unknown"]);
				break;
			}
			render.call_server_component(component_id,"all",par);
		};
		render.component_call_processor[component_id].add_movement_point=function(my_component,my_coordinate_flag,mx,my,mz,rx,ry,rz,t,parameter,fun)
		{
			var par=[["operation","design"],["move_method","add_point"],
					 ["mx",mx],["my",my],["mz",mz],["rx",rx],["ry",ry],["rz",rz],["t",t]];
	
			switch(typeof(my_component)){
			case "number":
				par.push(["component_id",	my_component]);
				break;
			case "string":
				par.push(["component_name",	my_component]);
				break;
			}
			switch(my_coordinate_flag){
			case 0:
				par.push(["coordinate","component"]);
				break;
			case 1:
				par.push(["coordinate","camera"]);
				break;
			case 2:
				par.push(["coordinate","view"]);
				break;
			default:
				par.push(["coordinate","unknown"]);
				break;
			}
			for(var i=0,ni=parameter.length;i<ni;i++){
				if(typeof(parameter[i])=="undefined")
					break;
				if(parameter[i]==null)
					break;
				par.push(["parameter_"+i.toString(),parameter[i]]);
			}
			render.call_server_component(component_id,"all",par,fun);
		}
		render.component_call_processor[component_id].delete_movement_point=function(fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","delete_point"]],fun);
		}
		render.component_call_processor[component_id].add_movement=function(my_component,start_flag,terminate_flag,fun)
		{
			var par=[["operation","design"],["move_method","add_movement"],
				 ["start",start_flag?"true":"false"],
				 ["terminate",terminate_flag?"true":"false"]];
			switch(typeof(my_component)){
			case "number":
				par.push(["component_id",	my_component]);
				break;
			case "string":
				par.push(["component_name",	my_component]);
				break;
			}
			render.call_server_component(component_id,"all",par,fun);
		}	
		render.component_call_processor[component_id].save_movement=function()
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","save"]]);
		}
		render.component_call_processor[component_id].reload_movement=function()
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","reload"]]);
		}
		render.component_call_processor[component_id].retreat_movement=function()
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","retreat"]]);
		}
		render.component_call_processor[component_id].update_node_name=function(id,node_name,value)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","update"],
				 ["id",id],["update","node_name"],
				 ["value",encodeURIComponent(encodeURIComponent(value))]]);
		}
		render.component_call_processor[component_id].update_node_name_sound_description=function(id,node_name,sound_file_name,description)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","update"],["id",id],
				 ["node_name",			encodeURIComponent(encodeURIComponent(node_name))],
				 ["sound_file_name",	encodeURIComponent(encodeURIComponent(sound_file_name))],
				 ["description",		encodeURIComponent(encodeURIComponent(description))]]);
		}
		render.component_call_processor[component_id].get_node_name_sound_description=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","get"],["id",id]],fun);
		}
		render.component_call_processor[component_id].delete_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","delete"],["id",id]],fun);
		}
		render.component_call_processor[component_id].reverse_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","reverse"],["id",id]],fun);
		}
		render.component_call_processor[component_id].moveup_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","up"],["id",id]],fun);
		}
		render.component_call_processor[component_id].movedown_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","down"],["id",id]],fun);
		}
		render.component_call_processor[component_id].fromchild_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","fromchild"],["id",id]],fun);
		}
		render.component_call_processor[component_id].frombuffer_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","frombuffer"],["id",id]],fun);
		}
		render.component_call_processor[component_id].tobuffer_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","tobuffer"],["id",id]],fun);
		}
		render.component_call_processor[component_id].mount_tag_url=function(id,windows)
		{
			return render.create_component_request_string(component_id,"all",
				[["operation","design"],["move_method","tag"],["id",id],["windows",windows]]);
		}
		render.component_call_processor[component_id].todesignbuffer_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","todesignbuffer"],["id",id]],fun);
		}
		render.component_call_processor[component_id].follow_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","follow"],["id",id]],fun);
		}
		render.component_call_processor[component_id].view_direction_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","view_direction"],["id",id]],fun);
		}
		render.component_call_processor[component_id].view_box_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","view_box"],["id",id]],fun);
		}
		render.component_call_processor[component_id].locate_camera_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","locate_camera"],["id",id]],fun);
		}
		render.component_call_processor[component_id].select_component_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","select_component"],["id",id]],fun);
		}
		render.component_call_processor[component_id].sequence_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","sequence"],["id",id]],fun);
		}
		render.component_call_processor[component_id].synchronization_movement=function(id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","synchronization"],["id",id]],fun);
		}
		render.component_call_processor[component_id].mount_extract_url=function(my_component_id)
		{
			if(typeof(my_component_id)=="undefined")
				my_component_id=render.pickup.component_id;
			return render.create_component_request_string(component_id,"all",
				[["operation","design"],["move_method","extract"],["component_id",my_component_id]]);
		}
		render.component_call_processor[component_id].fromdesignbuffer_movement=function(buffer_id,my_component_id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","fromdesignbuffer"],
				 ["buffer",buffer_id],["component",my_component_id]],fun);
		}
		render.component_call_processor[component_id].deletedesignbuffer_movement=function(buffer_id,fun)
		{
			render.call_server_component(component_id,"all",
				[["operation","design"],["move_method","deletedesignbuffer"],
				 ["buffer",buffer_id]							],fun);
		}
	}

	if(method_id!=0)
		return;
	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id=component_data_array[i];
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
		var component_id=data_buffer[buffer_id][0];
		
		if(typeof(render.component_call_processor[component_id])!="object")
			init(component_id);
	}
}
