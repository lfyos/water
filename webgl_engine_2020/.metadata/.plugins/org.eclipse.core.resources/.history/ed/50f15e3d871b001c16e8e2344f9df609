[
	[
		"vertex_location",
		"",
		"",
		"vertex_id",
		"extra_vertex_id"
	]
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_program					=render.render_program.render_program[render_id].shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;
	
	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	
	if(do_render_number.engine_render==0){
		shader_program.model_matrix_uniform	=gl.getUniformLocation(shader_program,"model_matrix");
		shader_program.par_uniform			=gl.getUniformLocation(shader_program,"par");
	}
	function caculate_matrix(view_x,view_y)
	{
		var camera_matrix_data	=component_location.get_component_location_routine(camera_component_id);
		
		var distance			=camera_object_parameter[camera_id].distance;
		var half_fovy_tanl		=camera_object_parameter[camera_id].half_fovy_tanl;
		
		var vertical_distance	=distance*half_fovy_tanl;
		
		var part_scale			=Math.sqrt(vertical_distance*vertical_distance);

		var offset_x			=view_x*vertical_distance;
		var offset_y			=view_y*vertical_distance;
		
		var model_matrix_data	=computer.matrix_multiplication(
				camera_matrix_data,computer.create_move_rotate_matrix(offset_x,offset_y,0,0,0,0));

		return [model_matrix_data,part_scale];
	};
	
	function construct_mouse_event_listener(component_id,render_instance)
	{
		if(component_id<0)
			return;
		if(typeof(render_instance.component_event_processor[component_id])=="object")
			return;

		var ep=new Object();
		ep.alf="0090";

		ep.pickupcontextmenu=function(event,my_component_id,my_render_instance)
		{
			var my_ep=my_render_instance.component_event_processor[my_component_id];
			var alf=parseFloat(my_ep.alf);
			
			if(event.ctrlKey)
				if(event.altKey)
					alf=alf/1000.0;
				else
					alf=alf/100.0;
			else
				if(event.altKey)	
					alf=alf/10.0;
				else
					alf=alf/1.0;
			
			my_render_instance.call_server_component(my_component_id,0,
					[		["operation",	"body_face_rotate"],
							["coordinate",	"global"],
					    	["type",		event.shiftKey?"true":"false"],
					    	["alf",			alf.toString()]
					]);
			return true;
		};
		ep.pickupdblclick=function(event,my_component_id,my_render_instance)
		{
			var my_ep=my_render_instance.component_event_processor[my_component_id];
			my_render_instance.call_server_component(my_component_id,0,
					[		["operation",	"body_face_direct"],
							["coordinate",	"global"],
					    	["type",		event.shiftKey?"true":"false"]
					]);
			return true;
		};
		ep.pickupkeydown=function(event,my_component_id,my_render_instance)
		{
			var my_ep=my_render_instance.component_event_processor[my_component_id];
			
			var alf=parseFloat(my_ep.alf);
			alf=(event.shiftKey||event.ctrlKey)?(-alf):alf;
			if(event.altKey)
				alf=alf/10.0;
			alf*=Math.PI/180.0;

			switch(event.keyCode){
			case 48:	//	0-9
			case 49:
			case 50:
			case 51:
			case 52:
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
				my_ep.alf=my_ep.alf+(event.keyCode-48).toString();
				my_ep.alf=my_ep.alf.substring(my_ep.alf.length-3,my_ep.alf.length);
				break;
			case 8:		//backspace
				my_render_instance.call_server_component(my_component_id,"all",[["operation","retreat"]]);
				return true;
			case 82://R
				my_render_instance.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","1"],						["y0","0"],["z0","0"],
					    	["x1",Math.cos(alf).toString()],["y1","0"],["z1",Math.sin(alf).toString()]
					]);
				return true;
			case 76://L
				my_render_instance.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","1"],						 ["y0","0"],["z0","0"],
					    	["x1",Math.cos(-alf).toString()],["y1","0"],["z1",Math.sin(-alf).toString()]
					]);
				return true;
			case 85://U
				my_render_instance.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","0"],["y0","0"],						["z0","1"],
					    	["x1","0"],["y1",Math.sin(-alf).toString()],["z1",Math.cos(-alf).toString()]
					]);
				return true;
			case 68://D
				my_render_instance.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","0"],["y0","0"],						["z0","1"],
					    	["x1","0"],["y1",Math.sin(alf).toString()],	["z1",Math.cos(alf).toString()]
					]);
				return true;
			case 83://S
				my_render_instance.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","1"],						["y0","0"],						["z0","0"],
					    	["x1",Math.cos(alf).toString()],["y1",Math.sin(alf).toString()],["z1","0"]
					]);
				return true;
			case 84://T
				my_render_instance.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","1"],						 ["y0","0"],						["z0","0"],
					    	["x1",Math.cos(-alf).toString()],["y1",Math.sin(-alf).toString()],	["z1","0"]
					]);
				return true;
			case 88://X
				my_render_instance.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"global"],
					    	["x0","0"],["y0","1"],						["z0","0"],
					    	["x1","0"],["y1",Math.cos(-alf).toString()],["z1",Math.sin(-alf).toString()]
					]);
				return true;
			case 89://Y
				my_render_instance.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"global"],
					    	["x0","0"],						 ["y0","0"],["z0","1"],
					    	["x1",Math.sin(-alf).toString()],["y1","0"],["z1",Math.cos(-alf).toString()]
					]);
				return true;
			case 90://Z
				my_render_instance.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"global"],
					    	["x0","1"],						 ["y0","0"],					  ["z0","0"],
					    	["x1",Math.cos(-alf).toString()],["y1",Math.sin(-alf).toString()],["z1","0"]
					]);
				return true;
			default:
				break;
			}
			return false;
		};
		render_instance.component_event_processor[component_id]=ep;
		return;
	};

	function draw_direction_buttion(method_id,primitive_type,
		shader_program,part_buffer_object,material,camera_render_parameter)
	{			
		for(var i=0,n=component_data_array.length;i<n;i++){
			var buffer_id=component_data_array[i];
			
			while(data_buffer[buffer_id].length>1)
				data_buffer[buffer_id].shift();
	
			var component_id		=data_buffer[buffer_id][0][0];
			var left_down_x			=data_buffer[buffer_id][0][1];
			var left_down_y			=data_buffer[buffer_id][0][2];
			var right_up_x			=data_buffer[buffer_id][0][3];
			var right_up_y			=data_buffer[buffer_id][0][4];
			
			if(method_id!=1){
				var view_volume_box=camera_render_parameter.view_volume_box;
				left_down_x	=view_volume_box[0][0];
				left_down_y	=view_volume_box[0][1];
				right_up_x	=view_volume_box[1][0];
				right_up_y	=view_volume_box[1][1];
			}

			construct_mouse_event_listener(component_id,render);

			var x0			=material[0];
			var y0			=material[1];
			var scale		=material[2];
			var box_distance=material[3];
	
			var p=caculate_matrix(	((left_down_x+right_up_x)+(right_up_x-left_down_x)*x0)/2.0,
									((left_down_y+right_up_y)+(right_up_y-left_down_y)*y0)/2.0);
			
			var model_matrix_data=p[0];
			var part_scale		 =p[1];
				
			gl.uniformMatrix4fv(shader_program.model_matrix_uniform,false,new Float32Array(model_matrix_data));
			gl.uniform4fv(shader_program.par_uniform,new Float32Array(
					[	
						project_matrix.distance-project_matrix.near_value-part_scale*scale*box_distance/2.0,
						scale*part_scale,		0,		component_id
					]));

			for(var j=0,nj=part_buffer_object.region_data.length;j<nj;j++){
				var p=part_buffer_object.region_data[j];
				gl.bindVertexArray(p.vertex_array_object);
				gl.drawArrays(primitive_type,0,p.item_number);	
			}
		}
		gl.bindVertexArray(null);
	}
	
	switch(method_id){
	case 0:
	case 1:
		gl.enable(gl.POLYGON_OFFSET_FILL);
		gl.polygonOffset(1.0,1.0);
		draw_direction_buttion(method_id,gl.TRIANGLES,shader_program,
			part_buffer_object.face,part_material,camera_render_parameter);
		gl.disable(gl.POLYGON_OFFSET_FILL);
		break;
	case 4:
		draw_direction_buttion(method_id,gl.LINES,shader_program,
			part_buffer_object.edge,part_material,camera_render_parameter);
		break;
	default:
		break;
	}
}
