package kernel_engine;

import java.io.File;

import kernel_common_class.jason_string;
import kernel_common_class.compress_file_data;
import kernel_common_class.debug_information;
import kernel_component.component;
import kernel_file_manager.file_directory;
import kernel_file_manager.file_reader;
import kernel_file_manager.file_writer;
import kernel_file_manager.travel_through_directory;
import kernel_interface.client_process_bar;
import kernel_network.client_request_response;
import kernel_part.part;
import kernel_driver.component_driver;

public class engine_initialization
{
	class output_component_program
	{
		private int print_number;
		private file_writer fw;
		public output_component_program(file_writer my_fw)
		{
			print_number=0;
			fw=my_fw;
		}
		public void output(component comp,String program_text)
		{
			if((print_number++)>0)
				fw.println(",");
			fw.println("\t{");
			
			fw.println("\t\tcomponent_id			:	",	comp.component_id+",");
			fw.println("\t\tcomponent_name			:	",	jason_string.change_string(comp.component_name)+",");
			fw.println("\t\tinitialization_function	:	",	jason_string.change_string(program_text));
			
			fw.print  ("\t}");
		}
	}

	class output_all_component_program  extends travel_through_directory
	{
		private component comp;
		private String file_charset;
		private output_component_program ocp;
		
		public void operate_file(String file_name)
		{
			ocp.output(comp,file_reader.get_text(file_name,file_charset));
		}
		public output_all_component_program(component my_comp,
				String my_file_name,String my_file_charset,output_component_program my_ocp)
		{
			comp=my_comp;
			file_charset=my_file_charset;
			ocp=my_ocp;
			do_travel(my_file_name,true);
		}
	}

	class file_last_time extends travel_through_directory
	{
		public long last_time;
		public void operate_file(String file_name)
		{
			long my_last_time=new File(file_name).lastModified();
			if(last_time<my_last_time)
				last_time=my_last_time;
		}
		public file_last_time(String file_name)
		{
			last_time=0;
			do_travel(file_name,false);
		}
	}
	
	
	private component sort_component_array[];
	
	public engine_initialization(boolean not_real_scene_fast_load_flag,long program_last_time,
			engine_kernel ek,client_request_response request_response,client_process_bar process_bar)
	{
		if((sort_component_array=ek.component_cont.get_sort_component_array())==null)
			sort_component_array=new component[] {};
		
		debug_information.println();
		debug_information.println("Begin initialize_render_driver");
		render_driver_initialize(ek,request_response,process_bar);
		debug_information.println("End initialize_render_driver");		
		
		debug_information.println();
		debug_information.println("Begin initialize_part_driver");
		part_driver_initialize(ek,request_response,process_bar);
		debug_information.println("End initialize_part_driver");
		
		debug_information.println();
		debug_information.println("Begin initialize_component_driver");
		initialize_component_driver(ek,request_response,process_bar);
		debug_information.println("End initialize_component_driver");
		
		debug_information.println();
		debug_information.println("Begin create initialization file");
		if(not_real_scene_fast_load_flag)
			file_initialize(program_last_time,ek,process_bar);
		debug_information.println("End create initialization file");
		
		for(int i=0,ni=sort_component_array.length;i<ni;i++)
			if(sort_component_array[i].initialization!=null) {
				sort_component_array[i].initialization.destroy();
				sort_component_array[i].initialization=null;
			};
	}
	private void render_driver_initialize(engine_kernel ek,
			client_request_response request_response,client_process_bar process_bar)
	{
		int render_number=ek.render_cont.renders.length;
		process_bar.set_process_bar(true,"render_driver_initialization", 0, render_number);
		
		for(int render_id=0;render_id<render_number;render_id++){
			process_bar.set_process_bar(false,"render_driver_initialization", render_id, render_number);
			if(ek.render_cont.renders[render_id].driver==null)
				continue;
			try {
				ek.render_cont.renders[render_id].driver.initialize_render_driver(render_id,ek,request_response);
			}catch(Exception e){
				debug_information.println("Render driver initialize_part_driver fail:	",e.toString());
				debug_information.println("Render class name:		",	
						ek.render_cont.renders[render_id].driver.getClass().getName());
				debug_information.println("render_id:		",	render_id);
				e.printStackTrace();
			}
		}
		process_bar.set_process_bar(false,"render_driver_initialization", render_number, render_number);
	}
	private void part_driver_initialize(engine_kernel ek,
			client_request_response request_response,client_process_bar process_bar)
	{
		int process_parts_sequence[][]=ek.process_part_sequence.process_parts_sequence;
		int number=process_parts_sequence.length;
		process_bar.set_process_bar(true,"part_driver_initialization", 0, number);
		
		for(int i=0;i<number;i++){
			process_bar.set_process_bar(false,"part_driver_initialization", i, number);
			int render_id=process_parts_sequence[i][0];
			int part_id  =process_parts_sequence[i][1];
			if(ek.render_cont.renders[render_id].parts[part_id].driver==null)
				continue;
			part my_p=ek.render_cont.renders[render_id].parts[part_id];
			try {
				my_p.driver.initialize_part_driver(my_p,ek,request_response);
			}catch(Exception e){
				debug_information.println("Part driver initialize_part_driver fail:	",e.toString());
					
				debug_information.println("Part user name:		",	my_p.user_name);
				debug_information.println("Part system name:	",	my_p.system_name);
				debug_information.println("Part mesh_file_name:",	my_p.directory_name+my_p.mesh_file_name);
				debug_information.println("Part material_file_name:",my_p.directory_name+my_p.material_file_name);
				debug_information.println("part_file_directory:",
						file_directory.part_file_directory(my_p,ek.system_par,ek.scene_par));
				e.printStackTrace();
			}
		}
		
		process_bar.set_process_bar(false,"part_driver_initialization", number, number);
	}
	private void initialize_component_driver(engine_kernel ek,
			client_request_response request_response,client_process_bar process_bar)
	{
		int number=sort_component_array.length;
		process_bar.set_process_bar(true,"component_driver_initialization",0, number);
		for(int i=0;i<number;i++) {
			process_bar.set_process_bar(false,"component_driver_initialization",i, number);
			for(int j=0,driver_number=sort_component_array[i].driver_number();j<driver_number;j++) {
				component_driver cd=sort_component_array[i].driver_array[j];
				try {
					cd.initialize_component_driver(sort_component_array[i],j,ek,request_response);
				}catch(Exception e) {
					debug_information.println("Component driver initialize fail:	",e.toString());
					debug_information.println("Component name:",sort_component_array[i].component_name);
					debug_information.println("Component file:",
							sort_component_array[i].component_directory_name+sort_component_array[i].component_file_name);
					debug_information.println("Component driver id:",j);
					e.printStackTrace();
				}
			}
		}
		process_bar.set_process_bar(false,"component_driver_initialization",number,number);
	}
	
	private void file_initialize(long program_last_time,engine_kernel ek,client_process_bar process_bar)
	{
		long last_time=program_last_time;
		String destination_file_name=ek.scene_par.scene_proxy_directory_name+"initialization.gzip_text";
		
		int collect_init_comp_number=0;
		component init_comp[]=new component[sort_component_array.length];
		for(int i=0,ni=sort_component_array.length;i<ni;i++)
			if(sort_component_array[i].initialization.initialization_program!=null)
				if(sort_component_array[i].initialization.initialization_program_charset!=null)
					if(sort_component_array[i].initialization.initialization_program.length>0)
						if(sort_component_array[i].initialization.initialization_program_charset.length>0)
							init_comp[collect_init_comp_number++]=sort_component_array[i];
		
		String initialization_program_file_name[][]=new String[collect_init_comp_number][];
		
		process_bar.set_process_bar(true,"file_initialization_0",0, collect_init_comp_number);
		for(int i=0,ni=collect_init_comp_number;i<ni;i++){
			process_bar.set_process_bar(false,"file_initialization_0",i, collect_init_comp_number);
			int init_length=init_comp[i].initialization.initialization_program.length;
			initialization_program_file_name[i]=new String[init_length];
			for(int j=0,nj=initialization_program_file_name[i].length;j<nj;j++){
				initialization_program_file_name[i][j]=null;
				if(init_comp[i].initialization.initialization_program_charset[j]==null){
					if(last_time<init_comp[i].uniparameter.file_last_modified_time)
						last_time=init_comp[i].uniparameter.file_last_modified_time;
				}else {
					File f;
					String file_name=init_comp[i].initialization.initialization_program[j];
					initialization_program_file_name[i][j]=init_comp[i].component_directory_name+file_name;
					if(!(f=new File(initialization_program_file_name[i][j])).exists()){
						initialization_program_file_name[i][j]=ek.scene_directory_name+file_name;
						if(!(f=new File(initialization_program_file_name[i][j])).exists()) {
							initialization_program_file_name[i][j]=ek.scene_par.directory_name+file_name;
							if(!(f=new File(initialization_program_file_name[i][j])).exists()) {
								initialization_program_file_name[i][j]=ek.scene_par.extra_directory_name+file_name;
								if(!(f=new File(initialization_program_file_name[i][j])).exists()){
									initialization_program_file_name[i][j]=ek.system_par.data_root_directory_name+file_name;
									if(!(f=new File(initialization_program_file_name[i][j])).exists()){
										initialization_program_file_name[i][j]=null;
										debug_information.print  (
												"Not exist component init function,component name:	",init_comp[i].component_name);
										debug_information.println(
												"	file_name:	",init_comp[i].initialization.initialization_program[j]);
										continue;
									}
								}
							}
						}
					}
					file_last_time flt=new file_last_time(f.getAbsolutePath());
					if(last_time<flt.last_time)
						last_time=flt.last_time;
				}
			}
		}
		process_bar.set_process_bar(false,"file_initialization_0",collect_init_comp_number, collect_init_comp_number);
		
		if((new File(destination_file_name)).lastModified()>last_time)
			return;
		
		int number=sort_component_array.length;
		process_bar.set_process_bar(true,"file_initialization_1",0, number);
		
		file_writer fw=new file_writer(destination_file_name,ek.system_par.network_data_charset);

		fw.println("[");
		fw.println("[");
		for(int i=0;i<number;i++){
			process_bar.set_process_bar(false,"file_initialization_1",i, number);
			
			fw.print("\t[",jason_string.change_string(sort_component_array[i].component_name));
			fw.print(",",sort_component_array[i].component_id);
			fw.print(",[");
			
			for(int j=0,nj=sort_component_array[i].children_number();j<nj;j++)
				fw.print((j<=0)?"":",",sort_component_array[i].children[j].component_id);
			fw.println((i!=(number-1))?"]],":"]]");
		}
		
		process_bar.set_process_bar(false,"file_initialization_1",number, number);
		
		fw.println("],");
		fw.println();
		
		fw.println("[");
		int id[][][][]=ek.component_cont.part_component_id_and_driver_id;
		
		process_bar.set_process_bar(true,"file_initialization_2",0, id.length);
		for(int render_id=0,render_number=id.length;render_id<render_number;render_id++){
			process_bar.set_process_bar(false,"file_initialization_2",render_id,render_number);
			fw.println("	[");
			for(int part_id=0,part_number=id[render_id].length;part_id<part_number;part_id++){
				fw.println("		[");
				for(int i=0,ni=id[render_id][part_id].length;i<ni;i++) {
					int component_id=id[render_id][part_id][i][0];
					int driver_id	=id[render_id][part_id][i][1];
					fw.print  ("			[",component_id);
					fw.print  (",",driver_id);
					fw.println("],");
				}
				part p=ek.render_cont.renders[render_id].parts[part_id];
				fw.println("			",Integer.toString(p.permanent_render_id)+",");
				fw.println("			",Integer.toString(p.permanent_part_id));
				fw.println((part_id==(part_number-1))?"		]":"		],");
			}
			fw.println();
			fw.println((render_id==(render_number-1))?"	]":"	],");	
		}
		process_bar.set_process_bar(false,"file_initialization_2",id.length, id.length);
		fw.println("],");
		fw.println();

		fw.println("[");
		
		process_bar.set_process_bar(true,"file_initialization_3",0,collect_init_comp_number);
		
		output_component_program ocp=new output_component_program(fw);
		
		for(int i=0,ni=collect_init_comp_number;i<ni;i++){
			process_bar.set_process_bar(false,"file_initialization_3",i,collect_init_comp_number);
			for(int j=0,nj=initialization_program_file_name[i].length;j<nj;j++) {
				String my_program_charset;
				if((my_program_charset=init_comp[i].initialization.initialization_program_charset[j])==null)
					ocp.output(init_comp[i],init_comp[i].initialization.initialization_program[j]);
				else if(initialization_program_file_name[i][j]!=null)
						new output_all_component_program(init_comp[i],
								initialization_program_file_name[i][j],my_program_charset,ocp);
			}
		}
		process_bar.set_process_bar(false,"file_initialization_3",
				collect_init_comp_number,collect_init_comp_number);
		
		fw.println();
		fw.println("],");
		fw.println();

		fw.println("[");
		int render_number=ek.render_cont.renders.length;
		process_bar.set_process_bar(true,"file_initialization_4",0,render_number);
		for(int render_id=0;render_id<render_number;render_id++) {
			process_bar.set_process_bar(false,"file_initialization_4",render_id,render_number);
			fw.print_file(file_directory.render_file_directory(
				ek.render_cont.renders[render_id].parts[0].part_type_id,
				ek.render_cont.renders[render_id].parts[0].permanent_render_id,
				ek.system_par,ek.scene_par)+"program.txt");
			fw.println((render_id<(render_number-1))?",":"");
		}
		process_bar.set_process_bar(false,"file_initialization_4",render_number,render_number);
		fw.println("]");
		fw.println();
		fw.println("]");
		
		fw.close();
		
		String tmp_file_name=fw.directory_name+fw.file_name+".tmp";
		file_writer.file_rename(fw.directory_name+fw.file_name,tmp_file_name);
		compress_file_data.do_compress(
			new File(tmp_file_name),new File(fw.directory_name+fw.file_name),
			ek.system_par.response_block_size,"gzip");
		file_writer.file_delete(tmp_file_name);

		return;
	}
}
