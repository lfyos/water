#define MAX_LIGHT_NUMBER 4
uniform material_information
{
	float vertex_color_type,fragment_color_type,temp,shininess;
	vec4 color_parameter,texture_parameter;
	vec4 color,ambient,diffuse,specular,emission;
	vec4 light_color_factor[MAX_LIGHT_NUMBER];
}material_info;
uniform vec4 draw_par;
uniform sampler2D texture_object;

in	vec4 vertex_location,vertex_normal,vertex_material,vertex_id,vertex_texture,vertex_color;
out vec4 frag_position,frag_material,frag_id,frag_texture,frag_color;

void main(void)
{
	gl_PointSize=16.0;

	bool clip_flag		=((int(draw_par.y)&1)!=0)?true:false;
	int display_value_id=int(draw_par.w)%9;

	frag_material		=vertex_material;
	frag_id				=vertex_id;
	frag_texture		=vertex_texture;

	frag_position=component_info.model_matrix*vec4(vertex_location.xyz,1.0);
	vec4 real_frag_position=clip_flag?(target_info.clip_plane_matrix*frag_position):frag_position;
	gl_Position=target_info.projection_matrix*real_frag_position;
	
	if(display_value_id>0){
		float render_value;
		switch(display_value_id){
		default:render_value=0.0;
		case 1:	render_value=frag_texture.x*4.0;break;
		case 2:	render_value=frag_texture.y*4.0;break;
		case 3:	render_value=frag_texture.z*4.0;break;
		case 4:	render_value=frag_texture.w*4.0;break;
		case 5:	render_value=frag_color.x*4.0;	break;
		case 6:	render_value=frag_color.y*4.0;	break;
		case 7:	render_value=frag_color.z*4.0;	break;
		case 8:	render_value=frag_color.w*4.0;	break;
		}
		if(render_value<=1.0)
			frag_color=vec4(vec3(0.0,0.0,1.0)*(1.0-render_value)+vec3(0.0,1.0,1.0)*(render_value-0.0),1.0);
		else if(render_value<=2.0)
			frag_color=vec4(vec3(0.0,1.0,1.0)*(2.0-render_value)+vec3(0.0,1.0,0.0)*(render_value-1.0),1.0);
		else if(render_value<=3.0)
			frag_color=vec4(vec3(0.0,1.0,0.0)*(3.0-render_value)+vec3(1.0,1.0,0.0)*(render_value-2.0),1.0);
		else
			frag_color=vec4(vec3(1.0,1.0,0.0)*(4.0-render_value)+vec3(1.0,0.0,0.0)*(render_value-3.0),1.0);
		return;
	}
	
	vec3 position_value=real_frag_position.xyz/real_frag_position.w;
	vec3 to_eye_value=normalize((target_info.eye_point.xyz/target_info.eye_point.w)-position_value);
	vec3 normal_value;
	if(clip_flag)
		normal_value=normalize(target_info.clip_plane.xyz);
	else{
		vec4 normal_position=vertex_location+vertex_normal;
		normal_position=component_info.model_matrix*vec4(normal_position.xyz,1.0);
		normal_value=normalize((normal_position.xyz/normal_position.w)-position_value);
	}
	frag_color=material_info.emission;
	for(int i=0;i<MAX_LIGHT_NUMBER;i++){
		vec4 light_value	=material_info.ambient;
		vec3 to_light_value	=system_info.light_position[i].xyz/system_info.light_position[i].w;
			 to_light_value	=normalize(to_light_value-position_value);
		float p;
		if((p=dot(to_light_value,normal_value))>0.0){
			light_value		+=material_info.diffuse*p;
			p=dot(normalize(to_light_value+to_eye_value),normal_value);
			if(p>0.0)
				light_value	+=material_info.specular*pow(p,material_info.shininess);
		}
		frag_color+=material_info.light_color_factor[i]*light_value;
	}
	
	switch(int(material_info.vertex_color_type)){
	case 0:
		frag_color*=vertex_color;
		break;
	case 1:
		frag_color*=material_info.color;
		break;
	default:
		frag_color=vertex_color;
		break;
	}
	frag_color=vec4(frag_color.rgb,1.0);
}
