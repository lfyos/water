package kernel_part;

import java.io.File;

import kernel_common_class.debug_information;
import kernel_file_manager.file_reader; 
import kernel_file_manager.file_writer; 

public class buffer_object_file_modify_time_and_length 
{
	public long buffer_object_head_last_modify_time;
	public long	buffer_object_head_length,buffer_object_total_file_length;
	
	public long	buffer_object_file_last_modify_time[][];
	
	public long	buffer_object_text_file_length[][];
	public boolean buffer_object_file_in_head_flag[][];
	
	public part_rude simple_part_mesh;
	
	public buffer_object_file_modify_time_and_length()
	{
		buffer_object_head_last_modify_time=0;
		buffer_object_head_length=0;
		buffer_object_total_file_length=0;
		
		buffer_object_file_last_modify_time	=new long[0][];
		buffer_object_text_file_length		=new long[0][];
		buffer_object_file_in_head_flag		=new boolean[0][];
	}
	public buffer_object_file_modify_time_and_length(
			boolean write_simple_part_mesh_flag,boolean load_simple_part_mesh_flag,
			long max_comment_file_length,String root_file_name,String file_charset,part_rude pr)
	{
		if(!write_simple_part_mesh_flag){
			file_reader fr=new file_reader(root_file_name+".boftal",file_charset);
			
			buffer_object_head_last_modify_time	=fr.get_long();
			buffer_object_head_length			=fr.get_long();
			buffer_object_total_file_length		=buffer_object_head_length;
			
			buffer_object_text_file_length		=new long[fr.get_int()][];
			buffer_object_file_last_modify_time	=new long[buffer_object_text_file_length.length][];
			buffer_object_file_in_head_flag		=new boolean[buffer_object_text_file_length.length][];
			
			for(int i=0,ni=buffer_object_text_file_length.length;i<ni;i++){
				buffer_object_text_file_length[i]		=new long[fr.get_int()];
				buffer_object_file_last_modify_time[i]	=new long[buffer_object_text_file_length[i].length];
				buffer_object_file_in_head_flag[i]		=new boolean[buffer_object_text_file_length[i].length];
				for(int j=0,nj=buffer_object_text_file_length[i].length;j<nj;j++){
					buffer_object_file_last_modify_time[i][j]	=fr.get_long();
					buffer_object_text_file_length[i][j]		=fr.get_long();
					buffer_object_file_in_head_flag[i][j]		=fr.get_boolean();
					if(!(buffer_object_file_in_head_flag[i][j]))
						buffer_object_total_file_length+=buffer_object_text_file_length[i][j];
				}
			}
			
			if(load_simple_part_mesh_flag)
				simple_part_mesh=new part_rude(fr);
			else
				simple_part_mesh=null;
			
			fr.close();
			return;
		}
		
		simple_part_mesh=null;
		
		File f=new File(root_file_name+".head.txt");
		buffer_object_head_last_modify_time	=f.lastModified();
		buffer_object_head_length			=f.length();
		buffer_object_total_file_length		=buffer_object_head_length;
		
		String file_type[]=new String[]{".face",".edge",".point"};
		buffer_object_file_last_modify_time	=new long[file_type.length][];
		buffer_object_text_file_length		=new long[file_type.length][];
		buffer_object_file_in_head_flag		=new boolean[file_type.length][];
		
		for(int i=0,ni=file_type.length;i<ni;i++){
			buffer_object_file_last_modify_time[i]	=new long[100];
			buffer_object_text_file_length[i]		=new long[100];
			buffer_object_file_in_head_flag[i]		=new boolean[100];
			
			int file_number=0;
			
			for(long j=0;;j++){
				String my_file_name=root_file_name+file_type[i]+Long.toString(j)+".txt";
				if(!((f=new File(my_file_name)).exists()))
					break;
				if(!(f.isFile()))
					break;
				if(f.length()<=0)
					break;
				
				if(file_number>=buffer_object_text_file_length[i].length) {
					long bak[]=buffer_object_text_file_length[i];
					buffer_object_text_file_length[i]=new long[bak.length+100];
					for(int k=0,nk=bak.length;k<nk;k++)
						buffer_object_text_file_length[i][k]=bak[k];
	
					bak=buffer_object_file_last_modify_time[i];
					buffer_object_file_last_modify_time[i]=new long[bak.length+100];
					for(int k=0,nk=bak.length;k<nk;k++)
						buffer_object_file_last_modify_time[i][k]=bak[k];
	
					boolean flag_bak[]=buffer_object_file_in_head_flag[i];
					buffer_object_file_in_head_flag[i]=new boolean[flag_bak.length+100];
					for(int k=0,nk=flag_bak.length;k<nk;k++)
						buffer_object_file_in_head_flag[i][k]=flag_bak[k];
				}
		
				buffer_object_text_file_length[i][file_number]=f.length();
				buffer_object_file_last_modify_time[i][file_number]=f.lastModified();

				my_file_name=root_file_name+file_type[i]+Long.toString(j)+".in_head_flag";
				buffer_object_file_in_head_flag[i][file_number]=new File(my_file_name).exists();
				
				if(!(buffer_object_file_in_head_flag[i][file_number]))
					buffer_object_total_file_length+=buffer_object_text_file_length[i][file_number];
				file_number++;
			}
			
			if(buffer_object_file_last_modify_time[i].length!=file_number) {
				long bak[]=buffer_object_file_last_modify_time[i];
				buffer_object_file_last_modify_time[i]=new long[file_number];
				for(int j=0;j<file_number;j++)
					buffer_object_file_last_modify_time[i][j]=bak[j];
				
				bak=buffer_object_text_file_length[i];
				buffer_object_text_file_length[i]=new long[file_number];
				for(int j=0;j<file_number;j++)
					buffer_object_text_file_length[i][j]=bak[j];
				
				boolean bak_flag[]=buffer_object_file_in_head_flag[i];
				buffer_object_file_in_head_flag[i]=new boolean[file_number];
				for(int j=0;j<file_number;j++)
					buffer_object_file_in_head_flag[i][j]=bak_flag[j];
			}
		}
		
		file_writer fw=new file_writer(root_file_name+".boftal",file_charset);
		
		fw.println("/*\tpart mesh file length information\t\t*/");
		fw.println();
		
		fw.println("/*\tbuffer_object_head_last_modify_time\t\t*/\t",
			buffer_object_head_last_modify_time);
		fw.println("/*\tbuffer_object_head_length\t\t\t\t*/\t",
			buffer_object_head_length);
		fw.println("/*\tbuffer_object_text_file_length.length\t*/\t",
			buffer_object_text_file_length.length);
		for(int i=0,ni=buffer_object_text_file_length.length;i<ni;i++){
			fw.println("/*\t\tbuffer_object_text_file_length["+i+"]\t*/\t",
				buffer_object_text_file_length[i].length);
			for(int j=0,nj=buffer_object_text_file_length[i].length;j<nj;j++){
				fw.println("/*\t\t\tbuffer_object_file_last_modify_time\t["+i+","+j+"]\t\t*/\t",
					buffer_object_file_last_modify_time[i][j]);
				fw.println("/*\t\t\tbuffer_object_text_file_length\t\t["+i+","+j+"]\t\t*/\t",
					buffer_object_text_file_length[i][j]);
				fw.println("/*\t\t\tbuffer_object_file_in_head_flag\t\t["+i+","+j+"]\t\t*/\t",
					buffer_object_file_in_head_flag[i][j]?"true":"false");
			}
		}

		fw.println();
		fw.println();
		
		if(pr!=null)
			pr.write_out_to_simple_file(fw);
		else{
			fw.println("/*	version:part_mesh==null				*/	simple");
			fw.println("/*	origin material						*/	0	0	0	0");
			fw.println("/*	default material					*/	0	0	0	0");
			fw.println("/*	origin  vertex_location_extra_data	*/	1");
			fw.println("/*	default vertex_location_extra_data	*/	1");
			fw.println("/*	default vertex_normal_extra_data	*/	1");
			fw.println("/*	max_attribute_number				*/	0");
			fw.println("/*	part_box							*/	nobox");
			fw.println("/*	total_face_primitive_number			*/	0");
			fw.println("/*	total_edge_primitive_number			*/	0");
			fw.println("/*	total_point_primitive_number		*/	0");
			fw.println();
		}
		
		fw.close();
		
		debug_information.println("@@@@@@@@@@@@@@@@@@@:",max_comment_file_length);
		debug_information.println("#################:",fw.file_length);
		debug_information.println("$$$$$$$$$$$$$$$$$:",fw.directory_name+fw.file_name);

		if(max_comment_file_length>0)
			if(fw.file_length>=max_comment_file_length)
				file_writer.delete_comment(fw.directory_name+fw.file_name,fw.get_charset());
	}
}
