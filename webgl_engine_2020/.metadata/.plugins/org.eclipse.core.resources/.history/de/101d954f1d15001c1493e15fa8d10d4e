function (render_id,part_id,render)
{
	var gl								=render.gl;
	var shader_program					=render.render_program.render_program[render_id].shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	
	var computer						=render.computer;



	if(do_render_number.engine_render==0){
		shader_program.color_uniform=gl.getUniformLocation(shader_program,"color");
	}
	
	if(method_id!=0)
		return;
	
	gl.uniform4fv(shader_program.color_uniform,new Float32Array([1.0,0.0,0.0,1.0]));
	
	part_buffer_object=part_buffer_object.face;
	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id=component_data_array[i];
		
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
			
		var component_id=data_buffer[buffer_id][0];
		var model_matrix_data=component_location.get_component_location(component_id);

		for(var j=0,nj=part_buffer_object.region_data.length;j<nj;j++){
			var p=part_buffer_object.region_data[j];
			if(typeof(p.vertex_array_object)!="undefined")
				gl.bindVertexArray(p.vertex_array_object);
			else{
				p.vertex_array_object=gl.createVertexArray();
				gl.bindVertexArray(p.vertex_array_object);
				gl.bindBuffer(gl.ARRAY_BUFFER,p.buffer_object);
				
				var attribute_id;
				
				attribute_id=gl.getAttribLocation (shader_program,"vertex_location");
				gl.vertexAttribPointer		(attribute_id,4,gl.FLOAT,false,p.item_size*4,0);
				gl.enableVertexAttribArray	(attribute_id);
			}
			gl.drawArrays(gl.TRIANGLES,0,p.item_number);
		}
	}
	gl.bindVertexArray(null);
}
