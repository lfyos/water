[
	[
		"vertex_location"
	]
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,	part_id,
			render_buffer_id,	component_data_array,	project_matrix,			view_port,	do_render_number,
			render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var shader_data						=shader_object.shader_data;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	var mouse_inside_canvas_flag		=render.event_listener.mouse_inside_canvas_flag;
	
	if(do_render_number.engine_render==0){
		shader_program.sampler=gl.createSampler();
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MAG_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MIN_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_S,		gl.MIRRORED_REPEAT);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_T,		gl.MIRRORED_REPEAT);
			
		var name=["no_box","front","back","left","right","top","down"];
		for(var i=0,ni=name.length;i<ni;i++)
			gl.uniform1i(gl.getUniformLocation(shader_program,name[i]),i);
	
		shader_program.mode_uniform=gl.getUniformLocation(shader_program,"mode");
		
		shader_object.destroy=function(gl,shader_program,shader_object,program_id)
		{
			gl.deleteSampler(shader_program.sampler);
		}
	}

	if(method_id!=0)
		return;
	
	function set_texture(part_buffer_object,buffer_id,component_id,driver_id,mode,reset_flag)
	{
		if(typeof(part_buffer_object.texture_image)=="undefined")
			part_buffer_object.texture_image=new Array();
		if(typeof(part_buffer_object.texture_image[buffer_id])=="undefined"){
			part_buffer_object.texture_image[buffer_id]=new Array();
			reset_flag=true;
		}
		if(reset_flag){
			var file_name=["no_box.jpg","front.jpg","back.jpg","left.jpg","right.jpg","top.jpg","down.jpg"];
			for(var i=0,ni=file_name.length;i<ni;i++){		
				if((i==0)&&(mode==0))
					part_buffer_object.texture_image[buffer_id][i]=utility.load_camera_video(
						{
							audio: false,
							video: {facingMode:"environment"}
						},
						part_buffer_object.texture_image[buffer_id][i]);
				else
					part_buffer_object.texture_image[buffer_id][i]=utility.load_server_component_image(
						component_id,driver_id,[["random",Math.random().toString()],["operation","file"],["file",file_name[i]]],
						part_buffer_object.texture_image[buffer_id][i]);
			}
		}
		var unready_number=0;
		var texture_id=[gl.TEXTURE0,gl.TEXTURE1,gl.TEXTURE2,gl.TEXTURE3,gl.TEXTURE4,gl.TEXTURE5,gl.TEXTURE6];
		for(var i=0,ni=texture_id.length;i<ni;i++){
			var my_texture_object=part_buffer_object.texture_image[buffer_id][i];
			gl.activeTexture(texture_id[i]);
			if((i==0)&&(mode==0)){
				if(my_texture_object.state!="playing")
					unready_number++;
				else
					utility.bind_camera_video(my_texture_object);
			}else{
				if(my_texture_object.state!="done")
					unready_number++;
				else
					gl.bindTexture(gl.TEXTURE_2D,my_texture_object);
			}
			gl.bindSampler(i,shader_program.sampler);
		}
		
		if(typeof(part_buffer_object.destroy)!="function")
			part_buffer_object.destroy=function(gl,part_buffer_object,render_id,part_id,type_id)
			{
				if(typeof(part_buffer_object.texture_image)!="undefined")
					for(var i=0,ni=part_buffer_object.texture_image.length;i<ni;i++)
						if(typeof(part_buffer_object.texture_image[i])!="undefined")
							for(var j=0,nj=part_buffer_object.texture_image[i].length;j<nj;j++)
								if(typeof(part_buffer_object.texture_image[i][j])!="undefined")
									gl.deleteTexture(part_buffer_object.texture_image[i][j]);
			}

		return (unready_number==0)?true:false;
 	}

	part_buffer_object=part_buffer_object.face;
	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id=component_data_array[i];
		
		var reset_flag=false;
		while(data_buffer[buffer_id].length>1){
			data_buffer[buffer_id].shift();
			reset_flag=true;
		}

		var mode=data_buffer[buffer_id][0];
		var component_id=part_component_id_and_driver_id[buffer_id][0];
		var driver_id	=part_component_id_and_driver_id[buffer_id][1];

		gl.uniform1i(shader_program.mode_uniform,mode);
		
		if(set_texture(part_buffer_object,buffer_id,component_id,driver_id,mode,reset_flag))
			for(var j=0,nj=part_buffer_object.region_data.length;j<nj;j++){
				var p=part_buffer_object.region_data[j];
				gl.bindVertexArray(p.vertex_array_object[0]);
				gl.drawArrays(gl.TRIANGLES, 0, p.item_number);
			}
		gl.bindVertexArray(null);
	}
}
