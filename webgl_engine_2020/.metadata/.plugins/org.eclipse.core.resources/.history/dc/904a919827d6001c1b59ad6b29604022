package driver_opengl_fixed_pipeline;

import java.io.File;

import kernel_common_class.debug_information;
import kernel_component.component;
import kernel_component.component_load_source_container;
import kernel_driver.component_driver;
import kernel_driver.part_driver;
import kernel_engine.client_information;
import kernel_engine.engine_kernel;
import kernel_engine.scene_parameter;
import kernel_engine.system_parameter;
import kernel_file_manager.file_reader;
import kernel_file_manager.file_writer;
import kernel_network.client_request_response;
import kernel_part.part;
import kernel_part.part_rude;
import kernel_part.part_container_for_part_search;
import kernel_transformation.box;
import kernel_transformation.point;

public class extended_part_driver extends part_driver
{
	public extended_part_driver(part p)
	{
		super();
	}
	public void destroy()
	{	
		super.destroy();
	}
	public void initialize_part_driver(part p,engine_kernel ek,client_request_response request_response)
	{
	}
	public void response_init_part_data(part p,engine_kernel ek,client_information ci)
	{
	}
	public part_driver clone(part parent,part p,
			client_request_response request_response,
			system_parameter system_par,scene_parameter scene_par)
	{
		return new extended_part_driver(p);
	}
	public int caculate_material_id(
			part p,String type_str,int body_id,int face_id,int loop_id,int edge_id,
			String material_x,String material_y,String material_z,String material_w)
	{
		return (int)(Math.round(Double.parseDouble(material_w)));
	}
	public part_rude create_part_mesh_and_buffer_object_head(part p,
			file_writer buffer_object_file_writer,part_container_for_part_search pcps,
			system_parameter system_par,scene_parameter scene_par)
	{
		if(buffer_object_file_writer!=null) {
			if(!(new File(p.directory_name+p.material_file_name).exists()))
				buffer_object_file_writer.println("		null");
			else{
				buffer_object_file_writer.println("		{");
				buffer_object_file_writer.println(file_reader.get_text(p.directory_name+p.material_file_name,p.file_charset));
				buffer_object_file_writer.println("		}");
			}
		}
		return super.create_part_mesh_and_buffer_object_head(p,buffer_object_file_writer,pcps,system_par,scene_par);
	}
	public component_driver create_component_driver(
			file_reader fr,boolean rollback_flag,part my_component_part,
			component_load_source_container component_load_source_cont,
			engine_kernel ek,client_request_response request_response)
	{
		return new extended_component_driver(my_component_part);
	}
	public box caculate_part_box(part p,component comp,int driver_id,
			int body_id,int face_id,int loop_id,int edge_id,int point_id,
			point p0,point p1)
	{	
		return super.caculate_part_box(p,comp,driver_id,body_id,face_id,loop_id,edge_id,point_id,p0,p1);
	}
	public String [][]assemble_file_name_and_file_charset(file_reader fr,part p,
			engine_kernel ek,client_request_response request_response)
	{
		return null;
	}
	public String[] response_event(part p,engine_kernel ek,client_information ci)
	{
//		return super.response_event(p,ek,ci);
		String directory_name,file_name,path_name,file_url;
		if((file_name=ci.request_response.get_parameter("file"))==null)
			return null;
		try{
			file_name=java.net.URLDecoder.decode(file_name,ek.system_par.network_data_charset);
			file_name=java.net.URLDecoder.decode(file_name,ek.system_par.network_data_charset);
		}catch(Exception e){
			return null;
		}
		
		file_name=file_reader.separator(file_name);
		directory_name=new File(p.directory_name+p.material_file_name).getParent();
		path_name=file_reader.separator(directory_name)+File.separator+file_name;
		if(new File(path_name).exists())
			return new String[]{path_name,p.file_charset};
		path_name=ek.system_par.proxy_par.proxy_data_root_directory_name+file_name;
		if(!(new File(path_name).exists())) 
			debug_information.println("File does NOT exist :	",path_name);
		else if((file_url=ci.get_file_proxy_url(path_name,ek.system_par))==null)
			debug_information.println("File has NO proxy url :	",path_name);
		else
			ci.request_response.implementor.redirect_url(file_url,ek.system_par.file_download_cors_string);
		return null;
	}
}
