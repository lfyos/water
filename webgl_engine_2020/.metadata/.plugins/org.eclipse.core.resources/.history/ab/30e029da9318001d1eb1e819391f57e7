[
	
],

function (	method_id,				parameter_channel_id,	render_id,		part_id,			render_buffer_id,
			component_data_array,	project_matrix,			view_port,		do_render_number,	render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var shader_data						=shader_object.shader_data;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	if(method_id!=0)
		return;	
	
	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id=component_data_array[i];
		var modifier_container_id=instance_initialize_data[buffer_id];
		
		var old_buffer_data=data_buffer[buffer_id],new_buffer_data=new Array();
		for(var j=0,nj=old_buffer_data.length;j<nj;j++){
			for(var k=0,nk=my_buffer_data[j].length;k<nk;k++)
				if(typeof(my_buffer_data[j][k])=="number")
					new_buffer_data=new Array();
				else
					new_buffer_data.push(my_buffer_data[j][k]);
		}			
		data_buffer[buffer_id]	=new_buffer_data;	
		old_buffer_data			=new_buffer_data;
		new_buffer_data			=new Array();
		
		for(var j=0,nj=old_buffer_data.length;j<nj;j++){
			var location_data=old_buffer_data[j];
			var component_id			=location_data[0];
			var start_time				=location_data[1];
			var start_location			=location_data[2];
			var terminate_time			=location_data[3];
			var terminate_location		=location_data[4];
				
			if(start_location.length<16){
				start_location=component_location.decode_location(start_location);
				location_data[2]=start_location;
			}
			if(terminate_location.length<16){
				terminate_location=component_location.decode_location(terminate_location);
				location_data[4]=terminate_location;
			}
			var p=(modifier_current_time[modifier_container_id]-start_time)/(terminate_time-start_time);
			var not_terminated_flag=(p<1.0)?true:false;
			p=(p<=0.0)?0.0:(p>=1.0)?1.0:p;

			var loca=new Array();
			for(var k=0,nk=start_location.length;k<nk;k++)
				loca[k]=start_location[k]*(1.0-p)+terminate_location[k]*p;
					
			var p0=computer.caculate_coordinate(loca,0,0,0);
			var dx=computer.sub_operation(computer.caculate_coordinate(loca,1,0,0),p0);
			var dy=computer.sub_operation(computer.caculate_coordinate(loca,0,1,0),p0);
			var dz=computer.cross_operation(dx,dy);
				dx=computer.cross_operation(dy,dz);
					
			var px=computer.add_operation(p0,computer.expand_operation(dx,1.0));
			var py=computer.add_operation(p0,computer.expand_operation(dy,1.0));
			var pz=computer.add_operation(p0,computer.expand_operation(dz,1.0));
				
			loca=computer.create_point_location(p0,px,py,pz);
			loca=computer.matrix_multiplication(loca,computer.standard_negative);
						
			component_location.modify_one_component_location(component_id,loca);
			loca=component_location.get_component_location(component_id);
					
			for(var k=5,nk=location_data.length;k<nk;k+=2){
				var follow_component_id	=location_data[k+0];
				var follow_loca			=location_data[k+1];
				if(follow_loca.length<16){
					follow_loca=component_location.decode_location(follow_loca);
					location_data[k+1]=follow_loca;
				}
				follow_loca=computer.matrix_multiplication(loca,follow_loca)
				component_location.modify_one_component_location(follow_component_id,follow_loca);
				component_location.component[follow_component_id].caculate_location_flag=true;
			}
			if(not_terminated_flag)
				new_buffer_data.push(location_data);
		}
		data_buffer[buffer_id]=new_buffer_data;
	}
}
