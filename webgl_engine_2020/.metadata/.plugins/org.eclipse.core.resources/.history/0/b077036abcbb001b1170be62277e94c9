package driver_movement;

import kernel_camera.camera_parameter;
import kernel_common_class.web_page;
import kernel_engine.client_information;
import kernel_engine.engine_kernel;

public class movement_edit  extends web_page
{
	public movement_searcher searcher;
	private movement_manager manager;
	private long current_time;
	private long switch_camera_time_length;
	
	private boolean mount_direction_flag,do_edit_flag;
	private String mount_call_processor_string;
	
	public void create_head()
	{
		String str[]={
			"",
			"<script type=\"text/javascript\">",
			mount_call_processor_string,
			"function jump_url(url)",
			"{",
			"	window.open(url,\"_self\");",
			"}",
			"function operate_id(id,fun)",
			"{",
			"	fun(id,	function(response_data,render)",
			"			{",
			"				jump_url(mcp.mount_edit_url("
							+(do_edit_flag?"true":"false")
							+",response_data));",
			"			});",
			"}",
			"function operate_id_with_alert(id,fun)",
			"{",
			"	fun(id,	function(response_data,render)",
			"			{",
			"				alert(response_data);",
			"			});",
			"}",
			
			"function process_movement(movement_id)",
			"{",
			"	var seletion=document.getElementById(\"move_id_\"+movement_id);",
			"	switch(seletion.value){",
			"	case \""+language_change("edit_locate_camera")+"\":",
			"		operate_id(movement_id,mcp.locate_camera_movement);",
			"		break;",
			"	case \""+language_change("edit_delete")+"\":",
			"		operate_id(movement_id,mcp.delete_movement);",
			"		break;",
			"	case \""+language_change("edit_follow")+"\":",
			"		operate_id(movement_id,mcp.follow_movement);",
			"		break;",
			"	case \""+language_change("edit_up")+"\":",
			"		operate_id(movement_id,mcp.moveup_movement);",
			"		break;",
			"	case \""+language_change("edit_down")+"\":",
			"		operate_id(movement_id,mcp.movedown_movement);",
			"		break;",
			"	case \""+language_change("edit_from_child")+"\":",
			"		operate_id(movement_id,mcp.fromchild_movement);",
			"		break;",
			"	case \""+language_change("edit_buffer")+"\":",
			"		operate_id(movement_id,mcp.tobuffer_movement);",
			"		break;",
			"	case \""+language_change("edit_extract")+"\":",
			"		operate_id(movement_id,mcp.frombuffer_movement);",
			"		break;",
			"	case \""+language_change("edit_tag")+"\":",
			"		jump_url(mcp.mount_tag_url(movement_id,\""+manager.config_parameter.render_window_name+"\"));",
			"		break;",
			"	case \""+language_change("edit_right_button")+"\":",
			"		operate_id_with_alert(movement_id,mcp.todesignbuffer_movement);",
			"		break;",
			"	case \""+language_change("edit_make_view")+"\":",
			"	case \""+language_change("edit_delete_view")+"\":",
			"		operate_id(movement_id,mcp.view_direction_movement);",
			"		break;",
			"	case \""+language_change("edit_view_start_location")+"\":",
			"	case \""+language_change("edit_view_end_location")+"\":",
			"	case \""+language_change("edit_view_start_end_location")+"\":",
			"	case \""+language_change("edit_view_parent_location")+"\":",
			"		operate_id(movement_id,mcp.view_box_movement);",
			"		break;",
			"	case \""+language_change("edit_select_component")+"\":",
			"		mcp.select_component_movement(movement_id);",
			"		break;",
			"	case \""+language_change("edit_invert")+"\":",
			"		operate_id(movement_id,mcp.reverse_movement);",
			"		break;",
			"	case \""+language_change("edit_synchronous_mount")+"\":",
			"		operate_id(movement_id,mcp.synchronization_movement);",
			"		break;",
			"	case \""+language_change("edit_sequence_mount")+"\":",
			"		operate_id(movement_id,mcp.sequence_movement);",
			"		break;",
			"	}",
			"}",
			
			"</script>",
			""
		};
		for(int i=0,ni=str.length;i<ni;i++)
			out.println(str[i]);
	}
	private void print_movement(movement_tree t,movement_tree parent)
	{
		boolean flag=false;
		if((t.start_time-switch_camera_time_length)<=current_time)
			if(current_time<t.terminate_time) {
				out.print("<strong>");
				flag=true;
			}
		out.print  ("<a href=\"#\" onclick=\"jump_url(mcp.mount_edit_url(");
		out.print  (do_edit_flag?"true,":"false,",t.movement_tree_id);
		out.print  ("));\" title=\""+t.description.trim()+"\">"+t.node_name.trim(),"</a>");
		if(flag)
			out.print  ("</strong>");
	}
	private void print_delete(movement_tree t)
	{
		out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
		out.print  (",mcp.delete_movement);\" title=\"",language_change("edit_delete_title"));
		out.print  ("\">",language_change("edit_delete"));
		out.println("</a></td>");
	}
	private void print_follow(movement_tree t)
	{
		if(t.children!=null)
			if(t.children.length>0)
				return;
		out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
		out.print  (",mcp.follow_movement);\" title=\"",language_change("edit_follow_title"));
		out.print  ("\">",language_change("edit_follow"));
		out.println("</a></td>");
	}
	private void print_reverse(movement_tree t)
	{
		out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
		out.print  (",mcp.reverse_movement);\" title=\"",language_change("edit_invert_title"));
		out.print  ("\">",language_change("edit_invert"));
		out.println("</a></td>");
	}
	private void print_sequence_synchronization(movement_tree t)
	{
		out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
		if(t.sequence_flag) {
			out.print(",mcp.synchronization_movement);\" title=\"",
					language_change("edit_synchronous_mount_title"));
			out.print  ("\">",language_change("edit_synchronous_mount"));
		}else {
			out.print(",mcp.sequence_movement);\" title=\"",
					language_change("edit_sequence_mount_title"));
			out.print  ("\">",language_change("edit_sequence_mount"));
		}
		out.println("</a></td>");
	}
	private void print_updown(movement_tree t)
	{
		out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
		out.print  (",mcp.moveup_movement);\" title=\"",language_change("edit_up_title"));
		out.print  ("\">",language_change("edit_up"));
		out.println("</a></td>");
		
		out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
		out.print  (",mcp.movedown_movement);\" title=\"",language_change("edit_down_title"));
		out.print  ("\">",language_change("edit_down"));
		out.println("</a></td>");
	}
	private void print_fromchild(movement_tree t)
	{
		if(t.children!=null)
			if(t.children.length>0){
				out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
				out.print  (",mcp.fromchild_movement);\" title=\"",
					language_change("edit_from_child_title"));
				out.print  ("\">",language_change("edit_from_child"));
				out.println("</a></td>");
			}
	}
	private void print_tobuffer(movement_tree t)
	{
		out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
		out.print  (",mcp.tobuffer_movement);\" title=\"",
				language_change("edit_buffer_title"));
		out.print  ("\">",language_change("edit_buffer"));
		out.println("</a></td>");
	}
	private void print_frombuffer(movement_tree t)
	{
		if(manager.buffer_movement!=null){
			out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
			out.print  (",mcp.frombuffer_movement);\" title=\"",language_change("edit_extract_title"));
			out.print  ("\">",language_change("edit_extract"));
			out.println("</a></td>");
		}
	}
	private void print_tag(movement_tree t)
	{
		out.print  ("<td><a href=\"#\" onclick=\"jump_url(mcp.mount_tag_url(");
		out.print  (t.movement_tree_id+",\'",manager.config_parameter.render_window_name);
		out.print  ("\'));\" title=\"",language_change("edit_tag_title"));
		out.print  ("\">",language_change("edit_tag"));
		out.println("</a></td>");
	}
	private void print_to_design_buffer(movement_tree t)
	{
		out.print  ("<td><a href=\"#\" onclick=\"operate_id_with_alert(",t.movement_tree_id);
		out.print  (",mcp.todesignbuffer_movement);\" title=\"",
				language_change("edit_right_button_title"));
		out.print  ("\">",language_change("edit_right_button"));
		out.println("</a></td>");
	}
	private void print_view_direction(movement_tree t)
	{
		out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
		out.print  (",mcp.view_direction_movement);\" title=\"",
				language_change((t.direction==null)?"edit_make_view_title":"edit_delete_view_title"));
		out.print  ("\">",
				language_change((t.direction==null)?"edit_make_view":"edit_delete_view"));
		out.println("</a></td>");
	}
	private void print_view_box(movement_tree t)
	{
		out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
		out.print  (",mcp.view_box_movement);\" title=\"",
				language_change("edit_modify_view_location_title"));
		switch(t.scale_type){
		case 1:
			out.print("\">",language_change("edit_view_start_location"));break;
		case 2:
			out.print("\">",language_change("edit_view_end_location"));break;
		case 3:
			out.print("\">",language_change("edit_view_start_end_location"));break;
		case 0:
		default:
			out.print("\">",language_change("edit_view_parent_location"));break;
		}
		out.println("</a></td>");
	}
	private void print_locate_camera(movement_tree t)
	{
		out.print  ("<td><a href=\"#\" onclick=\"operate_id(",t.movement_tree_id);
		out.print  (",mcp.locate_camera_movement);\" title=\"",
				language_change("edit_locate_camera_title"));
		out.print  ("\">",language_change("edit_locate_camera"));
		out.println("</a></td>");
	}
	private void print_select_component(movement_tree t)
	{
		out.print  ("<td><a href=\"#\" onclick=\"mcp.select_component_movement(",t.movement_tree_id);
		out.print  (");\" title=\"",language_change("edit_select_component_title"));
		out.print  ("\">",language_change("edit_select_component"));
		out.println("</a></td>");
	}
	public void create_body()
	{
		if(searcher.result==null)
			return;
		
		out.println();
		if(do_edit_flag)
			if(manager.buffer_movement!=null){
				out.print  (language_change("edit_buffer_number"));
				out.print  (":",manager.buffer_movement.length);
				out.println("<br/>");
			}
		if(searcher.result_parent!=null) {
			print_movement(searcher.result_parent,null);
			out.println("<br/>");
		}
		out.println("<table><tr>");
		out.print  ("<td>");
		out.print  ((searcher.result_id+1)+":");
		out.println("</td>");
		
		out.print  ("<td>");
		print_movement(searcher.result,searcher.result_parent);
		out.println(" </td>");
		out.println("</tr></table><br/>");

		if(searcher.result.children!=null)
			if(searcher.result.children.length>0){
				for(int i=0;i<(searcher.result.children.length);i++){
					int j=mount_direction_flag?i:(searcher.result.children.length-i-1);
					movement_tree t=searcher.result.children[j];
					
					out.println();
					out.println("<table><tr>");
					out.print  ("<td>");	out.print(i+1);						out.println(":</td>");
					out.print  ("<td>");	print_movement(t,searcher.result);	out.println("</td>");
					print_locate_camera(t);
					
					out.println("<td>");
					
					out.print  ("<select id=\"move_id_",t.movement_tree_id);
					out.print  ("\" onclick=\"process_movement(",t.movement_tree_id);
					out.println(");\">");
					
					out.print  ("<option title=\"",language_change("edit_locate_camera_title"));out.print("\">");
					out.println(language_change("edit_locate_camera"),"</option>");
					
					out.print  ("<option title=\"",language_change("edit_delete_title"));out.print("\">");
					out.println(language_change("edit_delete"),"</option>");
					
					do{
						if(t.children!=null)
							if(t.children.length>0)
								break;
						out.print  ("<option title=\"",language_change("edit_follow_title"));out.print("\">");
						out.println(language_change("edit_follow"),"</option>");
					}while(false);
					
					out.print  ("<option title=\"",language_change("edit_up_title"));out.print("\">");
					out.println(language_change("edit_up"),"</option>");
					
					out.print  ("<option title=\"",language_change("edit_down_title"));out.print("\">");
					out.println(language_change("edit_down"),"</option>");
					
					out.print  ("<option title=\"",language_change("edit_buffer_title"));out.print("\">");
					out.println(language_change("edit_buffer"),"</option>");
					
					if(manager.buffer_movement!=null){
						out.print  ("<option title=\"",language_change("edit_extract_title"));out.print("\">");
						out.println(language_change("edit_extract"),"</option>");
					}
					
					out.print  ("<option title=\"",language_change("edit_tag_title"));out.print("\">");
					out.println(language_change("edit_tag"),"</option>");
					
					out.print  ("<option title=\"",language_change("edit_right_button_title"));out.print("\">");
					out.println(language_change("edit_right_button"),"</option>");
					
					out.print  ("<option title=\"",
						language_change((t.direction==null)?"edit_make_view_title":"edit_delete_view_title"));out.print("\">");
					out.println(language_change((t.direction==null)?"edit_make_view":"edit_delete_view"));out.println("</option>");
						
					out.print  ("<option title=\"",language_change("edit_modify_view_location_title"));out.print("\">");
					switch(t.scale_type){
					case 1:
						out.print(language_change("edit_view_start_location"));		break;
					case 2:
						out.print(language_change("edit_view_end_location"));		break;
					case 3:
						out.print(language_change("edit_view_start_end_location"));	break;
					case 0:
					default:
						out.print(language_change("edit_view_parent_location"));	break;
					}
					out.println("</option>");
					
					out.print  ("<option title=\"",language_change("edit_select_component_title"));out.print("\">");
					out.println(language_change("edit_select_component"),"</option>");
					
					if(t.children!=null)
						if(t.children.length>0){
							out.print  ("<option title=\"",language_change("edit_invert_title"));
							out.print("\">");
							out.println(language_change("edit_invert"),"</option>");
							
							out.print  ("<option title=\"",
								language_change(t.sequence_flag?"edit_synchronous_mount_title":"edit_sequence_mount_title"));
							out.print("\">");
							out.println(language_change(t.sequence_flag?"edit_synchronous_mount":"edit_sequence_mount"));
							out.println("</option>");
						}
					out.println("</select>");
					
					out.println("</td>");
					
					out.println("</tr></table>");
					
					if(do_edit_flag){

						out.println("<table><tr>");
						
						print_delete(t);
						print_follow(t);
						print_updown(t);
						print_fromchild(t);
						print_tobuffer(t);
						print_frombuffer(t);
						print_tag(t);
						print_to_design_buffer(t);
						print_view_direction(t);
						print_view_box(t);
						print_select_component(t);
						
						if(t.children!=null)
							if(t.children.length>0){
								print_reverse(t);
								print_sequence_synchronization(t);
							}
						out.println("</tr></table>");
					}
					
				}
			}
		
		out.println();
		out.println();
	}
	public movement_edit(engine_kernel ek,client_information ci,
			movement_manager my_manager,int movement_tree_id,boolean my_do_edit_flag)
	{
		super(ci,my_manager.config_parameter.language_change_name,"movement_edit");
		
		manager=my_manager;
		do_edit_flag=my_do_edit_flag;
				
		if(manager.root_movement==null)
			return;
		camera_parameter cam_par=ci.display_camera_result.cam.parameter;
		switch_camera_time_length=cam_par.movement_flag?cam_par.switch_time_length:0;
		
		for(;;movement_tree_id=searcher.result_parent.movement_tree_id){
			searcher=new movement_searcher(manager.root_movement,movement_tree_id);
			if(searcher.result==null)
				searcher=new movement_searcher(manager.root_movement,manager.root_movement.movement_tree_id);
			if(searcher.result==null)
				return;
			if(searcher.result.children!=null)
				if(searcher.result.children.length>0)
					break;
			if(searcher.result_parent==null)
				return;
		};
		
		movement_tree t;	
		if((t=manager.root_movement.search_movement(my_manager.parameter.current_movement_id))==null)
			t=manager.root_movement;
		current_time=t.start_time;

		mount_direction_flag=manager.mount_direction_flag;
		
		mount_call_processor_string=ci.request_response.get_parameter("windows");
		switch((mount_call_processor_string==null)?"parent":mount_call_processor_string){
		case "top":
			mount_call_processor_string="window.top.";
			break;
		case "parent":
			mount_call_processor_string="window.parent.";
			break;
		case "this":
			mount_call_processor_string="";
			break;
		default:
			mount_call_processor_string ="window.frames[\""+mount_call_processor_string+"\"].";
			break;
		}
		mount_call_processor_string="var mcp="+mount_call_processor_string
			+"render.component_call_processor["+manager.config_parameter.component_id+"];";
		
		create_web_page();
	}
}
