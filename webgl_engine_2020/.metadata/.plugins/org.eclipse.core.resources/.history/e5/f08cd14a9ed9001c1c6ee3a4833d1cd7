package driver_movement;

import kernel_engine.client_information;
import kernel_engine.engine_kernel;
import kernel_component.component;
import kernel_component.component_collector;
import kernel_component.component_container;
import kernel_component.component_link_list;
import kernel_common_class.debug_information;

public class movement_suspend
{
	public int virtual_mount_root_component_id,follow_mouse_component_id;
	
	private component_collector suspend_collector,virtual_mount_collector;
	private movement_match match_array[];
	private int match_number;

	public void destroy()
	{
		suspend_collector=null;
		virtual_mount_collector=null;
		match_array=null;
	}
	private void init_virtual_mount_component_routine(
			engine_kernel ek,component comp,int parameter_channel_id[])
	{
		int children_number;

		if((children_number=comp.children_number())<=0){
			comp.modify_display_flag(parameter_channel_id,false,ek.component_cont);
			if(comp.driver_number()>0)
				virtual_mount_collector.register_component(comp,0);
		}else{
			for(int i=0;i<children_number;i++)
				init_virtual_mount_component_routine(ek,comp.children[i],parameter_channel_id);
			comp.modify_display_flag(parameter_channel_id,true,ek.component_cont);
		}
	}
	public void reset_virtual_mount_component(engine_kernel ek)
	{
		component virtual_mount_root_comp;
		follow_mouse_component_id=-1;
		virtual_mount_collector=new component_collector(ek.render_cont.renders);
		if((virtual_mount_root_comp=ek.component_cont.get_component(virtual_mount_root_component_id))!=null){
			int parameter_channel_id[]=new int[virtual_mount_root_comp.multiparameter.length];
			for(int i=0,ni=parameter_channel_id.length;i<ni;i++)
				parameter_channel_id[i]=i;
			init_virtual_mount_component_routine(ek,virtual_mount_root_comp,parameter_channel_id);
		}
	}
	public movement_suspend(engine_kernel ek,int my_virtual_mount_root_component_id)
	{
		virtual_mount_root_component_id=my_virtual_mount_root_component_id;
		suspend_collector=new component_collector(ek.render_cont.renders);
		match_array=new movement_match[10];
		match_number=0;
		reset_virtual_mount_component(ek);
	}
	public void register_match_and_component(movement_match_container match,
			int main_component_id,int follow_component_id[],component_container component_cont)
	{
		if(match==null)
			return;
		if(match.match==null)
			return;
		for(int i=0,ni=match.match.length;i<ni;i++) {
			if(match.match[i]!=null)
				switch(match.match[i].match_type) {
				case "component_part_selection":
					suspend_collector.register_component(component_cont.get_component(main_component_id));
					if(follow_component_id!=null)
						for(int j=0,nj=follow_component_id.length;j<nj;j++)
							suspend_collector.register_component(component_cont.get_component(follow_component_id[j]));
					break;
				case "component_face_match":
					if(match_array.length<=match_number) {
						movement_match bak[]=match_array;
						match_array=new movement_match[match_array.length+10];
						for(int j=0,nj=bak.length;j<nj;j++)
							match_array[j]=bak[j];
					}
					match_array[match_number++]=match.match[i];
					break;
				default:
					break;
				}
		}
	}
	public int get_suspend_match_number()
	{
		return match_number;
	}
	public int get_suspend_component_number()
	{
		return suspend_collector.component_number;
	}
	private void response_suspend_jason_data(int parameter_channel_id,client_information ci,engine_kernel ek)
	{
		component_collector target_collector=new component_collector(ek.render_cont.renders);
		for(int i=0,ni=virtual_mount_collector.component_collector.length;i<ni;i++)
			if(virtual_mount_collector.component_collector[i]!=null)
				for(int j=0,nj=virtual_mount_collector.component_collector[i].length;j<nj;j++) {
					component_link_list cll=virtual_mount_collector.component_collector[i][j];
					for(;cll!=null;cll=cll.next_list_item)
						if(cll.comp.get_effective_display_flag(parameter_channel_id))
							target_collector.register_component(cll.comp,0);
				}
		ci.request_response.println("{");
		ci.request_response.println("	\"collector\"	:");
		
		suspend_collector.sort_component_list(ek.scene_par.component_sort_type,ek.scene_par.component_sort_min_distance);
		new movement_collector_compare(ci,ek,suspend_collector,target_collector,"		",",");

		ci.request_response.println().println().print("	\"match\"	:	[");
		String pre_str="";
		for(int i=0;i<match_number;i++) {
			movement_match m=match_array[i];
			if((m.source_body_id<0)||(m.source_face_id<0)||(m.destatination_body_id<0)||(m.destatination_face_id<0))
				continue;
			component s_comp=ek.component_cont.search_component(m.source_component_name);
			if(s_comp==null)
				continue;
			component d_comp=ek.component_cont.search_component(m.destatination_component_name);
			if(d_comp==null)
				continue;
			
			ci.request_response.println(pre_str);pre_str=",";
			ci.request_response.println("		{");
			ci.request_response.print  ("			\"source_component_id\"		:	",	s_comp.component_id).		println(",");
			ci.request_response.print  ("			\"source_body_id\"		:	",		m.source_body_id).			println(",");
			ci.request_response.print  ("			\"source_face_id\"		:	",		m.source_face_id).			println(",");
			ci.request_response.print  ("			\"destatination_component_id\"	:	",d_comp.component_id).		println(",");
			ci.request_response.print  ("			\"destatination_body_id\"		:	",m.destatination_body_id).	println(",");
			ci.request_response.print  ("			\"destatination_face_id\"		:	",m.destatination_face_id).	println();
			ci.request_response.print  ("		}");
		}
		ci.request_response.println();
		ci.request_response.println("	]");
		
		ci.request_response.println("}");
	}
	
	public void reset_suspend_collector(engine_kernel ek)
	{
		suspend_collector.reset();
	}
	public void reset_suspend_match()
	{
		if(match_array==null)
			match_array=new movement_match[10];
		for(int i=0,ni=match_array.length;i<ni;i++)
			match_array[i]=null;
		match_number=0;
	}
	private void start_follow(int parameter_channel_id,engine_kernel ek,client_information ci)
	{
		String str;
		
		if((str=ci.request_response.get_parameter("part_name"))==null) {
			debug_information.println("NO part name in response_event of virtual_mount_driver");
			return;
		}
		try{
			str=java.net.URLDecoder.decode(str,ek.system_par.network_data_charset);
			str=java.net.URLDecoder.decode(str,ek.system_par.network_data_charset);
		}catch(Exception e) {
			debug_information.println("Can't decode part name in response_event of virtual_mount_driver\t:\t",str);
			return;
		}
		for(int i=0,ni=virtual_mount_collector.component_collector.length;i<ni;i++) {
			if(virtual_mount_collector.component_collector[i]==null)
				continue;
			for(int j=0,nj=virtual_mount_collector.component_collector[i].length;j<nj;j++) {
				component_link_list cll;
				if((cll=virtual_mount_collector.component_collector[i][j])==null)
					continue;
				if(ek.render_cont.renders[i].parts[j].system_name.compareTo(str)!=0)
					continue;
				for(;cll!=null;cll=cll.next_list_item) {
					if(cll.comp.get_effective_display_flag(parameter_channel_id))
						continue;
					follow_mouse_component_id=cll.comp.component_id;
						
					int parameter_channel_id_array[]=new int[cll.comp.multiparameter.length];
					for(int k=0,nk=parameter_channel_id_array.length;k<nk;k++)
						parameter_channel_id_array[k]=k;
					cll.comp.modify_display_flag(parameter_channel_id_array,true,ek.component_cont);

					debug_information.println("success in response_event of start_follow\t:\t",str);
					debug_information.println("component\t:\t",cll.comp.component_name);
					debug_information.println("system_name\t:\t",ek.render_cont.renders[i].parts[j].system_name);
					debug_information.println("user_name\t:\t",ek.render_cont.renders[i].parts[j].user_name);

					return;
				}
			}
		}
		debug_information.println("Can't find part name in response_event of virtual_mount_driver\t:\t",str);
		return;
	}
	public void response_event(engine_kernel ek,client_information ci)
	{
		String str;
		switch(((str=ci.request_response.get_parameter("virtual_mount"))==null)?"":str) {
		case "start_follow":
			start_follow(parameter_channel_id,ek,ci);
			break;
		case "terminate_follow":
			follow_mouse_component_id=-1;
			break;
		case "reset":
			if((str=ci.request_response.get_parameter("component_part_selection"))!=null)
				if(str.toLowerCase().trim().compareTo("true")==0)
					suspend_collector.reset();
			if((str=ci.request_response.get_parameter("component_face_match"))!=null)
				if(str.toLowerCase().trim().compareTo("true")==0)
					reset_suspend_match();
			if((str=ci.request_response.get_parameter("component_virtual_mount"))!=null)
				if(str.toLowerCase().trim().compareTo("true")==0)
					reset_virtual_mount_component(ek);
			break;
		case "suspend_jason":
			response_suspend_jason_data(parameter_channel_id,ci,ek);
			break;
		}
	}
}
