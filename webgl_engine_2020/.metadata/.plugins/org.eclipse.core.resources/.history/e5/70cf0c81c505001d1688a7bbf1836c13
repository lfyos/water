package kernel_engine;

import java.util.concurrent.locks.ReentrantLock;

import kernel_engine.engine_kernel;
import kernel_common_class.debug_information;
import kernel_network.client_request_response;
import kernel_part.part_loader_container;
import kernel_render.render_container;

public class engine_kernel_container
{
	public engine_kernel ek;
	public int link_number,register_component_state;
	public boolean initilization_flag;
	public volatile ReentrantLock engine_kernel_container_lock;

	public void destroy()
	{
		ReentrantLock my_engine_kernel_container_lock;
		if((my_engine_kernel_container_lock=engine_kernel_container_lock)!=null){
			my_engine_kernel_container_lock.lock();
			if(ek!=null) {
				ek.destroy();
				ek=null;
			}
			if(engine_kernel_container_lock!=null)
				engine_kernel_container_lock=null;
			
			link_number=0;
			
			my_engine_kernel_container_lock.unlock();
		}
	}
	public engine_kernel_container(String my_scene_name,String my_link_name,
			client_request_response request_response,system_parameter system_par,
			String client_scene_file_name,String client_scene_file_charset,
			render_container original_render,part_loader_container my_part_loader_cont,
			engine_statistics statistics_engine)
	{
		engine_kernel_create_parameter create_parameter=new engine_kernel_create_parameter(
				my_scene_name,my_link_name,client_scene_file_name,client_scene_file_charset,system_par);
		if(!(create_parameter.success_load_parameter_flag))
			create_parameter=new engine_kernel_create_parameter(
					null,my_link_name,client_scene_file_name,client_scene_file_charset,system_par);
		if(!(create_parameter.success_load_parameter_flag)){
			ek=null;
			debug_information.println("Cann't Create scene:	",my_scene_name+"	"+my_link_name);
		}else {
			ek=new engine_kernel(create_parameter,request_response,system_par,original_render,my_part_loader_cont);
			create_parameter.scene_name=my_scene_name;
			create_parameter.link_name=my_link_name;
		}
		link_number=0;
		register_component_state=0;
		initilization_flag=true;
		engine_kernel_container_lock=new ReentrantLock();
	}
}
