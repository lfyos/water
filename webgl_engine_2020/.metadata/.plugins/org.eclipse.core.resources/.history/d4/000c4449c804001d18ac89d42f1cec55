package kernel_engine;

import java.io.File;
import java.nio.charset.Charset;

import kernel_engine.engine_kernel;
import kernel_engine.client_information;
import kernel_engine.engine_call_result;
import kernel_client_interface.dispatch_request_main;
import kernel_common_class.debug_information;
import kernel_component.component_load_source_container;
import kernel_interface.client_process_bar;
import kernel_interface.user_statistics;
import kernel_network.client_request_response;
import kernel_part.part_loader_container;
import kernel_render.render_container;

public class engine_kernel_container
{
	public engine_kernel ek;
	private boolean initilization_flag;

	public engine_kernel_container(String my_scene_name,String my_link_name,
			client_request_response request_response,system_parameter system_par,
			String client_scene_file_name,String client_scene_file_charset,
			render_container original_render,part_loader_container my_part_loader_cont)
	{
		initilization_flag=true;
		
		engine_kernel_create_parameter create_parameter=new engine_kernel_create_parameter(
				my_scene_name,my_link_name,client_scene_file_name,client_scene_file_charset,system_par);
		if(!(create_parameter.success_load_parameter_flag))
			create_parameter=new engine_kernel_create_parameter(
					null,my_link_name,client_scene_file_name,client_scene_file_charset,system_par);
		if(!(create_parameter.success_load_parameter_flag)){
				ek=null;
				return;
		}
		ek=new engine_kernel(create_parameter,request_response,system_par,original_render,my_part_loader_cont);
	}
	private engine_call_result create_file_result(client_information ci,String file_name,String file_charset)
	{
		File f=new File(file_name);
		if(f.exists())
			file_name=f.getAbsolutePath();
		else{
			debug_information.println("create_file_proxy_url error, file NOT exist\t",file_name);
			return null;
		}
		if(!(f.isFile())){
			debug_information.println("create_file_proxy_url error, file NOT normal file\t",file_name);
			return null;
		}
		if(!(f.canRead())){
			debug_information.println("create_file_proxy_url error, file CAN NOT read\t",file_name);
			return null;
		}
		
		String proxy_url;
		if((proxy_url=ci.get_file_proxy_url(f,ek.system_par))!=null){
			ci.request_response.implementor.redirect_url(proxy_url,ek.scene_par.scene_cors_string);
			ci.statistics_client.response_proxy_data_length+=f.length();
			return null;
		}
		caculate_charset_compress_file_name cccfn=new caculate_charset_compress_file_name(f,ek.system_par);
		if(cccfn.content_type_id<0)
			ci.statistics_client.response_no_type_file_data_length+=f.length();
		else
			ci.statistics_client.modify_response_data_length(cccfn.content_type_id,f.length());
		ci.request_response.response_content_type=cccfn.content_type_str;

		return new engine_call_result(
				cccfn.file_name,file_charset,cccfn.charset_file_name,
				cccfn.compress_file_name,null,ek.scene_par.scene_cors_string);
	}
	private engine_call_result get_engine_result_routine(
			component_load_source_container component_load_source_cont,client_process_bar process_bar,
			String client_scene_file_name,String client_scene_file_charset,
			engine_kernel_and_client_information_container ekcic,
			client_request_response my_request_response,long delay_time_length,
			user_statistics statistics_user,interface_statistics statistics_interface)
	{
		if(ek==null){
			debug_information.println(
					"(ek==null) in function get_engine_result() of engine_container");
			return null;
		}
		if(initilization_flag){
			initilization_flag=false;
			if(ek.component_cont==null) {
				component_load_source_cont=new component_load_source_container(component_load_source_cont);
				ek.load(component_load_source_cont,my_request_response,process_bar);
				if(ek.component_cont.root_component!=null){
					statistics_interface.engine_kernel_number++;
					statistics_interface.engine_component_number+=ek.component_cont.root_component.component_id+1;
				}
				component_load_source_cont.destroy();
			}
		}
		if(ekcic.client_information==null){
			if(ek.component_cont.root_component==null){
				debug_information.println(
					"(ek.component_cont.root_component==null) in function get_engine_result() of engine_container");
				return null;
			}
			ekcic.client_information=new client_information(
					my_request_response,process_bar,ek,statistics_user,statistics_interface);
		}
		ekcic.client_information.request_response=my_request_response;

		String file_name[]=dispatch_request_main.get_engine_result(delay_time_length,ek,ekcic.client_information);
		if(file_name!=null) {
			if(file_name.length<=0)
				file_name=null;
			else if(file_name[0]==null)
				file_name=null;
			else if(file_name.length<2)
				file_name=new String[] {file_name[0],null};
		}
		if(file_name!=null) {
			if(file_name[1]==null)
				file_name[1]=Charset.defaultCharset().name();
			return create_file_result(ekcic.client_information,file_name[0],file_name[1]);
		}

		long output_data_length=ekcic.client_information.request_response.output_data_length;
		ekcic.client_information.statistics_client.response_network_data_length+=output_data_length;
		
		String my_compress_file_name=null;
		if(ek.scene_par.compress_response_length>0)
			if(output_data_length>=ek.scene_par.compress_response_length)
				my_compress_file_name="do_compress_flag";
		
		return new engine_call_result(null,null,null,my_compress_file_name,null,ek.scene_par.scene_cors_string);
	}
	
	synchronized public engine_call_result get_engine_result(client_process_bar process_bar,
			component_load_source_container component_load_source_cont,
			String client_scene_file_name,String client_scene_file_charset,
			engine_kernel_and_client_information_container ekcic,
			client_request_response my_request_response,long delay_time_length,
			user_statistics statistics_user,interface_statistics statistics_interface)
	{
		engine_call_result ret_val;
		try{
			ret_val=get_engine_result_routine(component_load_source_cont,process_bar,
					client_scene_file_name,client_scene_file_charset,ekcic,my_request_response,
					delay_time_length,statistics_user,statistics_interface);
		}catch(Exception e){
			debug_information.println(
					"get_engine_result function of engine_kernel_link_list fail!");
			debug_information.println(e.toString());
			e.printStackTrace();
			ret_val=null;
		};
		return ret_val;
	}
}
