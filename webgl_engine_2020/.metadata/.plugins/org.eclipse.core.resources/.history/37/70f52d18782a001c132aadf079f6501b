function construct_process_bar(my_gl,my_width,my_height)
{
	this.gl				=my_gl;
	this.canvas			=document.createElement("canvas");
	this.canvas.width	=my_width;
	this.canvas.height	=my_height;
	this.ctx			=this.canvas.getContext("2d");
	
	var my_vertex_program=
		"#version 300 es"													+"\n"+
		"precision highp int;"												+"\n"+
		"precision highp float;"											+"\n"+
		
		"in	 vec4 vertex_location,vertex_texture;"							+"\n"+
		"out vec4 frag_texture;"											+"\n"+
		"void main(void)"													+"\n"+
		"{"																	+"\n"+
		"	frag_texture=vertex_texture;"									+"\n"+
		"	gl_Position=vertex_location;"									+"\n"+
		"}"																	+"\n";
	var my_fragment_program=
		"#version 300 es"													+"\n"+
		"precision highp int;"												+"\n"+
		"precision highp float;"											+"\n"+
		"uniform sampler2D progress_bar_texture;"							+"\n"+
		"in vec4 frag_texture;"												+"\n"+
		"layout (location = 0) out vec4 frag_data;"							+"\n"+
		"void main(void)"													+"\n"+
		"{"																	+"\n"+
		"	frag_data=texture(progress_bar_texture,vec2(frag_texture.xy));"	+"\n"+
		"}"																	+"\n";

	var my_vertex=this.gl.createShader(this.gl.VERTEX_SHADER);
	this.gl.shaderSource(my_vertex,my_vertex_program);
	this.gl.compileShader(my_vertex);

	var my_fragment=this.gl.createShader(this.gl.FRAGMENT_SHADER);
	this.gl.shaderSource(my_fragment,my_fragment_program);
	this.gl.compileShader(my_fragment);
	
	this.shader_program=this.gl.createProgram();

	this.gl.attachShader(this.shader_program, my_vertex);
    this.gl.attachShader(this.shader_program, my_fragment);     	
    this.gl.linkProgram (this.shader_program);
    
	this.gl.deleteShader(my_vertex);
	this.gl.deleteShader(my_fragment);

	var buffer_object_data=[
		/*		0.location		*/	-1	-1	-0.999	1	/*	0.texture	*/	0	0	0	1
		/*		1.location		*/	 1	-1	-0.999	1	/*	1.texture	*/	1	0	0	1
		/*		2.location		*/	 1	 1	-0.999	1	/*	2.texture	*/	1	1	0	1
		
		/*		3.location		*/	 1	 1	-0.999	1	/*	3.texture	*/	1	1	0	1
		/*		4.location		*/	-1	 1	-0.999	1	/*	4.texture	*/	0	1	0	1
		/*		5.location		*/	-1	-1	-0.999	1	/*	5.texture	*/	0	0	0	1
	];
	
	this.buffer_object=this.gl.createBuffer();
	this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer_object);
	this.gl.bufferData(this.gl.ARRAY_BUFFER,
			new Float32Array(buffer_object_data),this.gl.STATIC_DRAW,0);
	
	this.gl.useProgram(this.shader_program);
	this.vertex_array_object=this.gl.createVertexArray();
	this.gl.bindVertexArray(this.vertex_array_object);
	this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer_object);
	
	var attribute_id;
	attribute_id=this.gl.getAttribLocation (this.shader_program,"vertex_location");
	this.gl.vertexAttribPointer(attribute_id,4,this.gl.FLOAT,false,32,0);
	attribute_id=this.gl.getAttribLocation (this.shader_program,"vertex_texture");
	this.gl.vertexAttribPointer(attribute_id,4,this.gl.FLOAT,false,32,32);
	
	this.sampler=this.gl.createSampler();
	this.gl.samplerParameteri(this.sampler,	this.gl.TEXTURE_MAG_FILTER,	this.gl.LINEAR);
	this.gl.samplerParameteri(this.sampler,	this.gl.TEXTURE_MIN_FILTER,	this.gl.LINEAR);
	this.gl.samplerParameteri(this.sampler,	this.gl.TEXTURE_WRAP_S,		this.gl.CLAMP_TO_EDGE);
	this.gl.samplerParameteri(this.sampler,	this.gl.TEXTURE_WRAP_T,		this.gl.CLAMP_TO_EDGE);
	
	this.gl.activeTexture(this.gl.TEXTURE0);
	this.text_texture_object=this.gl.createTexture();
	this.gl.bindTexture(this.gl.TEXTURE_2D,this.text_texture_object);
    this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, true);
    this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_BASE_LEVEL,0);
	this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAX_LEVEL, 0);
  	
	this.texture_sampler_uniform=this.gl.getUniformLocation(this.shader_program,"progress_bar_texture");
	
	this.draw_process_bar=function()
	{
		this.gl.clearColor(0,0,0,1);
		this.gl.clearDepth(1.0);
		
		if((viewport_id<=0)&&(target_id==render_target_id)){
			this.gl.disable(this.gl.SCISSOR_TEST);
			this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT|this.gl.STENCIL_BUFFER_BIT);
		}else{
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(my_viewport[0],my_viewport[1],my_viewport[2],my_viewport[3]); 
			this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT|this.gl.STENCIL_BUFFER_BIT);
		};
		my_clear_color=[clear_color[0],clear_color[1],clear_color[2],clear_color[3]];
		my_clear_flag=1;
		
		
		
		this.gl.useProgram(this.shader_program);
		
		this.gl.bindSampler(0,this.sampler);
		this.gl.activeTexture(this.gl.TEXTURE0);
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.text_texture_object);
		this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE,this.canvas);
		
		this.gl.uniform1i(this.texture_sampler_uniform,0);
		
		this.gl.bindVertexArray(this.vertex_array_object);
		this.gl.drawArrays(this.gl.TRIANGLES,0,6);
	};
	
	this.set_process_bar_data=function(
			process_bar_caption,process_bar_current,process_bar_max,
			process_bar_time_length,process_bar_engine_time_length)
	{
		this.ctx.fillStyle="rgb(255,255,255)";
		this.ctx.beginPath();
		this.ctx.moveTo(0,					0);
		this.ctx.lineTo(this.canvas.width,	0);
		this.ctx.lineTo(this.canvas.width,	this.canvas.height);
		this.ctx.lineTo(0,					this.canvas.height);
		this.ctx.lineTo(0,					0);
		this.ctx.fill();
		
		this.ctx.fillStyle="rgb(0,255,0)";
		this.ctx.beginPath();
		this.ctx.moveTo(0,																	0);
		this.ctx.lineTo(Math.round(this.canvas.width*process_bar_current/process_bar_max),	0);
		this.ctx.lineTo(Math.round(this.canvas.width*process_bar_current/process_bar_max),	this.canvas.height);
		this.ctx.lineTo(0,																	this.canvas.height);
		this.ctx.lineTo(0,																	0);
		this.ctx.fill();

		var display_value=process_bar_caption+":";
		
		process_bar_current=1000.0*process_bar_current/process_bar_max;
		display_value+=(Math.round(process_bar_current)/10.0).toString()+"%,";
		display_value+=(Math.round(process_bar_time_length/1000.0)).toString()+"秒,";
		display_value+=(Math.round(process_bar_engine_time_length/1000.0)).toString()+"秒";
		
		this.ctx.font			="bold 64px Arial";
		this.ctx.textAlign		="center";
		this.ctx.textBaseline	="middle";
		this.ctx.fillStyle		="rgb(255,0,0)";
		this.ctx.fillText(display_value,this.canvas.width/2.0,this.canvas.height/2.0);
	};
}