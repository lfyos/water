package driver_audio;

import kernel_camera.camera_result;
import kernel_component.component;
import kernel_driver.instance_driver;
import kernel_engine.client_information;
import kernel_engine.engine_kernel;
import kernel_file_manager.file_reader;

public class extended_instance_driver extends instance_driver
{
	public void destroy()
	{
		super.destroy();
	}
	public extended_instance_driver(component my_comp,int my_driver_id)
	{
		super(my_comp,my_driver_id);
	}
	public void response_init_instance_data(engine_kernel ek,client_information ci)
	{
	}
	public boolean check(engine_kernel ek,client_information ci,camera_result cr)
	{
		return cr.target.main_display_target_flag?false:true;
	}
	public void create_render_parameter(int data_buffer_id,engine_kernel ek,client_information ci,camera_result cr)
	{
		
		ci.request_response.print(data_buffer_id);
	}
	public void create_component_parameter(engine_kernel ek,client_information ci)
	{
		ci.request_response.print("[",comp.component_id);
		ci.request_response.print(",",driver_id);
		ci.request_response.print("]");
	}
	public String[] response_event(engine_kernel ek,client_information ci)
	{
		String str;
		
		if((str=ci.request_response.get_parameter("operation"))==null)
			return null;
		
		extended_component_driver acd=(extended_component_driver)(comp.driver_array[driver_id]);
		
		switch(str) {
		case "audio":
			str=acd.get_audio_file_name();
			str=(str==null)?null:file_reader.separator(str);
			return new String[] {str,null};
		case "ended":
			acd.mark_terminate_flag();
			break;
		case "turn_on":
			acd.turn_on_off(true);
			break;
		case "turn_off":
			acd.turn_on_off(false);
			break;
		case "state":
			ci.request_response.print(acd.get_state()?"true":"false");
			break;
		case "play":
			if((str=ci.request_response.get_parameter("file"))!=null)
				acd.set_audio(comp.component_directory_name+str);
		default:
			break;
		}
		return null;
	}
}
