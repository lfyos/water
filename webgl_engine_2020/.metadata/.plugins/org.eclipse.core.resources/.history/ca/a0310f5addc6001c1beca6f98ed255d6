package driver_distance_tag;

import kernel_camera.camera_result;
import kernel_component.component;
import kernel_component.component_collector;
import kernel_driver.instance_driver;
import kernel_engine.client_information;
import kernel_engine.engine_kernel;
import kernel_transformation.point;

public class extended_instance_driver extends instance_driver
{
	private distance_tag_array tag_array;
	
	public void destroy()
	{
		super.destroy();
		
		if(tag_array!=null) {
			tag_array.destroy();
			tag_array=null;
		}
	}
	public extended_instance_driver(component my_comp,int my_driver_id,int display_precision,double min_view_distance)
	{
		super(my_comp,my_driver_id);
		tag_array=new distance_tag_array(display_precision,min_view_distance);
	}
	public void response_init_instance_data(engine_kernel ek,client_information ci)
	{
	}
	public boolean check(int render_buffer_id,int parameter_channel_id,int data_buffer_id,
			engine_kernel ek,client_information ci,camera_result cr,component_collector collector)
	{
		return cr.target.main_display_target_flag?false:cr.target.selection_target_flag?false:true;
	}
	public void create_render_parameter(
			int render_buffer_id,int parameter_channel_id,int data_buffer_id,
			engine_kernel ek,client_information ci,camera_result cr)
	{
		ci.request_response.print(data_buffer_id);
	}
	public void create_component_parameter(engine_kernel ek,client_information ci)
	{
		ci.request_response.print("[");
		for(int i=0,ni=tag_array.distance_tag_array.length;i<ni;i++){
			distance_tag_item p=tag_array.distance_tag_array[i];
			point p0=p.p0,dx=p.px.sub(p0),dy=p.py.sub(p0);
			ci.request_response.
				print((p.state!=2)?"[1,":"[0,",p.tag_str).
				print(",",p0.x).print(",",p0.y).print(",",p0.z).
				print(",",dx.x).print(",",dx.y).print(",",dx.z).
				print(",",dy.x).print(",",dy.y).print(",",dy.z).
				print((i!=(ni-1))?"],":"]");
		}
		ci.request_response.print("]");
	}
	public String[] response_event(int parameter_channel_id,engine_kernel ek,client_information ci)
	{
		String str=ci.request_response.get_parameter("operation");
		
		switch((str==null)?"":str) {
		default:
			break;
		case "mark":
			if(tag_array.mark_distance_tag(ek,ci))
				return null;
			break;
		case "touch":
			if(tag_array.touch_distance_tag(ek,ci))
				return null;
			break;
		case "switch":
			if(tag_array.switch_distance_tag(ek,ci))
				return null;
			break;
		case "delete":
			if(tag_array.delete_distance_tag(ek,ci))
				return null;
			break;
		case "modify":
			if(tag_array.modify_distance_tag(ek,ci))
				return null;
			break;
		}
		update_component_parameter_version(0);
		return null;
	}
}
