[
	
],

function (	method_id,				parameter_channel_id,	render_id,		part_id,			render_buffer_id,
			component_data_array,	project_matrix,			view_port,		do_render_number,	render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var shader_data						=shader_object.shader_data;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;

	if(method_id!=0)
		return;

	for(var my_length,i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id	=component_data_array[i];
		var component_id=part_component_id_and_driver_id[buffer_id][0];
		var driver_id	=part_component_id_and_driver_id[buffer_id][1];
		
		if(typeof(data_buffer[buffer_id].audio)=="undefined"){
			data_buffer[buffer_id].audio			=document.createElement("audio");
			data_buffer[buffer_id].audio.autoplay	="autoplay";
			data_buffer[buffer_id].audio.controls	="controls";
			data_buffer[buffer_id].audio.hidden		="hidden";
			data_buffer[buffer_id].audio.should_response_flag=false;
		}
		if(data_buffer[buffer_id].audio.should_response_flag)
			if(data_buffer[buffer_id].audio.ended){
				data_buffer[buffer_id].audio.should_response_flag=false;
				render.call_server_component(data_buffer[buffer_id].audio.component_id,
					data_buffer[buffer_id].audio.driver_id,[["operation","ended"],["fresh",Math.random()]]);
			}
		if((my_length=data_buffer[buffer_id].length)>0){
			var component_id=data_buffer[buffer_id][my_length-1][0];
			var driver_id	=data_buffer[buffer_id][my_length-1][1];
			
			data_buffer[buffer_id].length=0;
			data_buffer[buffer_id].audio.should_response_flag=true;
			data_buffer[buffer_id].audio.component_id=component_id;
			data_buffer[buffer_id].audio.driver_id=driver_id;
			
			data_buffer[buffer_id].audio.src=render.create_component_request_string(
				component_id,driver_id,[["operation","audio"],["fresh",Math.random()]]);
		}
	}
}
