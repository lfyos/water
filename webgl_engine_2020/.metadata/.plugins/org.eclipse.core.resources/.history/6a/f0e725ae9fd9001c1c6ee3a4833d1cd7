package driver_distance_tag;

import kernel_camera.camera_result;
import kernel_component.component;
import kernel_component.component_collector;
import kernel_driver.instance_driver;
import kernel_engine.client_information;
import kernel_engine.engine_kernel;
import kernel_transformation.point;
import kernel_common_class.debug_information;
import kernel_common_class.jason_string;

public class extended_instance_driver extends instance_driver
{
	private distance_tag_array tag_array;
	private boolean display_flag[];
	private int modifier_container_id;

	public void destroy()
	{
		super.destroy();
		display_flag=null;
	}
	public extended_instance_driver(component my_comp,int my_driver_id,
			distance_tag_array my_tag_array,int my_modifier_container_id)
	{
		super(my_comp,my_driver_id);
		tag_array=my_tag_array;
		modifier_container_id=my_modifier_container_id;
		display_flag=new boolean[] {};
	}
	public void response_init_instance_data(engine_kernel ek,client_information ci)
	{
		tag_array.load(true,ek);
		ci.request_response.print(jason_string.change_string(tag_array.tag_root_menu_component_name));
	}
	public boolean check(int render_buffer_id,int parameter_channel_id,int data_buffer_id,
			engine_kernel ek,client_information ci,camera_result cr,component_collector collector)
	{
		if(cr.target.selection_target_flag)
			return false;
		if(!(cr.target.main_display_target_flag))
			return true;
		
		if(tag_array.test_location_modify(ek,ci))
			comp.driver_array[driver_id].update_component_parameter_version();
		
		boolean do_update_flag=false;
		if(tag_array.distance_tag_array.length!=display_flag.length) {
			display_flag=new boolean[tag_array.distance_tag_array.length];
			for(int i=0,ni=display_flag.length;i<ni;i++)
				display_flag[i]=true;
			do_update_flag=true;
		}
		for(int i=0,ni=tag_array.distance_tag_array.length;i<ni;i++){
			component distance_comp;
			boolean new_display_flag=false;
			distance_tag_item p=tag_array.distance_tag_array[i];
			if((distance_comp=ek.component_cont.get_component(p.p0_component_id))!=null)
				if(distance_comp.get_effective_display_flag(parameter_channel_id))
					if((distance_comp=ek.component_cont.get_component(p.px_component_id))!=null)
						if(distance_comp.get_effective_display_flag(parameter_channel_id))
							new_display_flag=true;
			if(display_flag[i]^new_display_flag){
				display_flag[i]=new_display_flag;
				do_update_flag=true;
			}
		}
		if(do_update_flag)
			update_component_render_version(0);
		return false;
	}
	public void create_render_parameter(
			int render_buffer_id,int parameter_channel_id,int data_buffer_id,
			engine_kernel ek,client_information ci,camera_result cr)
	{
		ci.request_response.print("[",data_buffer_id).print(",[");
		for(int i=0,ni=tag_array.distance_tag_array.length;i<ni;i++)
			ci.request_response.print((i<=0)?"":",",
					(i>=display_flag.length)?"1":display_flag[i]?"1":"0");
		ci.request_response.print("]]");
	}
	public void create_component_parameter(engine_kernel ek,client_information ci)
	{
		ci.request_response.print("[");
		for(int i=0,ni=tag_array.distance_tag_array.length;i<ni;i++){
			distance_tag_item p=tag_array.distance_tag_array[i];
			component distance_comp=ek.component_cont.get_component(p.p0_component_id);
			point p0=distance_comp.absolute_location.multiply(p.p0);
			point dy=distance_comp.absolute_location.multiply(p.py).sub(p0);
			distance_comp=ek.component_cont.get_component(p.px_component_id);
			point dx=distance_comp.absolute_location.multiply(p.px).sub(p0);
			
			ci.request_response.print(
				(p.state!=2)?"[1,":"[0,",p.get_tag_str(tag_array.display_precision,ek,ci)).
				print(",",p0.x).print(",",p0.y).print(",",p0.z).
				print(",",dx.x).print(",",dx.y).print(",",dx.z).
				print(",",dy.x).print(",",dy.y).print(",",dy.z).
				print((i!=(ni-1))?"],":"]");
		}
		ci.request_response.print("]");
	}
	public String[] response_event(engine_kernel ek,client_information ci)
	{
		String str=ci.request_response.get_parameter("operation");
		
		switch((str==null)?"":str) {
		default:
			break;
		case "mark":
			if(tag_array.mark_distance_tag(ek,ci))
				return null;
			tag_array.save(ek);
			break;
		case "touch":
			if(tag_array.touch_distance_tag(ek,ci))
				return null;
			break;
		case "extra":
			tag_array.set_extra_distance_tag(ek,ci);
			break;
		case "type":
			if(tag_array.set_distance_tag_type(ek,ci))
				return null;
			tag_array.save(ek);
			break;
		case "title":
			if(tag_array.title_distance_tag(ek,ci))
				return null;
			tag_array.save(ek);
			break;
		case "clear":
			if(tag_array.clear_distance_tag(ek,ci))
				return null;
			tag_array.save(ek);
			break;
		case "clear_all":
			if(tag_array.clear_all_distance_tag(ek,ci))
				return null;
			tag_array.save(ek);
			break;
		case "modify":
			if(tag_array.modify_distance_tag(ek,ci))
				return null;
			break;
		case "swap_component":
			debug_information.println("swap_component");
			tag_array.swap_tag_component_selection(ek,ci);
			break;
		case "locate_component":
			debug_information.println("locate_component");
			tag_array.locate_tag_component(modifier_container_id,ek,ci);
			break;
		case "save":
			tag_array.save(ek);
			return null;
		case "load":
			tag_array.load(false,ek);
			break;
		case "jason":
			tag_array.jason(ek,ci);
			return null;
		}
		comp.driver_array[driver_id].update_component_parameter_version();
		return null;
	}
}