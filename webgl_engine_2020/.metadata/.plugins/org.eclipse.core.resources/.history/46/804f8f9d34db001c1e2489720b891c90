uniform int render_code;
uniform float transparency_value;

in vec4  frag_location,frag_real_location,frag_normal,frag_id,frag_texture;
in vec4  color;

layout (location = 0) out vec4 frag_data[4];

void main(void)
{
	if((render_code&6)==2){
		if(dot(target_info.clip_plane,frag_real_location)>0.0){
			discard;
			return;
		}
	}else if((render_code&6)==4){
		if(dot(target_info.clip_plane,frag_real_location)<0.0){
			discard;
			return;
		}	
	}
	
	switch(pass_info.method_id){	
	case 1:	
		frag_data[0]=code_integer(component_info.component_id);
		frag_data[1]=code_integer(int(round(frag_id.x)));
		frag_data[2]=code_integer(int(round(frag_id.y)));
		frag_data[3]=code_integer(int(round(frag_id.z)));
		break;
	case 2:	
		int primitive_type=int(round(frag_id.w));
		frag_data[0]=code_integer((primitive_type==0)?-1:int(round(frag_texture.x)));
		frag_data[1]=code_integer((primitive_type==0)?-1:int(round(frag_texture.y)));
		frag_data[2]=code_float(gl_FragCoord.z*2.0-1.0);
		frag_data[3]=code_float(0.0);
		break;
	default:
		frag_data[0]=vec4(color.rgb,transparency_value);
		frag_data[1]=vec4(0.0,0.0,0.0,1.0);
		frag_data[2]=vec4(0.0,0.0,0.0,1.0);
		frag_data[3]=vec4(0.0,0.0,0.0,1.0);
		break;
	}
}
