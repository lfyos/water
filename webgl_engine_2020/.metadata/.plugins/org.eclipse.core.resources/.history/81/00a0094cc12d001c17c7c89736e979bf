[
	[
		"vertex_location",
		"vertex_normal",
		"vertex_material",
		"vertex_id",
		"vertex_texture",
		"vertex_color"
	],
	[
		"vertex_location",
		"vertex_normal",
		"vertex_material",
		"vertex_id",
		"",
		"",
		"vertex_texture",
		"vertex_color"
	]
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	function draw_part(primitive_type,part_buffer_object,vertex_array_id,selected_flag)
	{
		for(var i=0,ni=part_buffer_object.region_data.length;i<ni;i++){
			var p=part_buffer_object.region_data[i];
			var material_number=part_material[0].material.length-1;
			var material_id=selected_flag?material_number:(p.material_id%material_number);
			
			gl.activeTexture(gl.TEXTURE0);
			gl.bindTexture(gl.TEXTURE_2D,part_material[0].material[material_id].texture_object);
			gl.bindSampler(0,shader_program.sampler);
			gl.uniform1i(shader_program.texture_object_uniform,0);
			
			gl.bindBufferBase(gl.UNIFORM_BUFFER,0,part_material[0].material[material_id].buffer_object);
			gl.bindVertexArray(p.vertex_array_object[vertex_array_id]);
			gl.drawArrays(primitive_type,0,p.item_number);
		}
	}
	function draw_primitive(my_display_bitmap,primitive_type,part_buffer_object,transparency_flag,exit_flag)
	{
		for(var i=0,ni=component_data_array.length;i<ni;i++){
			var buffer_id		=component_data_array[i][0];
			var display_bitmap	=component_data_array[i][1];
			
			while(data_buffer[buffer_id].length>1)
				data_buffer[buffer_id].shift();

			var component_id			=data_buffer[buffer_id][0][0];
			var transparency_value		=data_buffer[buffer_id][0][1];
			var close_clip_plane_number	=data_buffer[buffer_id][0][2];
			var display_value_id		=data_buffer[buffer_id][0][3];
			var selected_flag			=data_buffer[buffer_id][0][4];

			if(transparency_flag^(transparency_value<1.0))
				continue;
			
			var discard_flag=0;	
			if((display_bitmap&my_display_bitmap)==0){
				if((pickup.component_id!=component_id)||exit_flag)
					continue;
				discard_flag=2;	
			}
			var model_matrix_data=component_location.get_component_location(component_id);
			
			switch(primitive_type){
			case gl.TRIANGLES:
				if(close_clip_plane_number>0){
					gl.enable(gl.STENCIL_TEST);
					gl.stencilFunc(gl.ALWAYS,0x01,0x01);
			 		gl.stencilOp(gl.KEEP,gl.INVERT,gl.INVERT);
			 		gl.uniform4f(shader_program.draw_par_uniform,transparency_value,0,0,display_value_id%9);
			 		draw_part(primitive_type,part_buffer_object,Math.floor(display_value_id/9),selected_flag);
			 		
			 		gl.stencilFunc(gl.NOTEQUAL,0x00,0x01);
					gl.stencilOp(gl.KEEP,gl.ZERO,gl.ZERO);
					gl.uniform4f(shader_program.draw_par_uniform,transparency_value,1,0,display_value_id%9);
					draw_part(primitive_type,part_buffer_object,Math.floor(display_value_id/9),selected_flag);
					gl.disable(gl.STENCIL_TEST);
					break;
				}
			case gl.LINES:
			case gl.POINTS:
				gl.disable(gl.STENCIL_TEST);
				gl.uniform4f(shader_program.draw_par_uniform,transparency_value,discard_flag,0,display_value_id%9);
				draw_part(primitive_type,part_buffer_object,Math.floor(display_value_id/9),selected_flag);
				break;
			}
		}
	}

	if(do_render_number.engine_render==0){
		gl.uniformBlockBinding(shader_program,gl.getUniformBlockIndex(shader_program,"material_information"),0);
		shader_program.draw_par_uniform			=gl.getUniformLocation(shader_program,"draw_par");
		shader_program.texture_object_uniform	=gl.getUniformLocation(shader_program,"texture_object");
		
		shader_program.sampler=gl.createSampler();
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MAG_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MIN_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_S,		gl.MIRRORED_REPEAT);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_T,		gl.MIRRORED_REPEAT);
		
		shader_program.destroy=function(gl,shader_program,shader_object,program_id)
		{
			gl.deleteSampler(shader_program.sampler);
			shader_program.destroy=null;
		}
	}
	
	if(do_render_number.engine_part==0){
		part_material[0].material.push(part_material[0].selected_material);
		for(var i=0,ni=part_material[0].material.length;i<ni;i++){
			var p=part_material[0].material[i],buffer_data;
			
			if(typeof(p.vertex_color_type)=="undefined")
				p.vertex_color_type=0;
			if(typeof(p.fragment_color_type)=="undefined")
				p.fragment_color_type=0;
			if(typeof(p.color_parameter)=="undefined")
				p.color_parameter=[0.0,0.0,0.0,1.0];
			if(typeof(p.texture_parameter)=="undefined")
				p.texture_parameter=[0.0,0.0,0.0,1.0];
			if(typeof(p.texture_file)=="undefined")
				p.texture_file=null;
			if(typeof(p.color)=="undefined")
				p.color=[0,0,0,1];

			buffer_data=[p.vertex_color_type,p.fragment_color_type,0,p.shininess];
			
			buffer_data=buffer_data.concat( p.color_parameter);
			buffer_data=buffer_data.concat([p.texture_parameter[0],p.texture_parameter[1],
				Math.cos((p.texture_parameter[2])*(Math.PI/180.0))*p.texture_parameter[3],
				1]);
//				Math.cos(p.texture_parameter[2]*Math.PI/180.0)*p.texture_parameter[3],
//				Math.sin(p.texture_parameter[2]*Math.PI/180.0)*p.texture_parameter[3]);
			
			buffer_data=buffer_data.concat( p.color);
			
			buffer_data=buffer_data.concat( p.ambient);
			buffer_data=buffer_data.concat( p.diffuse);
			buffer_data=buffer_data.concat( p.specular);
			buffer_data=buffer_data.concat( p.emission);
			
			buffer_data=buffer_data.concat(part_material[0].light_color_factor);
			
			p.buffer_object=gl.createBuffer();
			gl.bindBuffer(gl.UNIFORM_BUFFER,p.buffer_object);
			gl.bufferData(gl.UNIFORM_BUFFER,new Float32Array(buffer_data),gl.STATIC_DRAW);
			
			if(p.texture_file==null)
				p.texture_object=null;
			else
				p.texture_object=utility.load_server_part_image(render_id,part_id,[["file",p.texture_file]]);
		}
		part_buffer_object.destroy=function(gl,part_buffer_object,render_id,part_id)
		{
			for(var i=0,ni=part_material[0].material.length;i<ni;i++){
				gl.deleteBuffer(part_material[0].material[i].buffer_object);
				if(part_material[0].material[i].texture_object!=null)
					gl.deleteTexture(part_material[0].material[i].texture_object);
			}
			part_buffer_object.destroy=null;
		}
	}

	switch(method_id){
	case 0://render scene before depth rendering
		break;
	case 1://render scene for component selection
		gl.polygonOffset(1,1);
		gl.enable(gl.POLYGON_OFFSET_FILL);
		draw_primitive(2+32,		gl.TRIANGLES,	part_buffer_object.face, 	false,	false);
		gl.disable(gl.POLYGON_OFFSET_FILL);
		draw_primitive(2+32,		gl.POINTS,		part_buffer_object.point,	false,	false);
		break;
	case 2://render scene for shadow depth
		gl.polygonOffset(1,1);
		gl.enable(gl.POLYGON_OFFSET_FILL);
		draw_primitive(2,			gl.TRIANGLES,	part_buffer_object.face, 	false,	true);
		gl.disable(gl.POLYGON_OFFSET_FILL);	
		break;
	case 3://render depth only,no color rendering
		gl.colorMask(false,false,false,false);	
		
		gl.polygonOffset(1,1);
		gl.enable(gl.POLYGON_OFFSET_FILL);
		draw_primitive(4,			gl.TRIANGLES,	part_buffer_object.face, 	false,	true);
		gl.disable(gl.POLYGON_OFFSET_FILL);
			
		gl.colorMask(true,true,true,true);

		break;
	case 4://render scene after depth rendering
		gl.polygonOffset(1,1);
		gl.enable(gl.POLYGON_OFFSET_FILL);
		draw_primitive(2,			gl.TRIANGLES,	part_buffer_object.face, 	false,	false);
		gl.disable(gl.POLYGON_OFFSET_FILL);
		
		draw_primitive(8,			gl.LINES,		part_buffer_object.frame,	false,	true);
		draw_primitive(16,			gl.LINES,		part_buffer_object.edge,	false,	false);
		draw_primitive(32,			gl.POINTS,		part_buffer_object.point,	false,	false);
		
		break;
	case 5://render scene for blending
		gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);
		gl.enable(gl.BLEND);
		gl.depthMask(false);
	
		gl.polygonOffset(1,1);
		gl.enable(gl.POLYGON_OFFSET_FILL);
		draw_primitive(2,			gl.TRIANGLES,	part_buffer_object.face, 	true,	true);
		gl.disable(gl.POLYGON_OFFSET_FILL);
		
		gl.disable(gl.BLEND);
		gl.depthMask(true);	
		break;
	default:
		return;
	}	
}
