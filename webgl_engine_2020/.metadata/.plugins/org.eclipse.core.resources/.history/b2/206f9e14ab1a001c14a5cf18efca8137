[
	"aVertexPosition",
	"",
	"",
	"aVertexId"
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_program					=render.render_program.render_program[render_id].shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	
	function do_render(method_id,shader_program,buffer_object,primitive_type)
	{
		for(var i=0,ni=component_data_array.length;i<ni;i++){
			var buffer_data=component_data_array[i];
			var buffer_id=buffer_data[0];
			buffer_data=buffer_data[1];
			
			while(data_buffer[buffer_id].length>1)
				data_buffer[buffer_id].shift();

			var component_id		=buffer_data[0];
			var change_type_flag	=(buffer_data[1]>0.5)?true:false;
			
			var ep=render.component_event_processor[component_id];
					
			if(typeof(ep)=="undefined"){
				ep=new Object();
				
				ep.camera_id=camera_id;
				ep.function_id=0;
				ep.last_mouse_move_time=0;
				ep.function_id=0;
				
				ep.send_message	=function(my_component_id,my_operation,my_render)
				{	
					my_render.call_server_component(my_component_id,"all",[["operation",my_operation],
						["function",my_render.component_event_processor[my_component_id].function_id.toString()]]);
				};
				ep.mousedown	=function(event,my_component_id,my_render)
				{
					var ep=my_render.component_event_processor[my_component_id];
					if(event.button==0)
						ep.send_message(my_component_id,"mousedown",my_render);
				};
				ep.mousemove	=function(event,my_component_id,my_render)
				{
					var ep=my_render.component_event_processor[my_component_id],t=(new Date()).getTime();
				
					if((t-ep.last_mouse_move_time)>my_render.modifier_time_parameter.delay_time_length){
						ep.send_message(component_id,"mousemove",my_render);
						ep.last_mouse_move_time=t;
					}
				};
				ep.mousewheel	=function(event,my_component_id,my_render)
				{
					var ep=my_render.component_event_processor[my_component_id],mouse_wheel_number=0;
					
					if(typeof(event.wheelDelta)=="number")
						mouse_wheel_number+=event.wheelDelta/2000.0;	//for chrome,opera
					else if(typeof(event.detail)=="number")
						mouse_wheel_number-=event.detail/50.0;			//for firefox
					else
						return;

					if(ep.change_type_flag){
						camera_object_parameter[ep.camera_id].distance		 /=Math.exp(mouse_wheel_number);
						var distance=camera_object_parameter[ep.camera_id].distance;
						ep.send_message(my_component_id,"mousewheel&distance="+distance.toString(),my_render);
					}else{
						camera_object_parameter[ep.camera_id].half_fovy_tanl/=Math.exp(mouse_wheel_number);
						var half_fovy_tanl=camera_object_parameter[ep.camera_id].half_fovy_tanl;
						ep.send_message(my_component_id,"mousewheel&half_fovy_tanl="+half_fovy_tanl.toString(),my_render);	
					}
				};
				ep.keydown=function(event,my_component_id,my_render)
				{
					my_render.component_event_processor[my_component_id].send_message(
						my_component_id,"keydown&keycode="+event.keyCode.toString(),my_render);
				};
				ep.set_event_component=function(my_component_id,my_render)
				{
					my_render.component_event_processor[my_component_id].function_id=my_render.event_component.mouse.function_id;
				};
				render.component_event_processor[component_id]=ep;
			}
			
			if(method_id==0){
				ep.camera_id=camera_id;
				ep.change_type_flag=change_type_flag;
			}
			
			for(var j=2,nj=buffer_data.length;j<nj;j++){
				var pp=buffer_data[j];
				if((method_id<0.5)||(pp[6]>0.5)){
					gl.uniform4fv(shader_program.p0_uniform,			new Float32Array(pp[0]));
					gl.uniform4fv(shader_program.right_direct_uniform,	new Float32Array(pp[1]));
					gl.uniform4fv(shader_program.up_direct_uniform,		new Float32Array(pp[2]));
					gl.uniform4fv(shader_program.color_uniform,			new Float32Array(pp[(gl.LINES==primitive_type)?3:4]));
					gl.uniform4fv(shader_program.id_uniform,			new Float32Array([method_id+0.01,component_id+0.01,pp[5]+0.01,1.0]));	
					for(var k=0,nk=buffer_object.region_data.length;k<nk;k++){
						var p=buffer_object.region_data[k];
						if(typeof(p.vertex_array_object)!="undefined")
							gl.bindVertexArray(p.vertex_array_object);
						else{
							p.vertex_array_object=gl.createVertexArray();
							gl.bindVertexArray(p.vertex_array_object);
							gl.bindBuffer(gl.ARRAY_BUFFER,p.buffer_object);	
							
							var my_attribute;
							
							my_attribute=gl.getAttribLocation (shader_program, "aVertexPosition");
							gl.vertexAttribPointer(my_attribute,4,gl.FLOAT, false,p.item_size*4,0);
							gl.enableVertexAttribArray(my_attribute);
							
							my_attribute=gl.getAttribLocation (shader_program, "aVertexId");
							gl.vertexAttribPointer(my_attribute,4,gl.FLOAT, false,p.item_size*4,48);
							gl.enableVertexAttribArray(my_attribute);
						}
						gl.drawArrays(primitive_type,0,p.item_number);
					}
				}
			}
			gl.bindVertexArray(null);
		}
	}
	
	if(do_render_number.engine_render==0){
		shader_program.p0_uniform				= gl.getUniformLocation(shader_program, "p0");
		shader_program.right_direct_uniform		= gl.getUniformLocation(shader_program, "right_direct");
		shader_program.up_direct_uniform		= gl.getUniformLocation(shader_program, "up_direct");
		shader_program.color_uniform			= gl.getUniformLocation(shader_program, "color");
		shader_program.id_uniform				= gl.getUniformLocation(shader_program, "point_id");
	}
	
	switch(method_id){
	case 0:
		do_render(method_id,shader_program,part_buffer_object.edge, gl.LINES);
	case 1:
		do_render(method_id,shader_program,part_buffer_object.point,gl.POINTS);
		break;
	default:
		break;
	}
}
