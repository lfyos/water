[
	[
		"vertex_location",
		"",
		"",
		"vertex_id"
	]
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,	part_id,
			render_buffer_id,	component_data_array,	project_matrix,			view_port,	do_render_number,
			render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var shader_data						=shader_object.shader_data;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;
	
	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	function construct_mouse_event_listener(component_id)
	{
		var ep=new Object();
		ep.alf="0090";

		ep.pickupmousedown=function(event,my_component_id,render)
		{
			var my_ep=render.component_event_processor[my_component_id];
			var alf=parseFloat(my_ep.alf);
			
			switch(event.button){
			default:
				break;
			case 0:
				render.call_server_component(my_component_id,0,
					[["operation","body_face_direct"],["coordinate","global"],
					["type",event.shiftKey?"true":"false"]]);
				break;
			case 2:
				if(event.ctrlKey)
					if(event.altKey)
						alf/=1000.0;
					else
						alf/=100.0;
				else
					if(event.altKey)	
						alf/=10.0;
					else
						alf/=1.0;
				render.call_server_component(my_component_id,0,
					[["operation","body_face_rotate"],["coordinate","global"],
					 ["type",event.shiftKey?"true":"false"],["alf",alf.toString()]]);
				break;
			}
			return true;
		};
		ep.pickupkeyup=function(event,my_component_id,render)
		{
			var my_ep=render.component_event_processor[my_component_id];
			
			var alf=parseFloat(my_ep.alf);
			alf=(event.shiftKey||event.ctrlKey)?(-alf):alf;
			if(event.altKey)
				alf=alf/10.0;
			alf*=Math.PI/180.0;

			switch(event.keyCode){
			case 48:	//	0-9
			case 49:
			case 50:
			case 51:
			case 52:
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
				my_ep.alf=my_ep.alf+(event.keyCode-48).toString();
				my_ep.alf=my_ep.alf.substring(my_ep.alf.length-3,my_ep.alf.length);
				break;
			case 8:		//backspace
				render.call_server_component(my_component_id,"all",[["operation","retreat"]]);
				break;
			case 82://R
				render.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","1"],						["y0","0"],["z0","0"],
					    	["x1",Math.cos(alf).toString()],["y1","0"],["z1",Math.sin(alf).toString()]
					]);
				break;
			case 76://L
				render.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","1"],						 ["y0","0"],["z0","0"],
					    	["x1",Math.cos(-alf).toString()],["y1","0"],["z1",Math.sin(-alf).toString()]
					]);
				break;
			case 85://U
				render.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","0"],["y0","0"],						["z0","1"],
					    	["x1","0"],["y1",Math.sin(-alf).toString()],["z1",Math.cos(-alf).toString()]
					]);
				break;
			case 68://D
				render.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","0"],["y0","0"],						["z0","1"],
					    	["x1","0"],["y1",Math.sin(alf).toString()],	["z1",Math.cos(alf).toString()]
					]);
				break;
			case 83://S
				render.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","1"],						["y0","0"],						["z0","0"],
					    	["x1",Math.cos(alf).toString()],["y1",Math.sin(alf).toString()],["z1","0"]
					]);
				break;
			case 84://T
				render.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"camera"],
					    	["x0","1"],						 ["y0","0"],						["z0","0"],
					    	["x1",Math.cos(-alf).toString()],["y1",Math.sin(-alf).toString()],	["z1","0"]
					]);
				break;
			case 88://X
				render.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"global"],
					    	["x0","0"],["y0","1"],						["z0","0"],
					    	["x1","0"],["y1",Math.cos(-alf).toString()],["z1",Math.sin(-alf).toString()]
					]);
				break;
			case 89://Y
				render.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"global"],
					    	["x0","0"],						 ["y0","0"],["z0","1"],
					    	["x1",Math.sin(-alf).toString()],["y1","0"],["z1",Math.cos(-alf).toString()]
					]);
				break;
			case 90://Z
				render.call_server_component(my_component_id,0,
					[		["operation",	"rotate"],
							["coordinate",	"global"],
					    	["x0","1"],						 ["y0","0"],					  ["z0","0"],
					    	["x1",Math.cos(-alf).toString()],["y1",Math.sin(-alf).toString()],["z1","0"]
					]);
				break;
			default:
				break;
			}
			return true;
		};
		render.component_event_processor[component_id]=ep;
		return;
	};
	function caculate_matrix(component_id)
	{
		var x0					=part_material[0];
		var y0					=part_material[1];
		var scale				=part_material[2];
		var box_distance		=part_material[3];
			
		var left_down_x	=camera_render_parameter.view_volume_box[0][0];
		var left_down_y	=camera_render_parameter.view_volume_box[0][1];
		var right_up_x	=camera_render_parameter.view_volume_box[1][0];
		var right_up_y	=camera_render_parameter.view_volume_box[1][1];
		var view_x		=((left_down_x+right_up_x)+(right_up_x-left_down_x)*x0)/2.0;
		var view_y		=((left_down_y+right_up_y)+(right_up_y-left_down_y)*y0)/2.0
		
		var distance			=camera_object_parameter[camera_id].distance;
		var half_fovy_tanl		=camera_object_parameter[camera_id].half_fovy_tanl;
		var vertical_distance	=distance*half_fovy_tanl;
		var offset_x			=view_x*vertical_distance;
		var offset_y			=view_y*vertical_distance;
		var offset_z			=project_matrix.distance-project_matrix.near_value-scale*vertical_distance*box_distance/2.0;
		
		component_location.modify_one_component_location(component_id,
			computer.matrix_multiplication(
				component_location.get_component_location_routine(camera_component_id),
				computer.create_move_rotate_matrix(offset_x,offset_y,offset_z,0,0,0)));

		part_material[4]=vertical_distance*scale;
	};
	function draw_direction_buttion(method_id,primitive_type,
		shader_program,part_buffer_object,camera_render_parameter)
	{			
		for(var i=0,n=component_data_array.length;i<n;i++){
			var buffer_id			=(component_data_array[i]>=0)?(component_data_array[i]):(-1-component_data_array[i]);
			var main_display_flag	=(component_data_array[i]>=0)?true:false;
			var component_id		=part_component_id_and_driver_id[buffer_id][0];
			var driver_id			=part_component_id_and_driver_id[buffer_id][1];
			
			while(data_buffer[buffer_id].length>1)
				data_buffer[buffer_id].shift();
				
			if(typeof(render.component_event_processor[component_id])!="object")
				construct_mouse_event_listener(component_id);
				
			if(main_display_flag)
				caculate_matrix(component_id);

			gl.uniform4fv(shader_program.par_uniform,new Float32Array([part_material[4],0,0,1.0]));
			component_location.get_component_location(component_id);
			for(var j=0,nj=part_buffer_object.region_data.length;j<nj;j++){
				var p=part_buffer_object.region_data[j];
				gl.bindVertexArray(p.vertex_array_object[0]);
				gl.drawArrays(primitive_type,0,p.item_number);	
			}
		}
		gl.bindVertexArray(null);
	}
	
	if(do_render_number.engine_render==0)
		shader_program.par_uniform=gl.getUniformLocation(shader_program,"par");
		
	if(pass_id!=0)
		return;
	
	switch(method_id){
	case 0:
		draw_direction_buttion(method_id,gl.LINES,shader_program,
			part_buffer_object.edge,camera_render_parameter);
	case 1:
		gl.polygonOffset(1,1);
		gl.enable(gl.POLYGON_OFFSET_FILL);
		draw_direction_buttion(method_id,gl.TRIANGLES,shader_program,
			part_buffer_object.face,camera_render_parameter);
		gl.disable(gl.POLYGON_OFFSET_FILL);
		break;
	default:
		break;
	}
}
