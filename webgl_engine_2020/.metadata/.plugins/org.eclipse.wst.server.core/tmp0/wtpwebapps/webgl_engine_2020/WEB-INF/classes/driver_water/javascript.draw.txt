[
	[
		"aVertexPosition"
	]
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	if(do_render_number.engine_render==0){
		shader_program.sampler=gl.createSampler();
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MAG_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MIN_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_S,		gl.MIRRORED_REPEAT);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_T,		gl.MIRRORED_REPEAT);

		shader_program.par					= gl.getUniformLocation(shader_program, "par");
		shader_program.ex_par				= gl.getUniformLocation(shader_program, "ex_par");
				
		shader_program.mirror_project_matrix= gl.getUniformLocation(shader_program, "mirror_project_matrix");
		shader_program.mirror_texture		= gl.getUniformLocation(shader_program, "mirror_texture");
		shader_program.grass_texture		= gl.getUniformLocation(shader_program, "grass_texture");
		shader_program.earth_texture		= gl.getUniformLocation(shader_program, "earth_texture");
		shader_program.boundary_uniform		= gl.getUniformLocation(shader_program, "boundary");
	}
	
	part_buffer_object=part_buffer_object.face;
	if(do_render_number.engine_part==0){
		part_buffer_object.grass=utility.load_server_part_image(render_id,part_id,[["file","grass.png"]]);	
		part_buffer_object.earth=utility.load_server_part_image(render_id,part_id,[["file","earth.png"]]);	
	}
	
	if(method_id!=5)
		return;
		
	gl.activeTexture(gl.TEXTURE0);
	gl.bindTexture(gl.TEXTURE_2D,part_buffer_object.grass);
	gl.bindSampler(0,shader_program.sampler);
	gl.uniform1i(shader_program.grass_texture,0);
	
	gl.activeTexture(gl.TEXTURE1);
	gl.bindTexture(gl.TEXTURE_2D,part_buffer_object.earth);
	gl.bindSampler(1,shader_program.sampler);
	gl.uniform1i(shader_program.earth_texture,1);

	gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);
	gl.enable(gl.BLEND);
	gl.depthMask(false);
	
	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var pp=component_data_array[i];
		var buffer_id=pp[0],mirror_id=pp[1];
		
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
		
		pp=data_buffer[buffer_id][0];
		var boundry_data=[pp[0],pp[1],pp[2],pp[3]];
		var height=pp[4],amplitude=pp[5],wavelength=pp[6],attenuation=pp[7];
		
		gl.uniform4fv(shader_program.boundary_uniform,new Float32Array(boundry_data));
		
		var alf=((new Date()).getTime()%60000)/300.0;
		
		gl.uniform4fv(shader_program.par,	new Float32Array([Math.PI*alf,height,0.0,1.0]));
		gl.uniform4fv(shader_program.ex_par,new Float32Array([amplitude,wavelength,attenuation,1.0]));

		if(mirror_id>=0){
			gl.activeTexture	(gl.TEXTURE2);
			gl.bindTexture		(gl.TEXTURE_2D,							render.target[mirror_id].texture[0]);
			gl.bindSampler		(2,shader_program.sampler);
			gl.uniform1i		(shader_program.mirror_texture,			2);
			gl.uniformMatrix4fv	(shader_program.mirror_project_matrix,	false,render.target[mirror_id].project_matrix.matrix);
		}
		for(var j=0,nj=part_buffer_object.region_data.length;j<nj;j++){
			var p=part_buffer_object.region_data[j];
			gl.bindVertexArray(p.vertex_array_object[0]);
			gl.drawArrays(gl.TRIANGLES,0,p.item_number);
		}
		gl.bindVertexArray(null);
	}
	
	gl.disable(gl.BLEND);
	gl.depthMask(true);
}
