[
	
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,	part_id,
			render_buffer_id,	component_data_array,	project_matrix,			view_port,	do_render_number,
			render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var shader_data						=shader_object.shader_data;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	
	if(method_id!=0)
		return;	
		
	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id=component_data_array[i];
		
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
		
		var component_id					=data_buffer[buffer_id][0][0];
		var screen_rectangle_component_id	=data_buffer[buffer_id][0][1];
		var change_type_flag				=(data_buffer[buffer_id][0][2]>0.5)?true:false;
		
		var ep=render.component_event_processor[component_id];
		
		if(typeof(ep)=="undefined"){
			ep=new Object();
			ep.p0=[0.0,0.0,0.0,1.0];
			ep.dp=[0.0,0.0,0.0,0.0];
			ep.mouse_up_flag=true;
			ep.change_type_flag=true;
			ep.function_id=0;
			
			ep.control_code=function(event)
			{
				return ["control",(event.shiftKey?1:0)+(event.ctrlKey?2:0)+(event.altKey?4:0)];
			};
			ep.mousedown=function(event,my_component_id,my_render)
			{
				if(event.button!=0)
					return;
				var pinpoint,my_ep;
				if((pinpoint=utility.get_pinpoint())==null)
					return;
				my_ep=my_render.component_event_processor[my_component_id];
				my_ep.mouse_up_flag=false;
				my_ep.p0=[pinpoint.x,pinpoint.y,-0.990,1.0];	
				my_ep.dp=[0.0,0.0,0.0,0.0];
			};
			ep.mouseup=function(event,my_component_id,my_render)
			{
				if(event.button!=0)
					return;
				var my_ep=my_render.component_event_processor[my_component_id];
				var screen_rectangle_ep=my_render.component_event_processor[screen_rectangle_component_id];
				
				if(typeof(screen_rectangle_ep)!="undefined")
					screen_rectangle_ep.data=[0,0,0,0];
				
				if(ep.mouse_up_flag)	
					return;
				var pinpoint;
				if((pinpoint=utility.get_pinpoint())==null)
					return;
					
				my_ep.mouse_up_flag=true;
				var dx=pinpoint.x-my_ep.p0[0];
				var dy=pinpoint.y-my_ep.p0[1];
				
				if((dx*dx+dy*dy)<(my_render.computer.min_value2())){
					my_render.call_server_component(my_component_id,0,[
						["operation",		"single"],
						["function",		my_ep.function_id],		ep.control_code(event)]);
				}else{
					my_render.call_server_component(my_component_id,0,
					[
						["operation","many"	],		["function",my_ep.function_id	],
						["x0",my_ep.p0[0]		],		["y0",my_ep.p0[1]				],
						["x1",pinpoint.x		],		["y1",pinpoint.y				],
						ep.control_code(event)
					]);
					
					if(typeof(screen_rectangle_ep)!="undefined")
						screen_rectangle_ep.data=[my_ep.p0[0],my_ep.p0[1],my_ep.p0[0]+my_ep.dp[0],my_ep.p0[1]+my_ep.dp[1]];
				}
			};
			ep.mousemove=function(event,my_component_id,my_render)
			{
				if(event.button!=0)
					return;
				var my_ep=my_render.component_event_processor[my_component_id];
				var screen_rectangle_ep=my_render.component_event_processor[screen_rectangle_component_id];
				
				if(typeof(screen_rectangle_ep)!="undefined")
					screen_rectangle_ep.data=[0,0,0,0];
				
				if(my_ep.mouse_up_flag)
					return;
					
				var pinpoint;
				if((pinpoint=utility.get_pinpoint())==null)
					return;
				
				my_ep.dp=[pinpoint.x-my_ep.p0[0],pinpoint.y-my_ep.p0[1],0.0,0.0];
				
				if(typeof(screen_rectangle_ep)!="undefined")
					screen_rectangle_ep.data=[my_ep.p0[0],my_ep.p0[1],my_ep.p0[0]+my_ep.dp[0],my_ep.p0[1]+my_ep.dp[1]];
			};
			ep.mousewheel=function(event,my_component_id,my_render)
			{
				var my_ep=my_render.component_event_processor[my_component_id],mouse_wheel_number=0;
		
				if(typeof(event.wheelDelta)=="number")
					mouse_wheel_number+=event.wheelDelta;//for chrome,opera
				else if(typeof(event.detail)=="number")
					mouse_wheel_number-=event.detail*40;//for firefox
				else
					return;
					
				if(my_ep.change_type_flag)
					camera_object_parameter[my_ep.camera_id].distance		/=Math.exp(mouse_wheel_number/2000);
				else
					camera_object_parameter[my_ep.camera_id].half_fovy_tanl	/=Math.exp(mouse_wheel_number/2000);	

				var distance		=camera_object_parameter[my_ep.camera_id].distance;
				var half_fovy_tanl	=camera_object_parameter[my_ep.camera_id].half_fovy_tanl;
								
				my_render.call_server_component(my_component_id,0,[
					["operation",		"scale"],	
					["distance",		distance],
					["half_fovy_tanl",	half_fovy_tanl],	ep.control_code(event)]);			
			};
			ep.touchstart	=function(event,my_component_id,my_render)
			{
				event.preventDefault();
				
				var ep=my_render.component_event_processor[my_component_id];
				
				if(event.type!="touchstart")
					return;

				var btn=my_render.canvas;
				var x0=event.touches[0].clientX-btn.offsetLeft;
				var y0=btn.clientHeight-(event.touches[0].clientY-btn.offsetTop);	
						
				x0 =2.0*((x0/btn.clientWidth )-0.5);
				y0 =2.0*((y0/btn.clientHeight)-0.5);
					
				var x1=x0,y1=y0;
				
				if(event.touches.length>1){
					x1=event.touches[1].clientX-btn.offsetLeft;
					y1=btn.clientHeight-(event.touches[1].clientY-btn.offsetTop);	
						
					x1 =2.0*((x1/btn.clientWidth )-0.5);
					y1 =2.0*((y1/btn.clientHeight)-0.5);
				}
				my_render.view.x =x1;
				my_render.view.y =y1;
	
				switch(event.touches.length){
				case 1:
					ep.mousedown(event,my_component_id);
					break;
				case 2:
					ep.mouseup(event,my_component_id);
					break;
				}		
			};
			ep.set_event_component=function(my_component_id,my_render)
			{
				my_render.component_event_processor[my_component_id].function_id=my_render.event_component.mouse.function_id;
			};
			render.component_event_processor[component_id]=ep;
		}
		render.component_event_processor[component_id].camera_id=camera_id;
		render.component_event_processor[component_id].change_type_flag=change_type_flag;
	}
}
