#define MAX_LIGHT_NUMBER 4

uniform light_position
{
	vec4 position		[MAX_LIGHT_NUMBER];
	vec4 color_factor	[MAX_LIGHT_NUMBER];
	float shininess		[MAX_LIGHT_NUMBER];
	
}light_par;

uniform material_information
{
	vec4 base_color_factor;
	vec4 normal_factor,occlusion_factor,emissive_factor;

	float metallic_factor,roughness_factor;	

	float base_color_factor_texture_id;
	float metallic_roughness_factor_texture_id;
	
	float normal_texture_id;
	float occlusion_texture_id;
	float emissive_texture_id;
}material_info;

uniform int render_code;
uniform float transparency_value;

in	vec4  vertex_location,vertex_normal,vertex_id,vertex_texture;
out vec4  frag_location,frag_real_location,frag_normal,frag_id,frag_texture;
out vec4  color;

void caculate_color()
{
	color=vec4(0.0,0.0,0.0,1.0);
	vec3 to_eye=normalize(target_info.eye_point.xyz-frag_location.xyz);
	for(int i=0;i<MAX_LIGHT_NUMBER;i++){
		vec3 to_light=normalize(light_par.position[i].xyz-frag_location.xyz);
		vec3 half_vector=normalize(to_light+to_eye);
		color.rgb+=max(0.1,dot(to_light,frag_normal.xyz))*(light_par.color_factor[i].w)*(light_par.color_factor[i].rgb);
		float scale;
		if((scale=max(0.1,dot(half_vector,frag_normal.xyz)))>0.0)
			color.rgb+=pow(scale,light_par.shininess[i])*(1.0-light_par.color_factor[i].w)*(light_par.color_factor[i].rgb);
	}
	color.rgb*=material_info.base_color_factor.rgb;
}

void main(void)
{
	frag_location=component_info.model_matrix*vec4(vertex_location.xyz,1.0);
	frag_real_location=frag_location;
	if((render_code&6)==4){
		frag_location=target_info.clip_plane_matrix*frag_location;
		frag_normal=vec4(normalize(target_info.clip_plane.xyz),1.0);
	}else{
		frag_normal=component_info.model_matrix*vec4(vertex_location.xyz+vertex_normal.xyz,1.0);
		frag_normal=vec4(normalize(frag_normal.xyz/frag_normal.w-frag_location.xyz/frag_location.w),1.0);
	}
	
	frag_id			=vertex_id;
	frag_texture	=vertex_texture;
	
	gl_Position=target_info.projection_matrix*frag_location;
	
	caculate_color();
}
