[
	
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	
	function add_one_proxy(component_id,driver_id,version_string,time_length,
					file_name,stamp_string,original_url,my_proxy,my_encode_flag)
	{
		var my_url =my_proxy;
		
		if(my_encode_flag){
			my_url+=encodeURIComponent(file_name);
			my_url+="&date="+encodeURIComponent(stamp_string);
			my_url+="&length="+encodeURIComponent("0");
			my_url+="&original="+encodeURIComponent(original_url);
		}else
			my_url+=file_name;
		
		try{
			var start_time=(new Date()).getTime();
			var my_ajax=new XMLHttpRequest();
			my_ajax.onreadystatechange=function()
			{
				if(my_ajax.readyState!=4)
					return;
				
				if(render.terminate_flag)
					return;
				
				if(my_ajax.status!=200){
					data_buffer.can_do_register_flag=true;
					if(render.parameter.debug_mode_flag){
						alert("Proxy status is wrong:"+my_ajax.status.toString());
						alert(my_url);
						alert(my_proxy);
						alert(file_name);
						alert(stamp_string);
						alert(original_url);
						alert(my_encode_flag);
					}else{
						console.log("Proxy status is wrong:"+my_ajax.status.toString());
						console.log(my_url);
						console.log(my_proxy);
						console.log(file_name);
						console.log(stamp_string);
						console.log(original_url);
						console.log(my_encode_flag);
					}
					return;
				}
				if(my_ajax.responseText.substring(0,version_string.length)!=version_string){
					data_buffer.can_do_register_flag=true;
					
					if(render.parameter.debug_mode_flag){
						alert("Proxy version is different:"+my_ajax.responseText+":"+version_string);
						alert(my_url);
					}else{
						console.log("Proxy version is different:"+my_ajax.responseText+":"+version_string);
						console.log(my_url);
					}
					return;
				}
				if(((new Date()).getTime()-start_time)>time_length){
					data_buffer.can_do_register_flag=true;
					
					if(render.parameter.debug_mode_flag)
						alert("Too long proxy latency!");
					else
						console.log("Too long proxy latency!");
					return;
				}
				render.call_server_component(component_id,driver_id,
					[
						["operation","append"],
						["proxy_url",encodeURIComponent(encodeURIComponent(my_proxy))],
						["proxy_encode",my_encode_flag?"true":"false"]
					],
					function()
					{
						data_buffer.can_do_register_flag=true;
						data_buffer.complete_register_flag=true;
					},
					function()
					{
						data_buffer.can_do_register_flag=true;
					});
			};

			my_ajax.open("GET",my_url,true);
			my_ajax.send(null);
			
			data_buffer.can_do_register_flag=false;
			
		}catch(e){
			if(render.parameter.debug_mode_flag)
				alert(e.toString());
			else
				console.log(e.toString());
		};
	}
	
	if(typeof(data_buffer.can_do_register_flag)!="boolean"){
		data_buffer.can_do_register_flag=true;
		data_buffer.complete_register_flag=false;
	}
	for(var i=0,n=component_data_array.length;i<n;i++){
		var buffer_id=component_data_array[i];
		if(data_buffer[buffer_id].length>0){
			var p=data_buffer[buffer_id][0];
			if((p.proxy_list.length<=0)||(data_buffer.complete_register_flag))
				data_buffer[buffer_id].shift();
			else if(data_buffer.can_do_register_flag){
				var proxy_list=p.proxy_list.shift();
				var my_proxy=proxy_list[0],my_encode_flag=proxy_list[1];
				add_one_proxy(p.component_id,p.driver_id,p.version_string.trim(),p.time_length,
					p.file_name.trim(),p.stamp_string,p.original_url,my_proxy,my_encode_flag);
			}else
				return;
		}
	}
}
