/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.14
 * Generated at: 2021-06-21 08:13:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;
import java.io.InputStream;
import kernel_service.jsp_network_implementation;
import kernel_file_manager.file_writer;
import format_convert.protected_cadex_converter;
import format_convert.web_converter;
import kernel_common_class.debug_information;

public final class upload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("kernel_common_class.debug_information");
    _jspx_imports_classes.add("format_convert.protected_cadex_converter");
    _jspx_imports_classes.add("format_convert.web_converter");
    _jspx_imports_classes.add("kernel_file_manager.file_writer");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.io.InputStream");
    _jspx_imports_classes.add("kernel_service.jsp_network_implementation");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"Pragma\" content=\"no-cache\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<title>\r\n");
      out.write("上传列表\r\n");
      out.write("</title>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");

	String format_string=request.getParameter("format");
	format_string=(format_string==null)?"NoExternal":(format_string.toLowerCase());
	out.println("var format_string=\""+format_string+"\";");

      out.write("\r\n");
      out.write("\r\n");
      out.write("function file_name_change()\r\n");
      out.write("{\r\n");
      out.write("\tvar fi=document.getElementById(\"file\");\r\n");
      out.write("\tif(fi.files.length<=0){\r\n");
      out.write("\t\talert(\"请选择文件\");\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tvar file_name=encodeURIComponent(encodeURIComponent(fi.files[0].name));\r\n");
      out.write("\r\n");
      out.write("\tvar reader=new FileReader();\r\n");
      out.write("\treader.onloadend=function()\r\n");
      out.write("\t{\r\n");
      out.write("\t\tvar my_ajax=new XMLHttpRequest();\r\n");
      out.write("\t\tmy_ajax.onreadystatechange=function()\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tif(my_ajax.readyState!=4)\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\tif(my_ajax.status!=200)\r\n");
      out.write("\t\t\t\talert(\"上传失败\");\r\n");
      out.write("\t\t\telse\r\n");
      out.write("\t\t\t\twindow.open(\"./upload.jsp?format=\"+format_string,\"_self\");\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tmy_ajax.open(\"POST\",\"./upload.jsp?format=\"+format_string+\"&file=\"+file_name,true);\r\n");
      out.write("\t\tmy_ajax.send(reader.result);\r\n");
      out.write("\t};\r\n");
      out.write("\treader.readAsArrayBuffer(fi.files[0]);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div align=\"center\" >\r\n");
      out.write("\r\n");
      out.write("<br/>\t选择文件上传：\t<input type=\"file\"\tid=\"file\"\t\tname=\"file\"\t\t\tonchange=\"file_name_change();\">\r\n");
      out.write("\r\n");
      out.write("<br/>\r\n");
      out.write("<p>\r\n");
      out.write("已经上传文件如下所示，打开如下网页即可显示,每个中括号中的名称是观测方向，分别是xyz、yzx、zxy，前一个超链接是独立方式观测，后一个超链接是合作方式观测。\r\n");
      out.write("</p>\r\n");

	response.setCharacterEncoding("UTF-8");

	String directory_name=System.getenv("liufuyan_sigma_directory");

	File f;
	if((f=new File(directory_name)).exists())
		if(f.isDirectory()){
			String file_list[]=f.list();
			if(file_list!=null)
				for(int i=0,ni=file_list.length;i<ni;i++){
					f=new File(directory_name+file_list[i]);
					if(!(f.isDirectory())){
						if(!(f.isFile()))
							continue;
						String ext_str=".zip";
						int index_id=file_list[i].lastIndexOf(ext_str);
						if(index_id<0)
							continue;
						if(file_list[i].substring(index_id).compareTo(ext_str)!=0)
							continue;
						file_list[i]=file_list[i].substring(0,index_id);
					}
					
					try{
						out.println(file_list[i]);
									
						out.print(  "&nbsp;&nbsp;[<a href=\"chinese/draw.jsp?scene_name=cad&coordinate=location.xyz.txt");
						out.println("&sub_directory="+file_list[i]+"\"  target=\"_self\">xyz</a>");
						out.print(  "&nbsp;,&nbsp;<a href=\"chinese/draw.jsp?scene_name=cad&coordinate=location.xyz.txt");
						out.println("&sub_directory="+file_list[i]+"&link_name="+file_list[i]+"\"  target=\"_self\">xyz</a>]");
									
						out.print(  "&nbsp;&nbsp;[<a href=\"chinese/draw.jsp?scene_name=cad&coordinate=location.yzx.txt");
						out.println("&sub_directory="+file_list[i]+"\"  target=\"_self\">yzx</a>");
						out.print(  "&nbsp;,&nbsp;<a href=\"chinese/draw.jsp?scene_name=cad&coordinate=location.yzx.txt");
						out.println("&sub_directory="+file_list[i]+"&link_name="+file_list[i]+"\"  target=\"_self\">yzx</a>]");
									
						out.print(  "&nbsp;&nbsp;[<a href=\"chinese/draw.jsp?scene_name=cad&coordinate=location.zxy.txt");
						out.println("&sub_directory="+file_list[i]+"\"  target=\"_self\">zxy</a>");
						out.print(  "&nbsp;,&nbsp;<a href=\"chinese/draw.jsp?scene_name=cad&coordinate=location.zxy.txt");
						out.println("&sub_directory="+file_list[i]+"&link_name="+file_list[i]+"\"  target=\"_self\">zxy</a>]");
									
						out.println("<br/>");
					}catch(Exception e){
						;
					}
				}
		}

	do{
		String file_name=request.getParameter("file");
		if(file_name==null)
			break;
		if(file_name.trim().isEmpty())
			break;
		try{
			file_name=java.net.URLDecoder.decode(file_name,"UTF-8");
			file_name=java.net.URLDecoder.decode(file_name,"UTF-8");
		}catch(Exception e){
			;
		}
		
		String source_file_name				=directory_name+"_source_"+file_name;
		String jar_file_name				=directory_name+"lfy.jar";
		String max_convert_time_length_str	="1800000";
		String memory_string				="1024";
		String max_step_number				="250";

		file_writer.file_delete(source_file_name);
		file_writer fw=new file_writer(source_file_name,null);
		if(fw.error_flag) {
			fw.close();
			break;
		}
		InputStream is=new jsp_network_implementation(request,response,application).get_content_stream();
		if(is==null){
			fw.close();
			file_writer.file_delete(source_file_name);
			break;
		}
		try{
			byte buffer[]=new byte[8192];
			for(int my_length;(my_length=is.read(buffer))>=0;)
				fw.write(buffer,0,my_length);
			fw.close();
		}catch(Exception e){
			fw.close();
			file_writer.file_delete(source_file_name);
			e.printStackTrace();
			break;
		}
		protected_cadex_converter.do_convert(
			source_file_name,directory_name+file_name,jar_file_name,
			max_convert_time_length_str,memory_string,max_step_number,
			"0",format_string);
		
		file_writer.file_delete(source_file_name);

		String url=request.getRequestURL().toString();
		url=url.substring(0,url.lastIndexOf('/'))+"/interface.jsp";
		
		web_converter.do_convert(url,"NoName","NoPassword","cad",
			new String[][]{
			new String[] {"sub_directory",		file_name},			//显示内容
 			new String[] {"coordinate",			"location.xyz.txt"},//坐标系选择
 			new String[] {"change_part",		""},				//part换名
 			new String[] {"change_component",	""},				//component换名
 			new String[] {"part_type",			""},				//part类型
 			new String[] {"max_loading_number",	"10"}				//同时下载数量
		});
		
	}while(false);

      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
