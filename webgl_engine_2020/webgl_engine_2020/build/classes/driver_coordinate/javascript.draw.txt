[
	[
		"vertex_location",
		"", 
		"vertex_material"
	]
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	
	if(do_render_number.engine_render==0){
		shader_program.model_matrix_uniform =gl.getUniformLocation(shader_program,"model_matrix");
		shader_program.line_length_uniform	=gl.getUniformLocation(shader_program,"line_length");
	}
	if(method_id!=4)
		return;

	var buffer_object=part_buffer_object.edge;
	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_data=component_data_array[i];
		for(var j=0,nj=buffer_data.length;j<nj;j++){
			var loca,line_length=buffer_data[j][0];
			if(buffer_data[j][1]>=0)
				loca=component_location.get_component_location(buffer_data[j][1]);
			else{
				line_length=camera_object_parameter[camera_id].distance*line_length;
				loca=component_location.get_component_location(camera_object_parameter[camera_id].component_id);
				var camera_point=computer.caculate_coordinate(loca,0,0,0);
				loca=computer.create_move_rotate_matrix(camera_point[0],camera_point[1],camera_point[2],0,0,0);
			}
			gl.uniform1f(shader_program.line_length_uniform,line_length);
			gl.uniformMatrix4fv(shader_program.model_matrix_uniform,false,new Float32Array(loca));
				
			for(var k=0,nk=buffer_object.region_data.length;k<nk;k++){
				var p=buffer_object.region_data[k];
				gl.bindVertexArray(p.vertex_array_object[0]);
				gl.drawArrays(gl.LINES,0,p.item_number);		
			}	
		}
		gl.bindVertexArray(null);	
	}
}
