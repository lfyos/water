function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_program					=render.render_program.render_program[render_id].shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;

	if(do_render_number.engine_render==0){
		shader_program.primitive_type_uniform	=gl.getUniformLocation(shader_program,"primitive_type");
		shader_program.token_place_uniform		=gl.getUniformLocation(shader_program,"token_place");
	}
	
	if(method_id!=0)
		return;
	
	part_buffer_object=part_buffer_object.face;
	
	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id=component_data_array[i];
		
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
			
		var component_id		=data_buffer[buffer_id][0][0];
		var token_place_array	=data_buffer[buffer_id][0];
		
		var ep=render.component_event_processor[component_id];
		if(typeof(ep)=="undefined"){
			ep=new Object();
			
			ep.keydown=function(event,component_id,render)
			{
				if(render.pickup.component_id>=0)
					switch(event.keyCode){
					case 8://BackSpace
					case 46://46
						render.call_server_component(component_id,0,[["operation","delete"]]);
						break;
					default:
						break;
					};
			};
			ep.mousedown=function(event,component_id,render)
			{
				if(render.pickup.component_id<0)
					return true;
				switch(event.button){
				case 0:	
					var value;
					if((value=prompt("",""))==null)
						break;
					if((value=value.trim())=="")
						break;
					value=encodeURIComponent(encodeURIComponent(value));
					render.call_server_component(component_id,0,
						[["operation","append"],["value",value]]);
					break;
				case 1:
				case 2:
					break;
				}
				return true;
			}	
			render.component_event_processor[component_id]=ep;
		}
		
		if(token_place_array.length>1)
			for(var j=0,nj=part_buffer_object.region_data.length;j<nj;j++){
				var p=part_buffer_object.region_data[j];
				if(typeof(p.vertex_array_object)!="undefined")
					gl.bindVertexArray(p.vertex_array_object);
				else{
					p.vertex_array_object=gl.createVertexArray();
					gl.bindVertexArray(p.vertex_array_object);
					gl.bindBuffer(gl.ARRAY_BUFFER,p.buffer_object);
					
					var attribute_id;
					
					attribute_id=gl.getAttribLocation (shader_program,"vertex_location");
					gl.vertexAttribPointer		(attribute_id,4,gl.FLOAT,false,p.item_size*4,0);
					gl.enableVertexAttribArray	(attribute_id);
				}
				for(var k=1,nk=token_place_array.length;k<nk;k++){
					var my_component_id=token_place_array[k][3];
					var model_matrix_data=component_location.get_component_location(my_component_id);
					gl.uniform4fv(shader_program.token_place_uniform,new Float32Array(token_place_array[k]));
					
					gl.uniform1i(shader_program.primitive_type_uniform, 1);
					gl.drawArrays(gl.LINES,0,2);

					gl.uniform1i(shader_program.primitive_type_uniform,-1);
					gl.drawArrays(gl.POINTS,0,1);
				}
			}
	}
	gl.bindVertexArray(null);
}
