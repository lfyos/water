[
	[
		"vertex_location"
	]
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,	part_id,
			render_buffer_id,	component_data_array,	project_matrix,			view_port,	do_render_number,
			render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var shader_data						=shader_object.shader_data;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	
	
	if(do_render_number.engine_render==0){
		shader_program.loca_uniform	=gl.getUniformLocation(shader_program,"loca");
		shader_program.p0_uniform	=gl.getUniformLocation(shader_program,"p0");
		shader_program.p1_uniform	=gl.getUniformLocation(shader_program,"p1");
		shader_program.color_uniform=gl.getUniformLocation(shader_program,"color");
	}
	
	if(method_id!=0)
		return;

	part_buffer_object=part_buffer_object.face;
	
	gl.uniform4fv		(shader_program.color_uniform,new Float32Array(part_material));
	
	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id=component_data_array[i][0];
		var loca	 =component_data_array[i][1];
		var p0		 =component_data_array[i][2];
		var p1		 =component_data_array[i][3];
		
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
			
		gl.uniformMatrix4fv	(shader_program.loca_uniform,false,	new Float32Array(loca));
		gl.uniform4fv		(shader_program.p0_uniform,			new Float32Array(p0));	
		gl.uniform4fv		(shader_program.p1_uniform,			new Float32Array(p1));

		for(var j=0,nj=part_buffer_object.region_data.length;j<nj;j++){
			var p=part_buffer_object.region_data[j];
			gl.bindVertexArray(p.vertex_array_object[0]);
			gl.drawArrays(gl.LINES,0,p.item_number);
		}
	}
	gl.bindVertexArray(null);
}
