function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_program					=render.render_program.render_program[render_id].shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	
	function pixels_to_id(pixels)
	{
		var ids=new Array(Math.floor(pixels.length/4));
		for(var i=0,j=0,n=ids.length;i<n;i++,j+=4)
			ids[i]=render.utility.decode_integer_from_pixel(
						pixels[j+0],pixels[j+1],pixels[j+2],pixels[j+3]);
		return ids;
	};
	function caculate_triangle_id(target_id,render_target_id,
				width,height,render_target_number,render)
	{
		var pixels=new Uint8Array(4*width*height);
		
		gl.readBuffer(gl.COLOR_ATTACHMENT0);
		gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,pixels);
		var component_id_array=pixels_to_id(pixels);
						
		gl.readBuffer(gl.COLOR_ATTACHMENT1);
		gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,pixels);
		var body_id_array=pixels_to_id(pixels);
						
		gl.readBuffer(gl.COLOR_ATTACHMENT2);
		gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,pixels);
		var face_id_array=pixels_to_id(pixels);
					
		gl.readBuffer(gl.COLOR_ATTACHMENT3);
		gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,pixels);
		var vertex_id_array=pixels_to_id(pixels);
		
		for(var i=0,ni=component_id_array.length;i<ni;i++){
			if(component_id_array[i]<0)
				continue;
			if(body_id_array[i]<0)
				continue;
			if(face_id_array[i]<0)
				continue;
			if(vertex_id_array[i]<0)
				continue;
							
			var p=render.component_event_processor[component_id].triangle_array;
			for(var j=p.length,nj=component_id_array[i];j<=nj;j++)
				p[j]=new Array();
							
			p=p[component_id_array[i]];
			for(var j=p.length,nj=body_id_array[i];j<=nj;j++)
				p[j]=new Array();
								
			p=p[body_id_array[i]];
			for(var j=p.length,nj=face_id_array[i];j<=nj;j++)
				p[j]=new Array();
							
			p=p[face_id_array[i]];
			var triangle_id=Math.floor(vertex_id_array[i]/3.0);
			for(var j=p.length;j<=triangle_id;j++)
				p[j]=false;
			
			if(p[triangle_id])
				continue;
			p[triangle_id]=true;
			render.component_event_processor[component_id].triangle_number++;
		};
	};
	
	function clear_triangle(my_component_id)
	{
		render.component_event_processor[my_component_id].triangle_array=new Array();
		render.component_event_processor[my_component_id].triangle_number=0;
	};
	
	function caculate_triangle(my_component_id)
	{
		var str_content="",p=render.component_event_processor[my_component_id].triangle_array;
		for(var component_id=0,component_numner=p.length;component_id<component_numner;component_id++)
			for(var body_id=0,body_number=p[component_id].length;body_id<body_number;body_id++)
				for(var face_id=0,face_number=p[component_id][body_id].length;face_id<face_number;face_id++){
					var triangle_number=p[component_id][body_id][face_id].length;
					for(var triangle_id=0;triangle_id<triangle_number;triangle_id++)
						if(p[component_id][body_id][face_id][triangle_id])
							str_content+=component_id+"  "+body_id+"  "+face_id+"  "+triangle_id+"\n";
				}

		render.utility.upload_string(str_content,
			render.create_component_request_string(my_component_id,0,[["operation","end"]]),
			function()
			{
				clear_triangle(my_component_id);
				alert("Create Shell finished!");
			});
		return;
	};

	if(method_id!=0)
		return;

	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id=component_data_array[i];
		
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
			
		var component_id=data_buffer[buffer_id][0][0];
		var target_id=data_buffer[buffer_id][0][1];
		
		if(typeof(render.target_processor[target_id])=="undefined"){
			render.component_event_processor[component_id]=new Object();
			render.component_event_processor[component_id].triangle_array=new Array();
			render.component_event_processor[component_id].triangle_number=0;
			render.component_event_processor[component_id].clear_triangle=clear_triangle;
			render.component_event_processor[component_id].caculate_triangle=caculate_triangle;
			
			render.target_processor[target_id]=new Object();
			render.target_processor[target_id].after_target_render=caculate_triangle_id;
		}
	}
}
