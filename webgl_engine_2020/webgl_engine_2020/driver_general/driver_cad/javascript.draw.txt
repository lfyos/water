function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_program					=render.render_program.render_program[render_id].shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	function draw_primitive(my_display_bitmap,primitive_type,part_buffer_object,transparency_flag)
	{
		for(var i=0,ni=component_data_array.length;i<ni;i++){
			var buffer_id		=component_data_array[i][0];
			var display_bitmap	=component_data_array[i][1];
			
			while(data_buffer[buffer_id].length>1)
				data_buffer[buffer_id].shift();

			var component_id			=data_buffer[buffer_id][0][0];
			var transparency_value		=data_buffer[buffer_id][0][1];
			var close_clip_plane_number	=data_buffer[buffer_id][0][2];
			var selected_flag			=data_buffer[buffer_id][0][3];
			var scale_vector			=data_buffer[buffer_id][0][4];
			
			var discard_flag=false;
			
			if((display_bitmap&my_display_bitmap)==0){
				switch(method_id){
				case 1:
					break;
				case 4:
				case 5:
					if(pickup.component_id!=component_id)
						continue;
					if(((display_bitmap|16|32)&my_display_bitmap)==0)
						continue;
					switch(primitive_type){
					case gl.LINES:
						if((display_bitmap&16)==0)
							if((my_display_bitmap&16)!=0)
								discard_flag=true;
						break;
					case gl.POINTS:
						if((display_bitmap&32)==0)
							if((my_display_bitmap&32)!=0)
								discard_flag=true;
						break;
					}
					break;
				default:
					continue;
				}
			}

			var render_pass_number=1;
			if(gl.TRIANGLES==primitive_type){
				if(transparency_flag^(transparency_value<1.0))
					continue;
				if(close_clip_plane_number>0)
					render_pass_number=2;
			}
			var model_matrix_data=component_location.get_component_location(component_id);
			
			gl.uniform4f(shader_program.scale_vector_uniform,
				scale_vector[0],scale_vector[1],scale_vector[2],transparency_value);

			for(var j=0;j<render_pass_number;j++){
				gl.uniform1i(shader_program.flag_uniform,
					(selected_flag?1:0)		+((j!=0)?2:0)	+(discard_flag?4:0));
				
				if(render_pass_number>1){
					gl.enable(gl.STENCIL_TEST);
					if(j==0){
						gl.stencilFunc(gl.ALWAYS,0x01,0x01);
			 			gl.stencilOp(gl.KEEP,gl.INVERT,gl.INVERT);
		 			}else{
		 				gl.stencilFunc(gl.NOTEQUAL,0x00,0x01);
						gl.stencilOp(gl.KEEP,gl.ZERO,gl.ZERO);
		 			}
		 		}
				for(var k=0,nk=part_buffer_object.region_data.length;k<nk;k++){
					var p=part_buffer_object.region_data[k];
					if(typeof(p.vertex_array_object)!="undefined")
						gl.bindVertexArray(p.vertex_array_object);
					else{
						p.vertex_array_object=gl.createVertexArray();
						gl.bindVertexArray(p.vertex_array_object);
						gl.bindBuffer(gl.ARRAY_BUFFER,p.buffer_object);
						
						var attribute_id;
						
						attribute_id=gl.getAttribLocation (shader_program,"vertex_location");
						gl.vertexAttribPointer		(attribute_id,4,gl.FLOAT,false,p.item_size*4,0*16);
						gl.enableVertexAttribArray	(attribute_id);
						attribute_id=gl.getAttribLocation (shader_program,"vertex_normal");
						gl.vertexAttribPointer		(attribute_id,4,gl.FLOAT,false,p.item_size*4,1*16);
						gl.enableVertexAttribArray	(attribute_id);
						attribute_id=gl.getAttribLocation (shader_program,"vertex_material");
						gl.vertexAttribPointer		(attribute_id,4,gl.FLOAT,false,p.item_size*4,2*16);
						gl.enableVertexAttribArray	(attribute_id);
						attribute_id=gl.getAttribLocation (shader_program,"vertex_id");
						gl.vertexAttribPointer		(attribute_id,4,gl.FLOAT,false,p.item_size*4,3*16);
						gl.enableVertexAttribArray	(attribute_id);
						attribute_id=gl.getAttribLocation (shader_program,"vertex_texture");
						gl.vertexAttribPointer		(attribute_id,4,gl.FLOAT,false,p.item_size*4,4*16);
						gl.enableVertexAttribArray	(attribute_id);
						attribute_id=gl.getAttribLocation (shader_program,"vertex_color");
						gl.vertexAttribPointer		(attribute_id,4,gl.FLOAT,false,p.item_size*4,5*16);
						gl.enableVertexAttribArray	(attribute_id);
					}
					gl.bindBufferBase(gl.UNIFORM_BUFFER,1,part_material[0].material[p.material_id].buffer_object);
					gl.drawArrays(primitive_type,0,p.item_number);
				}
			}
			if(render_pass_number>0)
				gl.disable(gl.STENCIL_TEST);
		}
		gl.bindVertexArray(null);
	}

	if(do_render_number.engine_render==0){
		shader_program.light_information_uniform_block_buffer_object=gl.createBuffer();
		gl.bindBuffer(gl.UNIFORM_BUFFER,shader_program.light_information_uniform_block_buffer_object);
		gl.bufferData(gl.UNIFORM_BUFFER,part_material[0].light.length*32,gl.DYNAMIC_DRAW);

		gl.uniformBlockBinding(shader_program,gl.getUniformBlockIndex(shader_program,"light_information"),0);
		gl.bindBufferBase(gl.UNIFORM_BUFFER,0,shader_program.light_information_uniform_block_buffer_object);
		
		gl.uniformBlockBinding(shader_program,gl.getUniformBlockIndex(shader_program,"material_information"),1);
		
		shader_program.scale_vector_uniform	=gl.getUniformLocation(shader_program,"scale_vector");
		shader_program.flag_uniform=gl.getUniformLocation(shader_program,"flag");
	}
	if(do_render_number.engine_part==0){
		for(var i=0,ni=part_material[0].material.length;i<ni;i++){
			var p=part_material[0].material[i],buffer_data=new Array();
			
			buffer_data=buffer_data.concat(p.ambient);
			buffer_data=buffer_data.concat(p.diffuse);
			buffer_data=buffer_data.concat(p.specular);
			buffer_data=buffer_data.concat(p.emission);
			buffer_data=buffer_data.concat([p.shininess,0,0,1]);
			
			p.buffer_object=gl.createBuffer();
			gl.bindBuffer(gl.UNIFORM_BUFFER,p.buffer_object);
			gl.bufferData(gl.UNIFORM_BUFFER,new Float32Array(buffer_data),gl.STATIC_DRAW);
		}
	}
	if(do_render_number.render_render==0){
		var light=part_material[0].light,light_data=new Array(),color_data=new Array();
		for(var i=0,ni=light.length;i<ni;i++){
			var light_component_id	=camera_object_parameter[light[i].camera_id].component_id;
			var light_distance		=camera_object_parameter[light[i].camera_id].distance;
			var light_matrix		=component_location.get_component_location_routine(light_component_id);
			var light_position		=computer.caculate_coordinate(light_matrix,0,0,light_distance);
			light_data.push(light_position[0],			light_position[1],			light_position[2],			light_position[3]);
			color_data.push(light[i].color_factor[0],	light[i].color_factor[1],	light[i].color_factor[2],	light[i].color_factor[3]);
		}	
		gl.bindBuffer(gl.UNIFORM_BUFFER,shader_program.light_information_uniform_block_buffer_object);
		gl.bufferSubData(gl.UNIFORM_BUFFER,0,new Float32Array(light_data.concat(color_data)),0);
	}

	switch(method_id){
	case 0://render scene before depth rendering
		break;
	case 1://render scene for component selection
		gl.polygonOffset(1,1);
		gl.enable(gl.POLYGON_OFFSET_FILL);
		draw_primitive(2+32,		gl.TRIANGLES,	part_buffer_object.face, 	false);
		gl.disable(gl.POLYGON_OFFSET_FILL);
		
		draw_primitive(2+32,		gl.POINTS,		part_buffer_object.point,	false);
		break;
	case 2://render scene for shadow depth
		gl.polygonOffset(1,1);
		gl.enable(gl.POLYGON_OFFSET_FILL);
		draw_primitive(2,			gl.TRIANGLES,	part_buffer_object.face, 	false);
		gl.disable(gl.POLYGON_OFFSET_FILL);
		break;
	case 3://render depth only,no color rendering
		gl.colorMask(false,false,false,false);
		
		gl.polygonOffset(1,1);
		gl.enable(gl.POLYGON_OFFSET_FILL);
		draw_primitive(4,			gl.TRIANGLES,	part_buffer_object.face, 	false);
		gl.disable(gl.POLYGON_OFFSET_FILL);
		
		gl.colorMask(true,true,true,true);
		break;
	case 4://render scene after depth rendering
		gl.polygonOffset(1,1);
		gl.enable(gl.POLYGON_OFFSET_FILL);
		draw_primitive(2,			gl.TRIANGLES,	part_buffer_object.face, 	false);
		gl.disable(gl.POLYGON_OFFSET_FILL);
		
		draw_primitive(8,			gl.LINES,		part_buffer_object.frame,	false);
		draw_primitive(16,			gl.LINES,		part_buffer_object.edge,	false);
		draw_primitive(32,			gl.POINTS,		part_buffer_object.point,	false);
		
		break;
	case 5://render scene for blending
		gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);
		gl.enable(gl.BLEND);
		gl.depthMask(false);
	
		gl.polygonOffset(1,1);
		gl.enable(gl.POLYGON_OFFSET_FILL);
		draw_primitive(2,			gl.TRIANGLES,	part_buffer_object.face, 	true);
		gl.disable(gl.POLYGON_OFFSET_FILL);
		
		gl.disable(gl.BLEND);
		gl.depthMask(true);
		break;
	default:
		return;
	}
}
