[
	[
		"vertex_location",
		"vertex_normal",
		"vertex_material",
		"vertex_id",
		"vertex_texture"
	]
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,	part_id,
			render_buffer_id,	component_data_array,	project_matrix,			view_port,	do_render_number,
			render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var shader_data						=shader_object.shader_data;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	
	
	if(do_render_number.engine_render==0){
		shader_program.sampler=gl.createSampler();
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MAG_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MIN_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_S,		gl.MIRRORED_REPEAT);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_T,		gl.MIRRORED_REPEAT);
		gl.uniform1i(gl.getUniformLocation(shader_program,"texture_sampler"),0);
		
		shader_program.destroy=function(gl,shader_program,shader_object,program_id)
		{
			gl.deleteSampler(shader_program.sampler);
			shader_program.sampler=null;
		};
		shader_program.texture_sampler_uniform	=gl.getUniformLocation(shader_program,"texture_sampler");
		shader_program.par_uniform				=gl.getUniformLocation(shader_program,"par");
	}
	
	switch(method_id){
	case 0:
	case 1:
		break;
	default:
		return;
	}

	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id	=component_data_array[i];
		var component_id=part_component_id_and_driver_id[buffer_id][0];
		var driver_id	=part_component_id_and_driver_id[buffer_id][1];
		
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
		
		var ep=render.component_event_processor[component_id];
		if(typeof(ep)=="undefined"){
			ep={
				pickupdblclick		:	function(event,component_id,render)
				{
					return true;
				},
				pickupmousedown		:	function(event,component_id,render)
				{
					switch(event.button){
					case 0:
						render.call_server_component(component_id,"all",
							[["operation",(event.ctrlKey||event.shiftKey||event.altKey)?"locate":"swap_select"]]);
						break;
					case 1:
					case 2:
						render.call_server_component(component_id,"all",[["operation","delete"]]);
						break;
					}
					return true;
				},
				destroy				:	function(gl,ep,component_id)
				{
					if(typeof(ep.marker_texture_object)!="undefined"){
						for(var i=0,ni=ep.marker_texture_object.length;i<ni;i++){
							gl.deleteTexture(ep.marker_texture_object[i]);
							ep.marker_texture_object[i]=null;
						}
						ep.marker_texture_object=new Array();
					}
				},
				marker_text_width	:	new Array()
			};
			render.component_event_processor[component_id]=ep;
		}
		if(typeof(ep.marker_texture_object)=="undefined")
			ep.marker_texture_object=new Array();

		for(var j=0,nj=data_buffer[buffer_id][0].length;j<nj;j++){
			var p=data_buffer[buffer_id][0];
			var marker_component_id	=p[j][0];
			var marker_x			=p[j][1];
			var marker_y			=p[j][2];
			var marker_z			=p[j][3];
			var marker_text			=p[j][4];
			var marker_width		=p[j][5];
			var marker_height		=p[j][6];
			
			
			if(typeof(ep.marker_texture_object[j])=="undefined")
				ep.marker_texture_object[j]=utility.load_texture_image(null);
			gl.activeTexture(gl.TEXTURE0);
			gl.bindTexture(gl.TEXTURE_2D,ep.marker_texture_object[j]);
			gl.bindSampler(0, shader_program.sampler);
			
			if((render.canvas.width!=marker_width)||(render.canvas.height!=marker_height)){
				p[j][5]=render.canvas.width;
				p[j][6]=render.canvas.height;
				
				render.text_canvas.width			=render.canvas.width;
				render.text_canvas.height			=part_material[0].canvas_height;
				render.text_2dcontext.fillStyle		="rgb(0,0,0)";
				render.text_2dcontext.fillRect(0,0,render.text_canvas.width,render.text_canvas.height);

				render.text_2dcontext.font			=part_material[0].font;
				render.text_2dcontext.textBaseline	="middle";
				render.text_2dcontext.textAlign		="left";
				render.text_2dcontext.fillStyle		="rgb(255,255,255)";
				render.text_2dcontext.fillText(marker_text,0,Math.round(render.text_canvas.height/2.0));

				gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,render.text_canvas);
				
				ep.marker_text_width[j]	=render.text_2dcontext.measureText(marker_text).width;
			}
			var marker_text_width=ep.marker_text_width[j]/render.canvas.width;
			var model_matrix_data=component_location.get_component_location(marker_component_id);
			gl.uniformMatrix4fv(shader_program.par_uniform,false,new Float32Array([	
				marker_x,			marker_y,		marker_z,		1,
				0,					0,				0,				1,
				marker_text_width,	1,				0,				0,
				component_id,		j,				0,				1]));
				
			for(var k=0,nk=part_buffer_object.face.region_data.length;k<nk;k++){
				p=part_buffer_object.face.region_data[k];
				gl.bindVertexArray(p.vertex_array_object[0]);
				gl.drawArrays(gl.TRIANGLES,0,p.item_number);
			}
			for(var k=0,nk=part_buffer_object.edge.region_data.length;k<nk;k++){
				p=part_buffer_object.edge.region_data[k];
				gl.bindVertexArray(p.vertex_array_object[0]);
				gl.drawArrays(gl.LINES,0,p.item_number);
			}
			for(var k=0,nk=part_buffer_object.point.region_data.length;k<nk;k++){
				p=part_buffer_object.point.region_data[k];
				gl.bindVertexArray(p.vertex_array_object[0]);
				gl.drawArrays(gl.POINTS,0,p.item_number);
			}
		}
	}
	gl.bindVertexArray(null);
}
