[
	
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,	part_id,
			render_buffer_id,	component_data_array,	project_matrix,			view_port,	do_render_number,
			render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var shader_data						=shader_object.shader_data;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;

	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	
	
	if(do_render_number.engine_part==0){
		render.append_routine_function(
			function(render)
			{
				var component_id	=part_buffer_object.component_id;
				var distance_scale	=part_buffer_object.distance_scale;
				var distance		=part_buffer_object.distance;

				if((typeof(component_id)=="undefined")||(typeof(distance)=="undefined"))
					return true;
				if((component_id<0)||(distance<=0))
					return true;
				var new_version;
				if((new_version=render.deviceorientation.get_deviceorientation_version())<=10)
					return true;
				if(typeof(part_buffer_object.version)!="undefined")
					if(part_buffer_object.version==new_version)
						return true;
				part_buffer_object.version=new_version;
			
				var old_loca=component_location.get_component_location_routine(component_id);
				var p=computer.caculate_coordinate(old_loca,0,0,distance*distance_scale);
				var new_loca=computer.matrix_multiplication(
						computer.create_move_rotate_matrix(p[0],p[1],p[2],0,0,0),
						render.deviceorientation.get_deviceorientation_location());
				new_loca=computer.matrix_multiplication(new_loca,
						computer.create_move_rotate_matrix(0,0,-(distance*distance_scale),0,0,0));
				var modify_loca=computer.matrix_multiplication(computer.matrix_negative(old_loca),new_loca);
				var old_move_loca=component_location.get_one_component_location(component_id);
				var new_move_loca=computer.matrix_multiplication(old_move_loca,modify_loca);

				component_location.component[component_id].caculate_location_flag=true;
				component_location.modify_one_component_location(component_id,new_move_loca);

				var str=new_loca[0].toString();
				for(var i=1,ni=new_loca.length;i<ni;i++)
					str+=","+new_move_loca[i].toString();
				render.call_server_part(render_id,part_id,[["component",component_id],["data",str]]);

				return true;
			});
	}
	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id=component_data_array[i];
		while(data_buffer[buffer_id].length>1)
			data_buffer[buffer_id].shift();
		part_buffer_object.component_id		=data_buffer[buffer_id][0][0]?camera_component_id:-1;
		part_buffer_object.distance_scale	=data_buffer[buffer_id][0][1]?0.0:1.0;
		part_buffer_object.distance			=camera_object_parameter[camera_id].distance;
	}
}
