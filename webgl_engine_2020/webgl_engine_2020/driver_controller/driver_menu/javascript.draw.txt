[
	[
		"vertex_location"
	]
],

function (	method_id,			pass_id,				parameter_channel_id,	render_id,			part_id,
			render_buffer_id,	component_data_array,	project_matrix,			do_render_number,	render)
{
	var gl								=render.gl;
	var shader_object					=render.render_program.render_program[render_id];
	var shader_program					=shader_object.shader_program;
	var part_buffer_object				=render.buffer_object.buffer_object[render_id][part_id];
	
	var component_location				=render.component_location_data;
	
	var data_buffer						=render.data_buffer[render_id][part_id];
	var pickup							=render.pickup;
	
	var permanent_render_id				=render.permanent_render_part_id[render_id][part_id].permanent_render_id;
	var permanent_part_id				=render.permanent_render_part_id[render_id][part_id].permanent_part_id;
	
	var part_information				=render.part_information[render_id][part_id].information;
	var part_material					=render.part_information[render_id][part_id].material;
	var part_property					=render.part_information[render_id][part_id].property;
	var part_component_id_and_driver_id	=render.part_information[render_id][part_id].part_component_id_and_driver_id;
	var instance_initialize_data		=render.part_information[render_id][part_id].instance_initialize_data;
	var part_initialize_data			=render.part_information[render_id][part_id].part_initialize_data;
	var render_initialize_data			=render.part_information[render_id][part_id].render_initialize_data;
	
	var clip_plane						=render.clip_plane_array[render_buffer_id];
	var clip_plane_matrix				=render.clip_plane_matrix_array[render_buffer_id];
	
	var camera_object_parameter			=render.camera.camera_object_parameter;
	var camera_render_parameter			=render.camera.camera_render_parameter[render_buffer_id];
	var camera_id						=camera_render_parameter.camera_id;
	var camera_component_id				=camera_object_parameter[camera_id].component_id;
	
	var utility							=render.utility;
	var computer						=render.computer;
	var current_time					=render.current_time;
	var modifier_current_time			=render.modifier_current_time;
	
	if(do_render_number.engine_render==0){
		shader_program.sampler=gl.createSampler();
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MAG_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_MIN_FILTER,	gl.LINEAR);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_S,		gl.MIRRORED_REPEAT);
		gl.samplerParameteri(shader_program.sampler,	gl.TEXTURE_WRAP_T,		gl.MIRRORED_REPEAT);
			
		shader_program.par_uniform				=gl.getUniformLocation(shader_program,"par");
		shader_program.texture_sampler_uniform	=gl.getUniformLocation(shader_program,"texture_sampler");
	}
	
	switch(method_id){
	case 0:
	case 1:
		break;
	default:
		return;
	}

	part_buffer_object=part_buffer_object.face;

	for(var i=0,ni=component_data_array.length;i<ni;i++){
		var buffer_id	=component_data_array[i];
		var component_id=part_component_id_and_driver_id[buffer_id][0];
		var driver_id	=part_component_id_and_driver_id[buffer_id][1];
		
		var clear_adjust_number=0;
		while(data_buffer[buffer_id].length>1){
			data_buffer[buffer_id].shift();
			clear_adjust_number++;
		}

		var p=data_buffer[buffer_id][0];
		var operate_component_id=p[0];
		var operate_x			=p[1];
		var operate_y			=p[2];
		var operate_z			=p[3];
		var x0					=p[4];
		var y0					=p[5];
		var dx					=p[6];
		var dy					=p[7];
		
		
		var model_matrix_data=component_location.get_component_location(component_id);
		
		var ep=render.component_event_processor[component_id];
		if(typeof(ep)!="object")
			continue;

		if(typeof(ep.pickupmousedown)!="function"){
			ep.mousedown_flag=false;
			ep.adjust_x=0;
			ep.adjust_y=0;
			ep.mouse_x =render.view.x;
			ep.mouse_y =render.view.y;
			ep.mouse_x0=render.view.x;
			ep.mouse_y0=render.view.y;
			ep.hightlight=[-1,-1,-1,-1];
			
			ep.pickupdblclick=function(event,component_id,render)
			{
				return true;
			};
			ep.pickupmousedown=function(event,component_id,render)
			{
				var ep=render.component_event_processor[component_id];
				
				ep.mousedown_flag=true;
				ep.mouse_x =render.view.x;
				ep.mouse_y =render.view.y;
				ep.mouse_x0=render.view.x;
				ep.mouse_y0=render.view.y;
				
				return true;
			};
			ep.pickupmousemove=function(event,component_id,render)
			{
				var ep=render.component_event_processor[component_id];
				if(ep.mousedown_flag){
					ep.adjust_x+=render.view.x-ep.mouse_x;
					ep.adjust_y+=render.view.y-ep.mouse_y;
					ep.mouse_x=render.view.x;
					ep.mouse_y=render.view.y;
				}
				return true;
			};
			ep.pickupmouseup=function(event,component_id,render)
			{
				var ep=render.component_event_processor[component_id];
				if(ep.mousedown_flag){
					ep.mousedown_flag=false;
					if(typeof(ep.pickupmouseselect)=="function"){
						var dx=ep.mouse_x0-render.view.x;
						var dy=ep.mouse_y0-render.view.y;
						if((dx*dx+dy*dy)<=(0.01*0.01))
							ep.pickupmouseselect(event,component_id,render);
					}
					if((ep.adjust_x!=0)||(ep.adjust_y!=0))
						render.call_server_component(component_id,"all",
							[["operation","adjust"],["x",ep.adjust_x],["y",ep.adjust_y]]);
				}
				return	true;
			};
		}
		
		if(clear_adjust_number>0){
			ep.adjust_x=0;
			ep.adjust_y=0;
			ep.hightlight=[-1,-1,-1,-1];
		};
		
		x0+=ep.adjust_x;
		y0+=ep.adjust_y;

		ep.operate_component_id=operate_component_id;
		ep.x0=x0;
		ep.y0=y0;
		ep.dx=dx;
		ep.dy=dy;
		
		ep.operate_x=operate_x;
		ep.operate_y=operate_y;
		ep.operate_z=operate_z;
		
		ep.x=(render.view.x-x0)/dx;
		ep.y=(render.view.y-y0)/dy;
		
		if(typeof(ep.texture_object)=="undefined")
			ep.texture_object=utility.load_texture_image(instance_initialize_data[buffer_id]);
		
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D,ep.texture_object);
		gl.bindSampler(0,shader_program.sampler);
		gl.uniform1i(shader_program.texture_sampler_uniform,0);
				
		gl.uniformMatrix4fv(shader_program.par_uniform,false,new Float32Array(
				[	
					render.view.aspect*x0,	y0,					0,					1.0,
					render.view.aspect*dx,	dy,					0,					0.0,
					ep.hightlight[0],		ep.hightlight[1],	ep.hightlight[2],	ep.hightlight[3],
					0,						0,					0,					1
				]));		
		for(var j=0,nj=part_buffer_object.region_data.length;j<nj;j++){
			var p=part_buffer_object.region_data[j];
			gl.bindVertexArray(p.vertex_array_object[0]);
			gl.drawArrays(gl.TRIANGLES,0,p.item_number);
		}
		gl.bindVertexArray(null);
	}
}
